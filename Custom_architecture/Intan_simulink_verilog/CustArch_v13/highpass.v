// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v13\highpass.v
// Created: 2021-06-18 09:34:56
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: highpass
// Source Path: CustArch_v13/cust_architecture/process_and_retrieve/Filter_ch1/digital_filter/highpass
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module highpass
          (clk,
           reset,
           enb,
           In_0,
           In_1,
           In_2,
           In_3,
           In_4,
           In_5,
           In_6,
           In_7,
           Enable_out2,
           Out_0,
           Out_1,
           Out_2,
           Out_3,
           Out_4,
           Out_5,
           Out_6,
           Out_7);


  input   clk;
  input   reset;
  input   enb;
  input   signed [31:0] In_0;  // sfix32_En16
  input   signed [31:0] In_1;  // sfix32_En16
  input   signed [31:0] In_2;  // sfix32_En16
  input   signed [31:0] In_3;  // sfix32_En16
  input   signed [31:0] In_4;  // sfix32_En16
  input   signed [31:0] In_5;  // sfix32_En16
  input   signed [31:0] In_6;  // sfix32_En16
  input   signed [31:0] In_7;  // sfix32_En16
  input   Enable_out2;
  output  signed [31:0] Out_0;  // sfix32_En20
  output  signed [31:0] Out_1;  // sfix32_En20
  output  signed [31:0] Out_2;  // sfix32_En20
  output  signed [31:0] Out_3;  // sfix32_En20
  output  signed [31:0] Out_4;  // sfix32_En20
  output  signed [31:0] Out_5;  // sfix32_En20
  output  signed [31:0] Out_6;  // sfix32_En20
  output  signed [31:0] Out_7;  // sfix32_En20


  wire signed [31:0] In [0:7];  // sfix32_En16 [8]
  wire signed [15:0] Input_Quantizer_out1 [0:7];  // int16 [8]
  wire signed [15:0] filter_in_0;  // int16
  wire signed [31:0] scaleconst1;  // sfix32_En15
  wire signed [47:0] multiplier_mul_temp;  // sfix48_En15
  wire signed [63:0] scale1;  // sfix64_En26
  wire signed [31:0] scaletypeconvert1;  // sfix32_En16
  wire signed [31:0] inputconv1;  // sfix32_En7
  wire enb_gated;
  wire signed [31:0] coeff_a2_section1;  // sfix32_En30
  wire enb_gated_1;
  wire signed [31:0] coeff_a3_section1;  // sfix32_En30
  reg signed [31:0] typeconvert1_tap0;  // sfix32_En8
  reg signed [31:0] typeconvert1_tap1;  // sfix32_En8
  wire signed [63:0] multiplier2_mul_temp;  // sfix64_En38
  wire signed [31:0] a3mul1;  // sfix32_En7
  wire signed [31:0] typeconvert1;  // sfix32_En8
  wire signed [63:0] multiplier1_mul_temp;  // sfix64_En38
  wire signed [31:0] a2mul1;  // sfix32_En7
  wire signed [32:0] Sub_sub_cast;  // sfix33_En7
  wire signed [32:0] Sub_sub_cast_1;  // sfix33_En7
  wire signed [32:0] a2sum1_temp;  // sfix33_En7
  wire signed [31:0] a2sum1;  // sfix32_En7
  wire signed [32:0] Sub1_sub_cast;  // sfix33_En7
  wire signed [32:0] Sub1_sub_cast_1;  // sfix33_En7
  wire signed [32:0] a1sum1_temp;  // sfix33_En7
  wire signed [31:0] a1sum1;  // sfix32_En7
  wire signed [31:0] b1mul1;  // sfix32_En7
  wire signed [63:0] gain1_mul_temp;  // sfix64_En38
  wire signed [63:0] gain1_1;  // sfix64
  wire signed [31:0] b2mul1;  // sfix32_En7
  wire signed [32:0] adder_add_cast;  // sfix33_En7
  wire signed [32:0] adder_add_cast_1;  // sfix33_En7
  wire signed [32:0] adder_add_temp;  // sfix33_En7
  wire signed [31:0] b2sum1;  // sfix32_En7
  wire signed [31:0] b3mul1;  // sfix32_En7
  wire signed [32:0] adder1_add_cast;  // sfix33_En7
  wire signed [32:0] adder1_add_cast_1;  // sfix33_En7
  wire signed [32:0] adder1_add_temp;  // sfix33_En7
  wire signed [31:0] b1sum1;  // sfix32_En7
  wire signed [31:0] output_typeconvert;  // sfix32_En20
  wire signed [15:0] filter_in_1;  // int16
  wire signed [31:0] scaleconst1_1;  // sfix32_En15
  wire signed [47:0] multiplier3_mul_temp;  // sfix48_En15
  wire signed [63:0] scale1_1;  // sfix64_En26
  wire signed [31:0] scaletypeconvert1_1;  // sfix32_En16
  wire signed [31:0] inputconv1_1;  // sfix32_En7
  wire enb_gated_2;
  wire signed [31:0] coeff_a2_section1_1;  // sfix32_En30
  wire enb_gated_3;
  wire signed [31:0] coeff_a3_section1_1;  // sfix32_En30
  reg signed [31:0] typeconvert1_tap0_1;  // sfix32_En8
  reg signed [31:0] typeconvert1_tap1_1;  // sfix32_En8
  wire signed [63:0] multiplier5_mul_temp;  // sfix64_En38
  wire signed [31:0] a3mul1_1;  // sfix32_En7
  wire signed [31:0] typeconvert1_1;  // sfix32_En8
  wire signed [63:0] multiplier4_mul_temp;  // sfix64_En38
  wire signed [31:0] a2mul1_1;  // sfix32_En7
  wire signed [32:0] Sub2_sub_cast;  // sfix33_En7
  wire signed [32:0] Sub2_sub_cast_1;  // sfix33_En7
  wire signed [32:0] a2sum1_temp_1;  // sfix33_En7
  wire signed [31:0] a2sum1_1;  // sfix32_En7
  wire signed [32:0] Sub3_sub_cast;  // sfix33_En7
  wire signed [32:0] Sub3_sub_cast_1;  // sfix33_En7
  wire signed [32:0] a1sum1_temp_1;  // sfix33_En7
  wire signed [31:0] a1sum1_1;  // sfix32_En7
  wire signed [31:0] b1mul1_1;  // sfix32_En7
  wire signed [63:0] gain4_mul_temp;  // sfix64_En38
  wire signed [63:0] gain4_1;  // sfix64
  wire signed [31:0] b2mul1_1;  // sfix32_En7
  wire signed [32:0] adder2_add_cast;  // sfix33_En7
  wire signed [32:0] adder2_add_cast_1;  // sfix33_En7
  wire signed [32:0] adder2_add_temp;  // sfix33_En7
  wire signed [31:0] b2sum1_1;  // sfix32_En7
  wire signed [31:0] b3mul1_1;  // sfix32_En7
  wire signed [32:0] adder3_add_cast;  // sfix33_En7
  wire signed [32:0] adder3_add_cast_1;  // sfix33_En7
  wire signed [32:0] adder3_add_temp;  // sfix33_En7
  wire signed [31:0] b1sum1_1;  // sfix32_En7
  wire signed [31:0] output_typeconvert_1;  // sfix32_En20
  wire signed [15:0] filter_in_2;  // int16
  wire signed [31:0] scaleconst1_2;  // sfix32_En15
  wire signed [47:0] multiplier6_mul_temp;  // sfix48_En15
  wire signed [63:0] scale1_2;  // sfix64_En26
  wire signed [31:0] scaletypeconvert1_2;  // sfix32_En16
  wire signed [31:0] inputconv1_2;  // sfix32_En7
  wire enb_gated_4;
  wire signed [31:0] coeff_a2_section1_2;  // sfix32_En30
  wire enb_gated_5;
  wire signed [31:0] coeff_a3_section1_2;  // sfix32_En30
  reg signed [31:0] typeconvert1_tap0_2;  // sfix32_En8
  reg signed [31:0] typeconvert1_tap1_2;  // sfix32_En8
  wire signed [63:0] multiplier8_mul_temp;  // sfix64_En38
  wire signed [31:0] a3mul1_2;  // sfix32_En7
  wire signed [31:0] typeconvert1_2;  // sfix32_En8
  wire signed [63:0] multiplier7_mul_temp;  // sfix64_En38
  wire signed [31:0] a2mul1_2;  // sfix32_En7
  wire signed [32:0] Sub4_sub_cast;  // sfix33_En7
  wire signed [32:0] Sub4_sub_cast_1;  // sfix33_En7
  wire signed [32:0] a2sum1_temp_2;  // sfix33_En7
  wire signed [31:0] a2sum1_2;  // sfix32_En7
  wire signed [32:0] Sub5_sub_cast;  // sfix33_En7
  wire signed [32:0] Sub5_sub_cast_1;  // sfix33_En7
  wire signed [32:0] a1sum1_temp_2;  // sfix33_En7
  wire signed [31:0] a1sum1_2;  // sfix32_En7
  wire signed [31:0] b1mul1_2;  // sfix32_En7
  wire signed [63:0] gain7_mul_temp;  // sfix64_En38
  wire signed [63:0] gain7_1;  // sfix64
  wire signed [31:0] b2mul1_2;  // sfix32_En7
  wire signed [32:0] adder4_add_cast;  // sfix33_En7
  wire signed [32:0] adder4_add_cast_1;  // sfix33_En7
  wire signed [32:0] adder4_add_temp;  // sfix33_En7
  wire signed [31:0] b2sum1_2;  // sfix32_En7
  wire signed [31:0] b3mul1_2;  // sfix32_En7
  wire signed [32:0] adder5_add_cast;  // sfix33_En7
  wire signed [32:0] adder5_add_cast_1;  // sfix33_En7
  wire signed [32:0] adder5_add_temp;  // sfix33_En7
  wire signed [31:0] b1sum1_2;  // sfix32_En7
  wire signed [31:0] output_typeconvert_2;  // sfix32_En20
  wire signed [15:0] filter_in_3;  // int16
  wire signed [31:0] scaleconst1_3;  // sfix32_En15
  wire signed [47:0] multiplier9_mul_temp;  // sfix48_En15
  wire signed [63:0] scale1_3;  // sfix64_En26
  wire signed [31:0] scaletypeconvert1_3;  // sfix32_En16
  wire signed [31:0] inputconv1_3;  // sfix32_En7
  wire enb_gated_6;
  wire signed [31:0] coeff_a2_section1_3;  // sfix32_En30
  wire enb_gated_7;
  wire signed [31:0] coeff_a3_section1_3;  // sfix32_En30
  reg signed [31:0] typeconvert1_tap0_3;  // sfix32_En8
  reg signed [31:0] typeconvert1_tap1_3;  // sfix32_En8
  wire signed [63:0] multiplier11_mul_temp;  // sfix64_En38
  wire signed [31:0] a3mul1_3;  // sfix32_En7
  wire signed [31:0] typeconvert1_3;  // sfix32_En8
  wire signed [63:0] multiplier10_mul_temp;  // sfix64_En38
  wire signed [31:0] a2mul1_3;  // sfix32_En7
  wire signed [32:0] Sub6_sub_cast;  // sfix33_En7
  wire signed [32:0] Sub6_sub_cast_1;  // sfix33_En7
  wire signed [32:0] a2sum1_temp_3;  // sfix33_En7
  wire signed [31:0] a2sum1_3;  // sfix32_En7
  wire signed [32:0] Sub7_sub_cast;  // sfix33_En7
  wire signed [32:0] Sub7_sub_cast_1;  // sfix33_En7
  wire signed [32:0] a1sum1_temp_3;  // sfix33_En7
  wire signed [31:0] a1sum1_3;  // sfix32_En7
  wire signed [31:0] b1mul1_3;  // sfix32_En7
  wire signed [63:0] gain10_mul_temp;  // sfix64_En38
  wire signed [63:0] gain10_1;  // sfix64
  wire signed [31:0] b2mul1_3;  // sfix32_En7
  wire signed [32:0] adder6_add_cast;  // sfix33_En7
  wire signed [32:0] adder6_add_cast_1;  // sfix33_En7
  wire signed [32:0] adder6_add_temp;  // sfix33_En7
  wire signed [31:0] b2sum1_3;  // sfix32_En7
  wire signed [31:0] b3mul1_3;  // sfix32_En7
  wire signed [32:0] adder7_add_cast;  // sfix33_En7
  wire signed [32:0] adder7_add_cast_1;  // sfix33_En7
  wire signed [32:0] adder7_add_temp;  // sfix33_En7
  wire signed [31:0] b1sum1_3;  // sfix32_En7
  wire signed [31:0] output_typeconvert_3;  // sfix32_En20
  wire signed [15:0] filter_in_4;  // int16
  wire signed [31:0] scaleconst1_4;  // sfix32_En15
  wire signed [47:0] multiplier12_mul_temp;  // sfix48_En15
  wire signed [63:0] scale1_4;  // sfix64_En26
  wire signed [31:0] scaletypeconvert1_4;  // sfix32_En16
  wire signed [31:0] inputconv1_4;  // sfix32_En7
  wire enb_gated_8;
  wire signed [31:0] coeff_a2_section1_4;  // sfix32_En30
  wire enb_gated_9;
  wire signed [31:0] coeff_a3_section1_4;  // sfix32_En30
  reg signed [31:0] typeconvert1_tap0_4;  // sfix32_En8
  reg signed [31:0] typeconvert1_tap1_4;  // sfix32_En8
  wire signed [63:0] multiplier14_mul_temp;  // sfix64_En38
  wire signed [31:0] a3mul1_4;  // sfix32_En7
  wire signed [31:0] typeconvert1_4;  // sfix32_En8
  wire signed [63:0] multiplier13_mul_temp;  // sfix64_En38
  wire signed [31:0] a2mul1_4;  // sfix32_En7
  wire signed [32:0] Sub8_sub_cast;  // sfix33_En7
  wire signed [32:0] Sub8_sub_cast_1;  // sfix33_En7
  wire signed [32:0] a2sum1_temp_4;  // sfix33_En7
  wire signed [31:0] a2sum1_4;  // sfix32_En7
  wire signed [32:0] Sub9_sub_cast;  // sfix33_En7
  wire signed [32:0] Sub9_sub_cast_1;  // sfix33_En7
  wire signed [32:0] a1sum1_temp_4;  // sfix33_En7
  wire signed [31:0] a1sum1_4;  // sfix32_En7
  wire signed [31:0] b1mul1_4;  // sfix32_En7
  wire signed [63:0] gain13_mul_temp;  // sfix64_En38
  wire signed [63:0] gain13_1;  // sfix64
  wire signed [31:0] b2mul1_4;  // sfix32_En7
  wire signed [32:0] adder8_add_cast;  // sfix33_En7
  wire signed [32:0] adder8_add_cast_1;  // sfix33_En7
  wire signed [32:0] adder8_add_temp;  // sfix33_En7
  wire signed [31:0] b2sum1_4;  // sfix32_En7
  wire signed [31:0] b3mul1_4;  // sfix32_En7
  wire signed [32:0] adder9_add_cast;  // sfix33_En7
  wire signed [32:0] adder9_add_cast_1;  // sfix33_En7
  wire signed [32:0] adder9_add_temp;  // sfix33_En7
  wire signed [31:0] b1sum1_4;  // sfix32_En7
  wire signed [31:0] output_typeconvert_4;  // sfix32_En20
  wire signed [15:0] filter_in_5;  // int16
  wire signed [31:0] scaleconst1_5;  // sfix32_En15
  wire signed [47:0] multiplier15_mul_temp;  // sfix48_En15
  wire signed [63:0] scale1_5;  // sfix64_En26
  wire signed [31:0] scaletypeconvert1_5;  // sfix32_En16
  wire signed [31:0] inputconv1_5;  // sfix32_En7
  wire enb_gated_10;
  wire signed [31:0] coeff_a2_section1_5;  // sfix32_En30
  wire enb_gated_11;
  wire signed [31:0] coeff_a3_section1_5;  // sfix32_En30
  reg signed [31:0] typeconvert1_tap0_5;  // sfix32_En8
  reg signed [31:0] typeconvert1_tap1_5;  // sfix32_En8
  wire signed [63:0] multiplier17_mul_temp;  // sfix64_En38
  wire signed [31:0] a3mul1_5;  // sfix32_En7
  wire signed [31:0] typeconvert1_5;  // sfix32_En8
  wire signed [63:0] multiplier16_mul_temp;  // sfix64_En38
  wire signed [31:0] a2mul1_5;  // sfix32_En7
  wire signed [32:0] Sub10_sub_cast;  // sfix33_En7
  wire signed [32:0] Sub10_sub_cast_1;  // sfix33_En7
  wire signed [32:0] a2sum1_temp_5;  // sfix33_En7
  wire signed [31:0] a2sum1_5;  // sfix32_En7
  wire signed [32:0] Sub11_sub_cast;  // sfix33_En7
  wire signed [32:0] Sub11_sub_cast_1;  // sfix33_En7
  wire signed [32:0] a1sum1_temp_5;  // sfix33_En7
  wire signed [31:0] a1sum1_5;  // sfix32_En7
  wire signed [31:0] b1mul1_5;  // sfix32_En7
  wire signed [63:0] gain16_mul_temp;  // sfix64_En38
  wire signed [63:0] gain16_1;  // sfix64
  wire signed [31:0] b2mul1_5;  // sfix32_En7
  wire signed [32:0] adder10_add_cast;  // sfix33_En7
  wire signed [32:0] adder10_add_cast_1;  // sfix33_En7
  wire signed [32:0] adder10_add_temp;  // sfix33_En7
  wire signed [31:0] b2sum1_5;  // sfix32_En7
  wire signed [31:0] b3mul1_5;  // sfix32_En7
  wire signed [32:0] adder11_add_cast;  // sfix33_En7
  wire signed [32:0] adder11_add_cast_1;  // sfix33_En7
  wire signed [32:0] adder11_add_temp;  // sfix33_En7
  wire signed [31:0] b1sum1_5;  // sfix32_En7
  wire signed [31:0] output_typeconvert_5;  // sfix32_En20
  wire signed [15:0] filter_in_6;  // int16
  wire signed [31:0] scaleconst1_6;  // sfix32_En15
  wire signed [47:0] multiplier18_mul_temp;  // sfix48_En15
  wire signed [63:0] scale1_6;  // sfix64_En26
  wire signed [31:0] scaletypeconvert1_6;  // sfix32_En16
  wire signed [31:0] inputconv1_6;  // sfix32_En7
  wire enb_gated_12;
  wire signed [31:0] coeff_a2_section1_6;  // sfix32_En30
  wire enb_gated_13;
  wire signed [31:0] coeff_a3_section1_6;  // sfix32_En30
  reg signed [31:0] typeconvert1_tap0_6;  // sfix32_En8
  reg signed [31:0] typeconvert1_tap1_6;  // sfix32_En8
  wire signed [63:0] multiplier20_mul_temp;  // sfix64_En38
  wire signed [31:0] a3mul1_6;  // sfix32_En7
  wire signed [31:0] typeconvert1_6;  // sfix32_En8
  wire signed [63:0] multiplier19_mul_temp;  // sfix64_En38
  wire signed [31:0] a2mul1_6;  // sfix32_En7
  wire signed [32:0] Sub12_sub_cast;  // sfix33_En7
  wire signed [32:0] Sub12_sub_cast_1;  // sfix33_En7
  wire signed [32:0] a2sum1_temp_6;  // sfix33_En7
  wire signed [31:0] a2sum1_6;  // sfix32_En7
  wire signed [32:0] Sub13_sub_cast;  // sfix33_En7
  wire signed [32:0] Sub13_sub_cast_1;  // sfix33_En7
  wire signed [32:0] a1sum1_temp_6;  // sfix33_En7
  wire signed [31:0] a1sum1_6;  // sfix32_En7
  wire signed [31:0] b1mul1_6;  // sfix32_En7
  wire signed [63:0] gain19_mul_temp;  // sfix64_En38
  wire signed [63:0] gain19_1;  // sfix64
  wire signed [31:0] b2mul1_6;  // sfix32_En7
  wire signed [32:0] adder12_add_cast;  // sfix33_En7
  wire signed [32:0] adder12_add_cast_1;  // sfix33_En7
  wire signed [32:0] adder12_add_temp;  // sfix33_En7
  wire signed [31:0] b2sum1_6;  // sfix32_En7
  wire signed [31:0] b3mul1_6;  // sfix32_En7
  wire signed [32:0] adder13_add_cast;  // sfix33_En7
  wire signed [32:0] adder13_add_cast_1;  // sfix33_En7
  wire signed [32:0] adder13_add_temp;  // sfix33_En7
  wire signed [31:0] b1sum1_6;  // sfix32_En7
  wire signed [31:0] output_typeconvert_6;  // sfix32_En20
  wire signed [15:0] filter_in_7;  // int16
  wire signed [31:0] scaleconst1_7;  // sfix32_En15
  wire signed [47:0] multiplier21_mul_temp;  // sfix48_En15
  wire signed [63:0] scale1_7;  // sfix64_En26
  wire signed [31:0] scaletypeconvert1_7;  // sfix32_En16
  wire signed [31:0] inputconv1_7;  // sfix32_En7
  wire enb_gated_14;
  wire signed [31:0] coeff_a2_section1_7;  // sfix32_En30
  wire enb_gated_15;
  wire signed [31:0] coeff_a3_section1_7;  // sfix32_En30
  reg signed [31:0] typeconvert1_tap0_7;  // sfix32_En8
  reg signed [31:0] typeconvert1_tap1_7;  // sfix32_En8
  wire signed [63:0] multiplier23_mul_temp;  // sfix64_En38
  wire signed [31:0] a3mul1_7;  // sfix32_En7
  wire signed [31:0] typeconvert1_7;  // sfix32_En8
  wire signed [63:0] multiplier22_mul_temp;  // sfix64_En38
  wire signed [31:0] a2mul1_7;  // sfix32_En7
  wire signed [32:0] Sub14_sub_cast;  // sfix33_En7
  wire signed [32:0] Sub14_sub_cast_1;  // sfix33_En7
  wire signed [32:0] a2sum1_temp_7;  // sfix33_En7
  wire signed [31:0] a2sum1_7;  // sfix32_En7
  wire signed [32:0] Sub15_sub_cast;  // sfix33_En7
  wire signed [32:0] Sub15_sub_cast_1;  // sfix33_En7
  wire signed [32:0] a1sum1_temp_7;  // sfix33_En7
  wire signed [31:0] a1sum1_7;  // sfix32_En7
  wire signed [31:0] b1mul1_7;  // sfix32_En7
  wire signed [63:0] gain22_mul_temp;  // sfix64_En38
  wire signed [63:0] gain22_1;  // sfix64
  wire signed [31:0] b2mul1_7;  // sfix32_En7
  wire signed [32:0] adder14_add_cast;  // sfix33_En7
  wire signed [32:0] adder14_add_cast_1;  // sfix33_En7
  wire signed [32:0] adder14_add_temp;  // sfix33_En7
  wire signed [31:0] b2sum1_7;  // sfix32_En7
  wire signed [31:0] b3mul1_7;  // sfix32_En7
  wire signed [32:0] adder15_add_cast;  // sfix33_En7
  wire signed [32:0] adder15_add_cast_1;  // sfix33_En7
  wire signed [32:0] adder15_add_temp;  // sfix33_En7
  wire signed [31:0] b1sum1_7;  // sfix32_En7
  wire signed [31:0] output_typeconvert_7;  // sfix32_En20


  assign In[0] = In_0;
  assign In[1] = In_1;
  assign In[2] = In_2;
  assign In[3] = In_3;
  assign In[4] = In_4;
  assign In[5] = In_5;
  assign In[6] = In_6;
  assign In[7] = In_7;

  assign Input_Quantizer_out1[0] = ((In[0][31] == 1'b0) && (In[0][30:16] == 15'b111111111111111) ? 16'sb0111111111111111 :
              In[0][31:16] + $signed({1'b0, In[0][15] & (( ~ In[0][31]) | (|In[0][14:0]))}));
  assign Input_Quantizer_out1[1] = ((In[1][31] == 1'b0) && (In[1][30:16] == 15'b111111111111111) ? 16'sb0111111111111111 :
              In[1][31:16] + $signed({1'b0, In[1][15] & (( ~ In[1][31]) | (|In[1][14:0]))}));
  assign Input_Quantizer_out1[2] = ((In[2][31] == 1'b0) && (In[2][30:16] == 15'b111111111111111) ? 16'sb0111111111111111 :
              In[2][31:16] + $signed({1'b0, In[2][15] & (( ~ In[2][31]) | (|In[2][14:0]))}));
  assign Input_Quantizer_out1[3] = ((In[3][31] == 1'b0) && (In[3][30:16] == 15'b111111111111111) ? 16'sb0111111111111111 :
              In[3][31:16] + $signed({1'b0, In[3][15] & (( ~ In[3][31]) | (|In[3][14:0]))}));
  assign Input_Quantizer_out1[4] = ((In[4][31] == 1'b0) && (In[4][30:16] == 15'b111111111111111) ? 16'sb0111111111111111 :
              In[4][31:16] + $signed({1'b0, In[4][15] & (( ~ In[4][31]) | (|In[4][14:0]))}));
  assign Input_Quantizer_out1[5] = ((In[5][31] == 1'b0) && (In[5][30:16] == 15'b111111111111111) ? 16'sb0111111111111111 :
              In[5][31:16] + $signed({1'b0, In[5][15] & (( ~ In[5][31]) | (|In[5][14:0]))}));
  assign Input_Quantizer_out1[6] = ((In[6][31] == 1'b0) && (In[6][30:16] == 15'b111111111111111) ? 16'sb0111111111111111 :
              In[6][31:16] + $signed({1'b0, In[6][15] & (( ~ In[6][31]) | (|In[6][14:0]))}));
  assign Input_Quantizer_out1[7] = ((In[7][31] == 1'b0) && (In[7][30:16] == 15'b111111111111111) ? 16'sb0111111111111111 :
              In[7][31:16] + $signed({1'b0, In[7][15] & (( ~ In[7][31]) | (|In[7][14:0]))}));



  assign filter_in_0 = Input_Quantizer_out1[0];

  assign scaleconst1 = 32'sb00000000000000000111101001110000;



  assign multiplier_mul_temp = filter_in_0 * scaleconst1;
  assign scale1 = {{5{multiplier_mul_temp[47]}}, {multiplier_mul_temp, 11'b00000000000}};



  assign scaletypeconvert1 = (((scale1[63] == 1'b0) && (scale1[62:41] != 22'b0000000000000000000000)) || ((scale1[63] == 1'b0) && (scale1[41:10] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((scale1[63] == 1'b1) && (scale1[62:41] != 22'b1111111111111111111111) ? 32'sb10000000000000000000000000000000 :
              scale1[41:10] + $signed({1'b0, scale1[9]})));



  assign inputconv1 = ({{9{scaletypeconvert1[31]}}, scaletypeconvert1[31:9]}) + $signed({1'b0, scaletypeconvert1[8]});



  assign enb_gated = Enable_out2 && enb;

  assign coeff_a2_section1 = 32'sb10000101101011101111001001111111;



  assign enb_gated_1 = Enable_out2 && enb;

  assign coeff_a3_section1 = 32'sb00111010100011101111011011001110;



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap1_process
      if (reset == 1'b1) begin
        typeconvert1_tap1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_gated_1) begin
          typeconvert1_tap1 <= typeconvert1_tap0;
        end
      end
    end



  assign multiplier2_mul_temp = typeconvert1_tap1 * coeff_a3_section1;
  assign a3mul1 = (((multiplier2_mul_temp[63] == 1'b0) && (multiplier2_mul_temp[62] != 1'b0)) || ((multiplier2_mul_temp[63] == 1'b0) && (multiplier2_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((multiplier2_mul_temp[63] == 1'b1) && (multiplier2_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              multiplier2_mul_temp[62:31] + $signed({1'b0, multiplier2_mul_temp[30]})));



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap0_process
      if (reset == 1'b1) begin
        typeconvert1_tap0 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_gated) begin
          typeconvert1_tap0 <= typeconvert1;
        end
      end
    end



  assign multiplier1_mul_temp = typeconvert1_tap0 * coeff_a2_section1;
  assign a2mul1 = (((multiplier1_mul_temp[63] == 1'b0) && (multiplier1_mul_temp[62] != 1'b0)) || ((multiplier1_mul_temp[63] == 1'b0) && (multiplier1_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((multiplier1_mul_temp[63] == 1'b1) && (multiplier1_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              multiplier1_mul_temp[62:31] + $signed({1'b0, multiplier1_mul_temp[30]})));



  assign Sub_sub_cast = {inputconv1[31], inputconv1};
  assign Sub_sub_cast_1 = {a2mul1[31], a2mul1};
  assign a2sum1_temp = Sub_sub_cast - Sub_sub_cast_1;



  assign a2sum1 = ((a2sum1_temp[32] == 1'b0) && (a2sum1_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a2sum1_temp[32] == 1'b1) && (a2sum1_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(a2sum1_temp[31:0])));



  assign Sub1_sub_cast = {a2sum1[31], a2sum1};
  assign Sub1_sub_cast_1 = {a3mul1[31], a3mul1};
  assign a1sum1_temp = Sub1_sub_cast - Sub1_sub_cast_1;



  assign a1sum1 = ((a1sum1_temp[32] == 1'b0) && (a1sum1_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a1sum1_temp[32] == 1'b1) && (a1sum1_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(a1sum1_temp[31:0])));



  assign typeconvert1 = ((a1sum1[31] == 1'b0) && (a1sum1[30] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a1sum1[31] == 1'b1) && (a1sum1[30] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              {a1sum1[30:0], 1'b0}));



  // coeff_b1_section1
  assign b1mul1 = ({typeconvert1[31], typeconvert1[31:1]}) + $signed({1'b0, typeconvert1[0]});



  // coeff_b2_section1
  // CSD Encoding (2147483648) : 010000000000000000000000000000000; Cost (Adders) = 0
  assign gain1_1 = {typeconvert1_tap0[31], {typeconvert1_tap0, 31'b0000000000000000000000000000000}};
  assign gain1_mul_temp =  - (gain1_1);
  assign b2mul1 = (((gain1_mul_temp[63] == 1'b0) && (gain1_mul_temp[62] != 1'b0)) || ((gain1_mul_temp[63] == 1'b0) && (gain1_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((gain1_mul_temp[63] == 1'b1) && (gain1_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              gain1_mul_temp[62:31] + $signed({1'b0, gain1_mul_temp[30]})));



  assign adder_add_cast = {b1mul1[31], b1mul1};
  assign adder_add_cast_1 = {b2mul1[31], b2mul1};
  assign adder_add_temp = adder_add_cast + adder_add_cast_1;
  assign b2sum1 = ((adder_add_temp[32] == 1'b0) && (adder_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder_add_temp[32] == 1'b1) && (adder_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder_add_temp[31:0])));



  // coeff_b3_section1
  assign b3mul1 = ({typeconvert1_tap1[31], typeconvert1_tap1[31:1]}) + $signed({1'b0, typeconvert1_tap1[0]});



  assign adder1_add_cast = {b2sum1[31], b2sum1};
  assign adder1_add_cast_1 = {b3mul1[31], b3mul1};
  assign adder1_add_temp = adder1_add_cast + adder1_add_cast_1;
  assign b1sum1 = ((adder1_add_temp[32] == 1'b0) && (adder1_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder1_add_temp[32] == 1'b1) && (adder1_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder1_add_temp[31:0])));



  assign output_typeconvert = ((b1sum1[31] == 1'b0) && (b1sum1[30:18] != 13'b0000000000000) ? 32'sb01111111111111111111111111111111 :
              ((b1sum1[31] == 1'b1) && (b1sum1[30:18] != 13'b1111111111111) ? 32'sb10000000000000000000000000000000 :
              {b1sum1[18:0], 13'b0000000000000}));



  assign Out_0 = output_typeconvert;

  assign filter_in_1 = Input_Quantizer_out1[1];

  assign scaleconst1_1 = 32'sb00000000000000000111101001110000;



  assign multiplier3_mul_temp = filter_in_1 * scaleconst1_1;
  assign scale1_1 = {{5{multiplier3_mul_temp[47]}}, {multiplier3_mul_temp, 11'b00000000000}};



  assign scaletypeconvert1_1 = (((scale1_1[63] == 1'b0) && (scale1_1[62:41] != 22'b0000000000000000000000)) || ((scale1_1[63] == 1'b0) && (scale1_1[41:10] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((scale1_1[63] == 1'b1) && (scale1_1[62:41] != 22'b1111111111111111111111) ? 32'sb10000000000000000000000000000000 :
              scale1_1[41:10] + $signed({1'b0, scale1_1[9]})));



  assign inputconv1_1 = ({{9{scaletypeconvert1_1[31]}}, scaletypeconvert1_1[31:9]}) + $signed({1'b0, scaletypeconvert1_1[8]});



  assign enb_gated_2 = Enable_out2 && enb;

  assign coeff_a2_section1_1 = 32'sb10000101101011101111001001111111;



  assign enb_gated_3 = Enable_out2 && enb;

  assign coeff_a3_section1_1 = 32'sb00111010100011101111011011001110;



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap1_1_process
      if (reset == 1'b1) begin
        typeconvert1_tap1_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_gated_3) begin
          typeconvert1_tap1_1 <= typeconvert1_tap0_1;
        end
      end
    end



  assign multiplier5_mul_temp = typeconvert1_tap1_1 * coeff_a3_section1_1;
  assign a3mul1_1 = (((multiplier5_mul_temp[63] == 1'b0) && (multiplier5_mul_temp[62] != 1'b0)) || ((multiplier5_mul_temp[63] == 1'b0) && (multiplier5_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((multiplier5_mul_temp[63] == 1'b1) && (multiplier5_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              multiplier5_mul_temp[62:31] + $signed({1'b0, multiplier5_mul_temp[30]})));



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap0_1_process
      if (reset == 1'b1) begin
        typeconvert1_tap0_1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_gated_2) begin
          typeconvert1_tap0_1 <= typeconvert1_1;
        end
      end
    end



  assign multiplier4_mul_temp = typeconvert1_tap0_1 * coeff_a2_section1_1;
  assign a2mul1_1 = (((multiplier4_mul_temp[63] == 1'b0) && (multiplier4_mul_temp[62] != 1'b0)) || ((multiplier4_mul_temp[63] == 1'b0) && (multiplier4_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((multiplier4_mul_temp[63] == 1'b1) && (multiplier4_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              multiplier4_mul_temp[62:31] + $signed({1'b0, multiplier4_mul_temp[30]})));



  assign Sub2_sub_cast = {inputconv1_1[31], inputconv1_1};
  assign Sub2_sub_cast_1 = {a2mul1_1[31], a2mul1_1};
  assign a2sum1_temp_1 = Sub2_sub_cast - Sub2_sub_cast_1;



  assign a2sum1_1 = ((a2sum1_temp_1[32] == 1'b0) && (a2sum1_temp_1[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a2sum1_temp_1[32] == 1'b1) && (a2sum1_temp_1[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(a2sum1_temp_1[31:0])));



  assign Sub3_sub_cast = {a2sum1_1[31], a2sum1_1};
  assign Sub3_sub_cast_1 = {a3mul1_1[31], a3mul1_1};
  assign a1sum1_temp_1 = Sub3_sub_cast - Sub3_sub_cast_1;



  assign a1sum1_1 = ((a1sum1_temp_1[32] == 1'b0) && (a1sum1_temp_1[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a1sum1_temp_1[32] == 1'b1) && (a1sum1_temp_1[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(a1sum1_temp_1[31:0])));



  assign typeconvert1_1 = ((a1sum1_1[31] == 1'b0) && (a1sum1_1[30] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a1sum1_1[31] == 1'b1) && (a1sum1_1[30] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              {a1sum1_1[30:0], 1'b0}));



  // coeff_b1_section1
  assign b1mul1_1 = ({typeconvert1_1[31], typeconvert1_1[31:1]}) + $signed({1'b0, typeconvert1_1[0]});



  // coeff_b2_section1
  // CSD Encoding (2147483648) : 010000000000000000000000000000000; Cost (Adders) = 0
  assign gain4_1 = {typeconvert1_tap0_1[31], {typeconvert1_tap0_1, 31'b0000000000000000000000000000000}};
  assign gain4_mul_temp =  - (gain4_1);
  assign b2mul1_1 = (((gain4_mul_temp[63] == 1'b0) && (gain4_mul_temp[62] != 1'b0)) || ((gain4_mul_temp[63] == 1'b0) && (gain4_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((gain4_mul_temp[63] == 1'b1) && (gain4_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              gain4_mul_temp[62:31] + $signed({1'b0, gain4_mul_temp[30]})));



  assign adder2_add_cast = {b1mul1_1[31], b1mul1_1};
  assign adder2_add_cast_1 = {b2mul1_1[31], b2mul1_1};
  assign adder2_add_temp = adder2_add_cast + adder2_add_cast_1;
  assign b2sum1_1 = ((adder2_add_temp[32] == 1'b0) && (adder2_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder2_add_temp[32] == 1'b1) && (adder2_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder2_add_temp[31:0])));



  // coeff_b3_section1
  assign b3mul1_1 = ({typeconvert1_tap1_1[31], typeconvert1_tap1_1[31:1]}) + $signed({1'b0, typeconvert1_tap1_1[0]});



  assign adder3_add_cast = {b2sum1_1[31], b2sum1_1};
  assign adder3_add_cast_1 = {b3mul1_1[31], b3mul1_1};
  assign adder3_add_temp = adder3_add_cast + adder3_add_cast_1;
  assign b1sum1_1 = ((adder3_add_temp[32] == 1'b0) && (adder3_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder3_add_temp[32] == 1'b1) && (adder3_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder3_add_temp[31:0])));



  assign output_typeconvert_1 = ((b1sum1_1[31] == 1'b0) && (b1sum1_1[30:18] != 13'b0000000000000) ? 32'sb01111111111111111111111111111111 :
              ((b1sum1_1[31] == 1'b1) && (b1sum1_1[30:18] != 13'b1111111111111) ? 32'sb10000000000000000000000000000000 :
              {b1sum1_1[18:0], 13'b0000000000000}));



  assign Out_1 = output_typeconvert_1;

  assign filter_in_2 = Input_Quantizer_out1[2];

  assign scaleconst1_2 = 32'sb00000000000000000111101001110000;



  assign multiplier6_mul_temp = filter_in_2 * scaleconst1_2;
  assign scale1_2 = {{5{multiplier6_mul_temp[47]}}, {multiplier6_mul_temp, 11'b00000000000}};



  assign scaletypeconvert1_2 = (((scale1_2[63] == 1'b0) && (scale1_2[62:41] != 22'b0000000000000000000000)) || ((scale1_2[63] == 1'b0) && (scale1_2[41:10] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((scale1_2[63] == 1'b1) && (scale1_2[62:41] != 22'b1111111111111111111111) ? 32'sb10000000000000000000000000000000 :
              scale1_2[41:10] + $signed({1'b0, scale1_2[9]})));



  assign inputconv1_2 = ({{9{scaletypeconvert1_2[31]}}, scaletypeconvert1_2[31:9]}) + $signed({1'b0, scaletypeconvert1_2[8]});



  assign enb_gated_4 = Enable_out2 && enb;

  assign coeff_a2_section1_2 = 32'sb10000101101011101111001001111111;



  assign enb_gated_5 = Enable_out2 && enb;

  assign coeff_a3_section1_2 = 32'sb00111010100011101111011011001110;



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap1_2_process
      if (reset == 1'b1) begin
        typeconvert1_tap1_2 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_gated_5) begin
          typeconvert1_tap1_2 <= typeconvert1_tap0_2;
        end
      end
    end



  assign multiplier8_mul_temp = typeconvert1_tap1_2 * coeff_a3_section1_2;
  assign a3mul1_2 = (((multiplier8_mul_temp[63] == 1'b0) && (multiplier8_mul_temp[62] != 1'b0)) || ((multiplier8_mul_temp[63] == 1'b0) && (multiplier8_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((multiplier8_mul_temp[63] == 1'b1) && (multiplier8_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              multiplier8_mul_temp[62:31] + $signed({1'b0, multiplier8_mul_temp[30]})));



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap0_2_process
      if (reset == 1'b1) begin
        typeconvert1_tap0_2 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_gated_4) begin
          typeconvert1_tap0_2 <= typeconvert1_2;
        end
      end
    end



  assign multiplier7_mul_temp = typeconvert1_tap0_2 * coeff_a2_section1_2;
  assign a2mul1_2 = (((multiplier7_mul_temp[63] == 1'b0) && (multiplier7_mul_temp[62] != 1'b0)) || ((multiplier7_mul_temp[63] == 1'b0) && (multiplier7_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((multiplier7_mul_temp[63] == 1'b1) && (multiplier7_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              multiplier7_mul_temp[62:31] + $signed({1'b0, multiplier7_mul_temp[30]})));



  assign Sub4_sub_cast = {inputconv1_2[31], inputconv1_2};
  assign Sub4_sub_cast_1 = {a2mul1_2[31], a2mul1_2};
  assign a2sum1_temp_2 = Sub4_sub_cast - Sub4_sub_cast_1;



  assign a2sum1_2 = ((a2sum1_temp_2[32] == 1'b0) && (a2sum1_temp_2[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a2sum1_temp_2[32] == 1'b1) && (a2sum1_temp_2[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(a2sum1_temp_2[31:0])));



  assign Sub5_sub_cast = {a2sum1_2[31], a2sum1_2};
  assign Sub5_sub_cast_1 = {a3mul1_2[31], a3mul1_2};
  assign a1sum1_temp_2 = Sub5_sub_cast - Sub5_sub_cast_1;



  assign a1sum1_2 = ((a1sum1_temp_2[32] == 1'b0) && (a1sum1_temp_2[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a1sum1_temp_2[32] == 1'b1) && (a1sum1_temp_2[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(a1sum1_temp_2[31:0])));



  assign typeconvert1_2 = ((a1sum1_2[31] == 1'b0) && (a1sum1_2[30] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a1sum1_2[31] == 1'b1) && (a1sum1_2[30] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              {a1sum1_2[30:0], 1'b0}));



  // coeff_b1_section1
  assign b1mul1_2 = ({typeconvert1_2[31], typeconvert1_2[31:1]}) + $signed({1'b0, typeconvert1_2[0]});



  // coeff_b2_section1
  // CSD Encoding (2147483648) : 010000000000000000000000000000000; Cost (Adders) = 0
  assign gain7_1 = {typeconvert1_tap0_2[31], {typeconvert1_tap0_2, 31'b0000000000000000000000000000000}};
  assign gain7_mul_temp =  - (gain7_1);
  assign b2mul1_2 = (((gain7_mul_temp[63] == 1'b0) && (gain7_mul_temp[62] != 1'b0)) || ((gain7_mul_temp[63] == 1'b0) && (gain7_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((gain7_mul_temp[63] == 1'b1) && (gain7_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              gain7_mul_temp[62:31] + $signed({1'b0, gain7_mul_temp[30]})));



  assign adder4_add_cast = {b1mul1_2[31], b1mul1_2};
  assign adder4_add_cast_1 = {b2mul1_2[31], b2mul1_2};
  assign adder4_add_temp = adder4_add_cast + adder4_add_cast_1;
  assign b2sum1_2 = ((adder4_add_temp[32] == 1'b0) && (adder4_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder4_add_temp[32] == 1'b1) && (adder4_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder4_add_temp[31:0])));



  // coeff_b3_section1
  assign b3mul1_2 = ({typeconvert1_tap1_2[31], typeconvert1_tap1_2[31:1]}) + $signed({1'b0, typeconvert1_tap1_2[0]});



  assign adder5_add_cast = {b2sum1_2[31], b2sum1_2};
  assign adder5_add_cast_1 = {b3mul1_2[31], b3mul1_2};
  assign adder5_add_temp = adder5_add_cast + adder5_add_cast_1;
  assign b1sum1_2 = ((adder5_add_temp[32] == 1'b0) && (adder5_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder5_add_temp[32] == 1'b1) && (adder5_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder5_add_temp[31:0])));



  assign output_typeconvert_2 = ((b1sum1_2[31] == 1'b0) && (b1sum1_2[30:18] != 13'b0000000000000) ? 32'sb01111111111111111111111111111111 :
              ((b1sum1_2[31] == 1'b1) && (b1sum1_2[30:18] != 13'b1111111111111) ? 32'sb10000000000000000000000000000000 :
              {b1sum1_2[18:0], 13'b0000000000000}));



  assign Out_2 = output_typeconvert_2;

  assign filter_in_3 = Input_Quantizer_out1[3];

  assign scaleconst1_3 = 32'sb00000000000000000111101001110000;



  assign multiplier9_mul_temp = filter_in_3 * scaleconst1_3;
  assign scale1_3 = {{5{multiplier9_mul_temp[47]}}, {multiplier9_mul_temp, 11'b00000000000}};



  assign scaletypeconvert1_3 = (((scale1_3[63] == 1'b0) && (scale1_3[62:41] != 22'b0000000000000000000000)) || ((scale1_3[63] == 1'b0) && (scale1_3[41:10] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((scale1_3[63] == 1'b1) && (scale1_3[62:41] != 22'b1111111111111111111111) ? 32'sb10000000000000000000000000000000 :
              scale1_3[41:10] + $signed({1'b0, scale1_3[9]})));



  assign inputconv1_3 = ({{9{scaletypeconvert1_3[31]}}, scaletypeconvert1_3[31:9]}) + $signed({1'b0, scaletypeconvert1_3[8]});



  assign enb_gated_6 = Enable_out2 && enb;

  assign coeff_a2_section1_3 = 32'sb10000101101011101111001001111111;



  assign enb_gated_7 = Enable_out2 && enb;

  assign coeff_a3_section1_3 = 32'sb00111010100011101111011011001110;



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap1_3_process
      if (reset == 1'b1) begin
        typeconvert1_tap1_3 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_gated_7) begin
          typeconvert1_tap1_3 <= typeconvert1_tap0_3;
        end
      end
    end



  assign multiplier11_mul_temp = typeconvert1_tap1_3 * coeff_a3_section1_3;
  assign a3mul1_3 = (((multiplier11_mul_temp[63] == 1'b0) && (multiplier11_mul_temp[62] != 1'b0)) || ((multiplier11_mul_temp[63] == 1'b0) && (multiplier11_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((multiplier11_mul_temp[63] == 1'b1) && (multiplier11_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              multiplier11_mul_temp[62:31] + $signed({1'b0, multiplier11_mul_temp[30]})));



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap0_3_process
      if (reset == 1'b1) begin
        typeconvert1_tap0_3 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_gated_6) begin
          typeconvert1_tap0_3 <= typeconvert1_3;
        end
      end
    end



  assign multiplier10_mul_temp = typeconvert1_tap0_3 * coeff_a2_section1_3;
  assign a2mul1_3 = (((multiplier10_mul_temp[63] == 1'b0) && (multiplier10_mul_temp[62] != 1'b0)) || ((multiplier10_mul_temp[63] == 1'b0) && (multiplier10_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((multiplier10_mul_temp[63] == 1'b1) && (multiplier10_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              multiplier10_mul_temp[62:31] + $signed({1'b0, multiplier10_mul_temp[30]})));



  assign Sub6_sub_cast = {inputconv1_3[31], inputconv1_3};
  assign Sub6_sub_cast_1 = {a2mul1_3[31], a2mul1_3};
  assign a2sum1_temp_3 = Sub6_sub_cast - Sub6_sub_cast_1;



  assign a2sum1_3 = ((a2sum1_temp_3[32] == 1'b0) && (a2sum1_temp_3[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a2sum1_temp_3[32] == 1'b1) && (a2sum1_temp_3[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(a2sum1_temp_3[31:0])));



  assign Sub7_sub_cast = {a2sum1_3[31], a2sum1_3};
  assign Sub7_sub_cast_1 = {a3mul1_3[31], a3mul1_3};
  assign a1sum1_temp_3 = Sub7_sub_cast - Sub7_sub_cast_1;



  assign a1sum1_3 = ((a1sum1_temp_3[32] == 1'b0) && (a1sum1_temp_3[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a1sum1_temp_3[32] == 1'b1) && (a1sum1_temp_3[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(a1sum1_temp_3[31:0])));



  assign typeconvert1_3 = ((a1sum1_3[31] == 1'b0) && (a1sum1_3[30] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a1sum1_3[31] == 1'b1) && (a1sum1_3[30] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              {a1sum1_3[30:0], 1'b0}));



  // coeff_b1_section1
  assign b1mul1_3 = ({typeconvert1_3[31], typeconvert1_3[31:1]}) + $signed({1'b0, typeconvert1_3[0]});



  // coeff_b2_section1
  // CSD Encoding (2147483648) : 010000000000000000000000000000000; Cost (Adders) = 0
  assign gain10_1 = {typeconvert1_tap0_3[31], {typeconvert1_tap0_3, 31'b0000000000000000000000000000000}};
  assign gain10_mul_temp =  - (gain10_1);
  assign b2mul1_3 = (((gain10_mul_temp[63] == 1'b0) && (gain10_mul_temp[62] != 1'b0)) || ((gain10_mul_temp[63] == 1'b0) && (gain10_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((gain10_mul_temp[63] == 1'b1) && (gain10_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              gain10_mul_temp[62:31] + $signed({1'b0, gain10_mul_temp[30]})));



  assign adder6_add_cast = {b1mul1_3[31], b1mul1_3};
  assign adder6_add_cast_1 = {b2mul1_3[31], b2mul1_3};
  assign adder6_add_temp = adder6_add_cast + adder6_add_cast_1;
  assign b2sum1_3 = ((adder6_add_temp[32] == 1'b0) && (adder6_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder6_add_temp[32] == 1'b1) && (adder6_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder6_add_temp[31:0])));



  // coeff_b3_section1
  assign b3mul1_3 = ({typeconvert1_tap1_3[31], typeconvert1_tap1_3[31:1]}) + $signed({1'b0, typeconvert1_tap1_3[0]});



  assign adder7_add_cast = {b2sum1_3[31], b2sum1_3};
  assign adder7_add_cast_1 = {b3mul1_3[31], b3mul1_3};
  assign adder7_add_temp = adder7_add_cast + adder7_add_cast_1;
  assign b1sum1_3 = ((adder7_add_temp[32] == 1'b0) && (adder7_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder7_add_temp[32] == 1'b1) && (adder7_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder7_add_temp[31:0])));



  assign output_typeconvert_3 = ((b1sum1_3[31] == 1'b0) && (b1sum1_3[30:18] != 13'b0000000000000) ? 32'sb01111111111111111111111111111111 :
              ((b1sum1_3[31] == 1'b1) && (b1sum1_3[30:18] != 13'b1111111111111) ? 32'sb10000000000000000000000000000000 :
              {b1sum1_3[18:0], 13'b0000000000000}));



  assign Out_3 = output_typeconvert_3;

  assign filter_in_4 = Input_Quantizer_out1[4];

  assign scaleconst1_4 = 32'sb00000000000000000111101001110000;



  assign multiplier12_mul_temp = filter_in_4 * scaleconst1_4;
  assign scale1_4 = {{5{multiplier12_mul_temp[47]}}, {multiplier12_mul_temp, 11'b00000000000}};



  assign scaletypeconvert1_4 = (((scale1_4[63] == 1'b0) && (scale1_4[62:41] != 22'b0000000000000000000000)) || ((scale1_4[63] == 1'b0) && (scale1_4[41:10] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((scale1_4[63] == 1'b1) && (scale1_4[62:41] != 22'b1111111111111111111111) ? 32'sb10000000000000000000000000000000 :
              scale1_4[41:10] + $signed({1'b0, scale1_4[9]})));



  assign inputconv1_4 = ({{9{scaletypeconvert1_4[31]}}, scaletypeconvert1_4[31:9]}) + $signed({1'b0, scaletypeconvert1_4[8]});



  assign enb_gated_8 = Enable_out2 && enb;

  assign coeff_a2_section1_4 = 32'sb10000101101011101111001001111111;



  assign enb_gated_9 = Enable_out2 && enb;

  assign coeff_a3_section1_4 = 32'sb00111010100011101111011011001110;



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap1_4_process
      if (reset == 1'b1) begin
        typeconvert1_tap1_4 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_gated_9) begin
          typeconvert1_tap1_4 <= typeconvert1_tap0_4;
        end
      end
    end



  assign multiplier14_mul_temp = typeconvert1_tap1_4 * coeff_a3_section1_4;
  assign a3mul1_4 = (((multiplier14_mul_temp[63] == 1'b0) && (multiplier14_mul_temp[62] != 1'b0)) || ((multiplier14_mul_temp[63] == 1'b0) && (multiplier14_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((multiplier14_mul_temp[63] == 1'b1) && (multiplier14_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              multiplier14_mul_temp[62:31] + $signed({1'b0, multiplier14_mul_temp[30]})));



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap0_4_process
      if (reset == 1'b1) begin
        typeconvert1_tap0_4 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_gated_8) begin
          typeconvert1_tap0_4 <= typeconvert1_4;
        end
      end
    end



  assign multiplier13_mul_temp = typeconvert1_tap0_4 * coeff_a2_section1_4;
  assign a2mul1_4 = (((multiplier13_mul_temp[63] == 1'b0) && (multiplier13_mul_temp[62] != 1'b0)) || ((multiplier13_mul_temp[63] == 1'b0) && (multiplier13_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((multiplier13_mul_temp[63] == 1'b1) && (multiplier13_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              multiplier13_mul_temp[62:31] + $signed({1'b0, multiplier13_mul_temp[30]})));



  assign Sub8_sub_cast = {inputconv1_4[31], inputconv1_4};
  assign Sub8_sub_cast_1 = {a2mul1_4[31], a2mul1_4};
  assign a2sum1_temp_4 = Sub8_sub_cast - Sub8_sub_cast_1;



  assign a2sum1_4 = ((a2sum1_temp_4[32] == 1'b0) && (a2sum1_temp_4[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a2sum1_temp_4[32] == 1'b1) && (a2sum1_temp_4[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(a2sum1_temp_4[31:0])));



  assign Sub9_sub_cast = {a2sum1_4[31], a2sum1_4};
  assign Sub9_sub_cast_1 = {a3mul1_4[31], a3mul1_4};
  assign a1sum1_temp_4 = Sub9_sub_cast - Sub9_sub_cast_1;



  assign a1sum1_4 = ((a1sum1_temp_4[32] == 1'b0) && (a1sum1_temp_4[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a1sum1_temp_4[32] == 1'b1) && (a1sum1_temp_4[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(a1sum1_temp_4[31:0])));



  assign typeconvert1_4 = ((a1sum1_4[31] == 1'b0) && (a1sum1_4[30] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a1sum1_4[31] == 1'b1) && (a1sum1_4[30] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              {a1sum1_4[30:0], 1'b0}));



  // coeff_b1_section1
  assign b1mul1_4 = ({typeconvert1_4[31], typeconvert1_4[31:1]}) + $signed({1'b0, typeconvert1_4[0]});



  // coeff_b2_section1
  // CSD Encoding (2147483648) : 010000000000000000000000000000000; Cost (Adders) = 0
  assign gain13_1 = {typeconvert1_tap0_4[31], {typeconvert1_tap0_4, 31'b0000000000000000000000000000000}};
  assign gain13_mul_temp =  - (gain13_1);
  assign b2mul1_4 = (((gain13_mul_temp[63] == 1'b0) && (gain13_mul_temp[62] != 1'b0)) || ((gain13_mul_temp[63] == 1'b0) && (gain13_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((gain13_mul_temp[63] == 1'b1) && (gain13_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              gain13_mul_temp[62:31] + $signed({1'b0, gain13_mul_temp[30]})));



  assign adder8_add_cast = {b1mul1_4[31], b1mul1_4};
  assign adder8_add_cast_1 = {b2mul1_4[31], b2mul1_4};
  assign adder8_add_temp = adder8_add_cast + adder8_add_cast_1;
  assign b2sum1_4 = ((adder8_add_temp[32] == 1'b0) && (adder8_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder8_add_temp[32] == 1'b1) && (adder8_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder8_add_temp[31:0])));



  // coeff_b3_section1
  assign b3mul1_4 = ({typeconvert1_tap1_4[31], typeconvert1_tap1_4[31:1]}) + $signed({1'b0, typeconvert1_tap1_4[0]});



  assign adder9_add_cast = {b2sum1_4[31], b2sum1_4};
  assign adder9_add_cast_1 = {b3mul1_4[31], b3mul1_4};
  assign adder9_add_temp = adder9_add_cast + adder9_add_cast_1;
  assign b1sum1_4 = ((adder9_add_temp[32] == 1'b0) && (adder9_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder9_add_temp[32] == 1'b1) && (adder9_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder9_add_temp[31:0])));



  assign output_typeconvert_4 = ((b1sum1_4[31] == 1'b0) && (b1sum1_4[30:18] != 13'b0000000000000) ? 32'sb01111111111111111111111111111111 :
              ((b1sum1_4[31] == 1'b1) && (b1sum1_4[30:18] != 13'b1111111111111) ? 32'sb10000000000000000000000000000000 :
              {b1sum1_4[18:0], 13'b0000000000000}));



  assign Out_4 = output_typeconvert_4;

  assign filter_in_5 = Input_Quantizer_out1[5];

  assign scaleconst1_5 = 32'sb00000000000000000111101001110000;



  assign multiplier15_mul_temp = filter_in_5 * scaleconst1_5;
  assign scale1_5 = {{5{multiplier15_mul_temp[47]}}, {multiplier15_mul_temp, 11'b00000000000}};



  assign scaletypeconvert1_5 = (((scale1_5[63] == 1'b0) && (scale1_5[62:41] != 22'b0000000000000000000000)) || ((scale1_5[63] == 1'b0) && (scale1_5[41:10] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((scale1_5[63] == 1'b1) && (scale1_5[62:41] != 22'b1111111111111111111111) ? 32'sb10000000000000000000000000000000 :
              scale1_5[41:10] + $signed({1'b0, scale1_5[9]})));



  assign inputconv1_5 = ({{9{scaletypeconvert1_5[31]}}, scaletypeconvert1_5[31:9]}) + $signed({1'b0, scaletypeconvert1_5[8]});



  assign enb_gated_10 = Enable_out2 && enb;

  assign coeff_a2_section1_5 = 32'sb10000101101011101111001001111111;



  assign enb_gated_11 = Enable_out2 && enb;

  assign coeff_a3_section1_5 = 32'sb00111010100011101111011011001110;



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap1_5_process
      if (reset == 1'b1) begin
        typeconvert1_tap1_5 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_gated_11) begin
          typeconvert1_tap1_5 <= typeconvert1_tap0_5;
        end
      end
    end



  assign multiplier17_mul_temp = typeconvert1_tap1_5 * coeff_a3_section1_5;
  assign a3mul1_5 = (((multiplier17_mul_temp[63] == 1'b0) && (multiplier17_mul_temp[62] != 1'b0)) || ((multiplier17_mul_temp[63] == 1'b0) && (multiplier17_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((multiplier17_mul_temp[63] == 1'b1) && (multiplier17_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              multiplier17_mul_temp[62:31] + $signed({1'b0, multiplier17_mul_temp[30]})));



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap0_5_process
      if (reset == 1'b1) begin
        typeconvert1_tap0_5 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_gated_10) begin
          typeconvert1_tap0_5 <= typeconvert1_5;
        end
      end
    end



  assign multiplier16_mul_temp = typeconvert1_tap0_5 * coeff_a2_section1_5;
  assign a2mul1_5 = (((multiplier16_mul_temp[63] == 1'b0) && (multiplier16_mul_temp[62] != 1'b0)) || ((multiplier16_mul_temp[63] == 1'b0) && (multiplier16_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((multiplier16_mul_temp[63] == 1'b1) && (multiplier16_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              multiplier16_mul_temp[62:31] + $signed({1'b0, multiplier16_mul_temp[30]})));



  assign Sub10_sub_cast = {inputconv1_5[31], inputconv1_5};
  assign Sub10_sub_cast_1 = {a2mul1_5[31], a2mul1_5};
  assign a2sum1_temp_5 = Sub10_sub_cast - Sub10_sub_cast_1;



  assign a2sum1_5 = ((a2sum1_temp_5[32] == 1'b0) && (a2sum1_temp_5[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a2sum1_temp_5[32] == 1'b1) && (a2sum1_temp_5[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(a2sum1_temp_5[31:0])));



  assign Sub11_sub_cast = {a2sum1_5[31], a2sum1_5};
  assign Sub11_sub_cast_1 = {a3mul1_5[31], a3mul1_5};
  assign a1sum1_temp_5 = Sub11_sub_cast - Sub11_sub_cast_1;



  assign a1sum1_5 = ((a1sum1_temp_5[32] == 1'b0) && (a1sum1_temp_5[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a1sum1_temp_5[32] == 1'b1) && (a1sum1_temp_5[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(a1sum1_temp_5[31:0])));



  assign typeconvert1_5 = ((a1sum1_5[31] == 1'b0) && (a1sum1_5[30] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a1sum1_5[31] == 1'b1) && (a1sum1_5[30] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              {a1sum1_5[30:0], 1'b0}));



  // coeff_b1_section1
  assign b1mul1_5 = ({typeconvert1_5[31], typeconvert1_5[31:1]}) + $signed({1'b0, typeconvert1_5[0]});



  // coeff_b2_section1
  // CSD Encoding (2147483648) : 010000000000000000000000000000000; Cost (Adders) = 0
  assign gain16_1 = {typeconvert1_tap0_5[31], {typeconvert1_tap0_5, 31'b0000000000000000000000000000000}};
  assign gain16_mul_temp =  - (gain16_1);
  assign b2mul1_5 = (((gain16_mul_temp[63] == 1'b0) && (gain16_mul_temp[62] != 1'b0)) || ((gain16_mul_temp[63] == 1'b0) && (gain16_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((gain16_mul_temp[63] == 1'b1) && (gain16_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              gain16_mul_temp[62:31] + $signed({1'b0, gain16_mul_temp[30]})));



  assign adder10_add_cast = {b1mul1_5[31], b1mul1_5};
  assign adder10_add_cast_1 = {b2mul1_5[31], b2mul1_5};
  assign adder10_add_temp = adder10_add_cast + adder10_add_cast_1;
  assign b2sum1_5 = ((adder10_add_temp[32] == 1'b0) && (adder10_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder10_add_temp[32] == 1'b1) && (adder10_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder10_add_temp[31:0])));



  // coeff_b3_section1
  assign b3mul1_5 = ({typeconvert1_tap1_5[31], typeconvert1_tap1_5[31:1]}) + $signed({1'b0, typeconvert1_tap1_5[0]});



  assign adder11_add_cast = {b2sum1_5[31], b2sum1_5};
  assign adder11_add_cast_1 = {b3mul1_5[31], b3mul1_5};
  assign adder11_add_temp = adder11_add_cast + adder11_add_cast_1;
  assign b1sum1_5 = ((adder11_add_temp[32] == 1'b0) && (adder11_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder11_add_temp[32] == 1'b1) && (adder11_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder11_add_temp[31:0])));



  assign output_typeconvert_5 = ((b1sum1_5[31] == 1'b0) && (b1sum1_5[30:18] != 13'b0000000000000) ? 32'sb01111111111111111111111111111111 :
              ((b1sum1_5[31] == 1'b1) && (b1sum1_5[30:18] != 13'b1111111111111) ? 32'sb10000000000000000000000000000000 :
              {b1sum1_5[18:0], 13'b0000000000000}));



  assign Out_5 = output_typeconvert_5;

  assign filter_in_6 = Input_Quantizer_out1[6];

  assign scaleconst1_6 = 32'sb00000000000000000111101001110000;



  assign multiplier18_mul_temp = filter_in_6 * scaleconst1_6;
  assign scale1_6 = {{5{multiplier18_mul_temp[47]}}, {multiplier18_mul_temp, 11'b00000000000}};



  assign scaletypeconvert1_6 = (((scale1_6[63] == 1'b0) && (scale1_6[62:41] != 22'b0000000000000000000000)) || ((scale1_6[63] == 1'b0) && (scale1_6[41:10] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((scale1_6[63] == 1'b1) && (scale1_6[62:41] != 22'b1111111111111111111111) ? 32'sb10000000000000000000000000000000 :
              scale1_6[41:10] + $signed({1'b0, scale1_6[9]})));



  assign inputconv1_6 = ({{9{scaletypeconvert1_6[31]}}, scaletypeconvert1_6[31:9]}) + $signed({1'b0, scaletypeconvert1_6[8]});



  assign enb_gated_12 = Enable_out2 && enb;

  assign coeff_a2_section1_6 = 32'sb10000101101011101111001001111111;



  assign enb_gated_13 = Enable_out2 && enb;

  assign coeff_a3_section1_6 = 32'sb00111010100011101111011011001110;



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap1_6_process
      if (reset == 1'b1) begin
        typeconvert1_tap1_6 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_gated_13) begin
          typeconvert1_tap1_6 <= typeconvert1_tap0_6;
        end
      end
    end



  assign multiplier20_mul_temp = typeconvert1_tap1_6 * coeff_a3_section1_6;
  assign a3mul1_6 = (((multiplier20_mul_temp[63] == 1'b0) && (multiplier20_mul_temp[62] != 1'b0)) || ((multiplier20_mul_temp[63] == 1'b0) && (multiplier20_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((multiplier20_mul_temp[63] == 1'b1) && (multiplier20_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              multiplier20_mul_temp[62:31] + $signed({1'b0, multiplier20_mul_temp[30]})));



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap0_6_process
      if (reset == 1'b1) begin
        typeconvert1_tap0_6 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_gated_12) begin
          typeconvert1_tap0_6 <= typeconvert1_6;
        end
      end
    end



  assign multiplier19_mul_temp = typeconvert1_tap0_6 * coeff_a2_section1_6;
  assign a2mul1_6 = (((multiplier19_mul_temp[63] == 1'b0) && (multiplier19_mul_temp[62] != 1'b0)) || ((multiplier19_mul_temp[63] == 1'b0) && (multiplier19_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((multiplier19_mul_temp[63] == 1'b1) && (multiplier19_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              multiplier19_mul_temp[62:31] + $signed({1'b0, multiplier19_mul_temp[30]})));



  assign Sub12_sub_cast = {inputconv1_6[31], inputconv1_6};
  assign Sub12_sub_cast_1 = {a2mul1_6[31], a2mul1_6};
  assign a2sum1_temp_6 = Sub12_sub_cast - Sub12_sub_cast_1;



  assign a2sum1_6 = ((a2sum1_temp_6[32] == 1'b0) && (a2sum1_temp_6[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a2sum1_temp_6[32] == 1'b1) && (a2sum1_temp_6[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(a2sum1_temp_6[31:0])));



  assign Sub13_sub_cast = {a2sum1_6[31], a2sum1_6};
  assign Sub13_sub_cast_1 = {a3mul1_6[31], a3mul1_6};
  assign a1sum1_temp_6 = Sub13_sub_cast - Sub13_sub_cast_1;



  assign a1sum1_6 = ((a1sum1_temp_6[32] == 1'b0) && (a1sum1_temp_6[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a1sum1_temp_6[32] == 1'b1) && (a1sum1_temp_6[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(a1sum1_temp_6[31:0])));



  assign typeconvert1_6 = ((a1sum1_6[31] == 1'b0) && (a1sum1_6[30] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a1sum1_6[31] == 1'b1) && (a1sum1_6[30] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              {a1sum1_6[30:0], 1'b0}));



  // coeff_b1_section1
  assign b1mul1_6 = ({typeconvert1_6[31], typeconvert1_6[31:1]}) + $signed({1'b0, typeconvert1_6[0]});



  // coeff_b2_section1
  // CSD Encoding (2147483648) : 010000000000000000000000000000000; Cost (Adders) = 0
  assign gain19_1 = {typeconvert1_tap0_6[31], {typeconvert1_tap0_6, 31'b0000000000000000000000000000000}};
  assign gain19_mul_temp =  - (gain19_1);
  assign b2mul1_6 = (((gain19_mul_temp[63] == 1'b0) && (gain19_mul_temp[62] != 1'b0)) || ((gain19_mul_temp[63] == 1'b0) && (gain19_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((gain19_mul_temp[63] == 1'b1) && (gain19_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              gain19_mul_temp[62:31] + $signed({1'b0, gain19_mul_temp[30]})));



  assign adder12_add_cast = {b1mul1_6[31], b1mul1_6};
  assign adder12_add_cast_1 = {b2mul1_6[31], b2mul1_6};
  assign adder12_add_temp = adder12_add_cast + adder12_add_cast_1;
  assign b2sum1_6 = ((adder12_add_temp[32] == 1'b0) && (adder12_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder12_add_temp[32] == 1'b1) && (adder12_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder12_add_temp[31:0])));



  // coeff_b3_section1
  assign b3mul1_6 = ({typeconvert1_tap1_6[31], typeconvert1_tap1_6[31:1]}) + $signed({1'b0, typeconvert1_tap1_6[0]});



  assign adder13_add_cast = {b2sum1_6[31], b2sum1_6};
  assign adder13_add_cast_1 = {b3mul1_6[31], b3mul1_6};
  assign adder13_add_temp = adder13_add_cast + adder13_add_cast_1;
  assign b1sum1_6 = ((adder13_add_temp[32] == 1'b0) && (adder13_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder13_add_temp[32] == 1'b1) && (adder13_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder13_add_temp[31:0])));



  assign output_typeconvert_6 = ((b1sum1_6[31] == 1'b0) && (b1sum1_6[30:18] != 13'b0000000000000) ? 32'sb01111111111111111111111111111111 :
              ((b1sum1_6[31] == 1'b1) && (b1sum1_6[30:18] != 13'b1111111111111) ? 32'sb10000000000000000000000000000000 :
              {b1sum1_6[18:0], 13'b0000000000000}));



  assign Out_6 = output_typeconvert_6;

  assign filter_in_7 = Input_Quantizer_out1[7];

  assign scaleconst1_7 = 32'sb00000000000000000111101001110000;



  assign multiplier21_mul_temp = filter_in_7 * scaleconst1_7;
  assign scale1_7 = {{5{multiplier21_mul_temp[47]}}, {multiplier21_mul_temp, 11'b00000000000}};



  assign scaletypeconvert1_7 = (((scale1_7[63] == 1'b0) && (scale1_7[62:41] != 22'b0000000000000000000000)) || ((scale1_7[63] == 1'b0) && (scale1_7[41:10] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((scale1_7[63] == 1'b1) && (scale1_7[62:41] != 22'b1111111111111111111111) ? 32'sb10000000000000000000000000000000 :
              scale1_7[41:10] + $signed({1'b0, scale1_7[9]})));



  assign inputconv1_7 = ({{9{scaletypeconvert1_7[31]}}, scaletypeconvert1_7[31:9]}) + $signed({1'b0, scaletypeconvert1_7[8]});



  assign enb_gated_14 = Enable_out2 && enb;

  assign coeff_a2_section1_7 = 32'sb10000101101011101111001001111111;



  assign enb_gated_15 = Enable_out2 && enb;

  assign coeff_a3_section1_7 = 32'sb00111010100011101111011011001110;



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap1_7_process
      if (reset == 1'b1) begin
        typeconvert1_tap1_7 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_gated_15) begin
          typeconvert1_tap1_7 <= typeconvert1_tap0_7;
        end
      end
    end



  assign multiplier23_mul_temp = typeconvert1_tap1_7 * coeff_a3_section1_7;
  assign a3mul1_7 = (((multiplier23_mul_temp[63] == 1'b0) && (multiplier23_mul_temp[62] != 1'b0)) || ((multiplier23_mul_temp[63] == 1'b0) && (multiplier23_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((multiplier23_mul_temp[63] == 1'b1) && (multiplier23_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              multiplier23_mul_temp[62:31] + $signed({1'b0, multiplier23_mul_temp[30]})));



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap0_7_process
      if (reset == 1'b1) begin
        typeconvert1_tap0_7 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_gated_14) begin
          typeconvert1_tap0_7 <= typeconvert1_7;
        end
      end
    end



  assign multiplier22_mul_temp = typeconvert1_tap0_7 * coeff_a2_section1_7;
  assign a2mul1_7 = (((multiplier22_mul_temp[63] == 1'b0) && (multiplier22_mul_temp[62] != 1'b0)) || ((multiplier22_mul_temp[63] == 1'b0) && (multiplier22_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((multiplier22_mul_temp[63] == 1'b1) && (multiplier22_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              multiplier22_mul_temp[62:31] + $signed({1'b0, multiplier22_mul_temp[30]})));



  assign Sub14_sub_cast = {inputconv1_7[31], inputconv1_7};
  assign Sub14_sub_cast_1 = {a2mul1_7[31], a2mul1_7};
  assign a2sum1_temp_7 = Sub14_sub_cast - Sub14_sub_cast_1;



  assign a2sum1_7 = ((a2sum1_temp_7[32] == 1'b0) && (a2sum1_temp_7[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a2sum1_temp_7[32] == 1'b1) && (a2sum1_temp_7[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(a2sum1_temp_7[31:0])));



  assign Sub15_sub_cast = {a2sum1_7[31], a2sum1_7};
  assign Sub15_sub_cast_1 = {a3mul1_7[31], a3mul1_7};
  assign a1sum1_temp_7 = Sub15_sub_cast - Sub15_sub_cast_1;



  assign a1sum1_7 = ((a1sum1_temp_7[32] == 1'b0) && (a1sum1_temp_7[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a1sum1_temp_7[32] == 1'b1) && (a1sum1_temp_7[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(a1sum1_temp_7[31:0])));



  assign typeconvert1_7 = ((a1sum1_7[31] == 1'b0) && (a1sum1_7[30] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((a1sum1_7[31] == 1'b1) && (a1sum1_7[30] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              {a1sum1_7[30:0], 1'b0}));



  // coeff_b1_section1
  assign b1mul1_7 = ({typeconvert1_7[31], typeconvert1_7[31:1]}) + $signed({1'b0, typeconvert1_7[0]});



  // coeff_b2_section1
  // CSD Encoding (2147483648) : 010000000000000000000000000000000; Cost (Adders) = 0
  assign gain22_1 = {typeconvert1_tap0_7[31], {typeconvert1_tap0_7, 31'b0000000000000000000000000000000}};
  assign gain22_mul_temp =  - (gain22_1);
  assign b2mul1_7 = (((gain22_mul_temp[63] == 1'b0) && (gain22_mul_temp[62] != 1'b0)) || ((gain22_mul_temp[63] == 1'b0) && (gain22_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((gain22_mul_temp[63] == 1'b1) && (gain22_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              gain22_mul_temp[62:31] + $signed({1'b0, gain22_mul_temp[30]})));



  assign adder14_add_cast = {b1mul1_7[31], b1mul1_7};
  assign adder14_add_cast_1 = {b2mul1_7[31], b2mul1_7};
  assign adder14_add_temp = adder14_add_cast + adder14_add_cast_1;
  assign b2sum1_7 = ((adder14_add_temp[32] == 1'b0) && (adder14_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder14_add_temp[32] == 1'b1) && (adder14_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder14_add_temp[31:0])));



  // coeff_b3_section1
  assign b3mul1_7 = ({typeconvert1_tap1_7[31], typeconvert1_tap1_7[31:1]}) + $signed({1'b0, typeconvert1_tap1_7[0]});



  assign adder15_add_cast = {b2sum1_7[31], b2sum1_7};
  assign adder15_add_cast_1 = {b3mul1_7[31], b3mul1_7};
  assign adder15_add_temp = adder15_add_cast + adder15_add_cast_1;
  assign b1sum1_7 = ((adder15_add_temp[32] == 1'b0) && (adder15_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder15_add_temp[32] == 1'b1) && (adder15_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder15_add_temp[31:0])));



  assign output_typeconvert_7 = ((b1sum1_7[31] == 1'b0) && (b1sum1_7[30:18] != 13'b0000000000000) ? 32'sb01111111111111111111111111111111 :
              ((b1sum1_7[31] == 1'b1) && (b1sum1_7[30:18] != 13'b1111111111111) ? 32'sb10000000000000000000000000000000 :
              {b1sum1_7[18:0], 13'b0000000000000}));



  assign Out_7 = output_typeconvert_7;

endmodule  // highpass

