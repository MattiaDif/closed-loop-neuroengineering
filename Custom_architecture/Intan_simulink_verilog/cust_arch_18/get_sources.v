// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\cust_arch_18\get_sources.v
// Created: 2021-05-25 12:43:17
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: get_sources
// Source Path: cust_arch_18/cust_architecture/input_interpret_store_retrieve/Interpret_to_RAM_input/interpret data/get_sources
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module get_sources
          (clk,
           reset,
           enb,
           FIFO_write_to,
           InputState,
           data_stream_enable,
           source_device,
           dev_out_channel_0_19,
           source_channel,
           bitmasked_0);


  input   clk;
  input   reset;
  input   enb;
  input   FIFO_write_to;
  input   [7:0] InputState;  // uint8
  input   [7:0] data_stream_enable;  // uint8
  output  [7:0] source_device;  // uint8
  output  [7:0] dev_out_channel_0_19;  // uint8
  output  [7:0] source_channel;  // uint8
  output  bitmasked_0;


  wire Compare_To_Constant1_out1;
  wire switch_compare_1;
  wire Compare_To_Constant4_out1;
  wire Compare_To_Constant3_out1;
  wire Compare_To_Constant6_out1;
  wire AND1_out1;
  wire OR_out1;
  wire AND_out1;
  wire [7:0] next_chann_rollmap;  // uint8
  reg [7:0] Memory_out1;  // uint8
  wire [7:0] curr_channel_rollmap;  // uint8
  wire [7:0] source_device_1;  // uint8
  wire Compare_To_Constant5_out1;
  reg  Memory1_out1;
  wire switch_compare_1_1;
  wire [7:0] Switch1_out1;  // uint8
  wire Compare_To_Constant2_out1;
  reg  Memory2_out1;
  wire AND3_out1;
  reg [7:0] dev_output;  // uint8
  wire [7:0] source_channel_0_159;  // uint8
  wire AND2_out1;

  // se next è tutto di zeri allora siamo a un nuovo channel (0-19)


  assign Compare_To_Constant1_out1 = InputState == 8'b00000000;



  assign switch_compare_1 = Compare_To_Constant1_out1 > 1'b0;



  assign Compare_To_Constant4_out1 = InputState >= 8'b00001000;



  assign Compare_To_Constant3_out1 = InputState == 8'b00000110;



  assign Compare_To_Constant6_out1 = InputState <= 8'b00001011;



  assign AND1_out1 = Compare_To_Constant4_out1 & Compare_To_Constant6_out1;



  assign OR_out1 = Compare_To_Constant3_out1 | AND1_out1;



  assign AND_out1 = FIFO_write_to & OR_out1;



  always @(posedge clk or posedge reset)
    begin : Memory_process
      if (reset == 1'b1) begin
        Memory_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Memory_out1 <= next_chann_rollmap;
        end
      end
    end



  position_to_bitmask u_position_to_bitmask (.clk(clk),
                                             .reset(reset),
                                             .enb(enb),
                                             .curr_channel_rollmap(curr_channel_rollmap),  // uint8
                                             .first_one_pos(source_device_1),  // uint8
                                             .Enable(AND_out1),
                                             .bit_masked(next_chann_rollmap)  // uint8
                                             );

  assign Compare_To_Constant5_out1 = next_chann_rollmap == 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : Memory1_process
      if (reset == 1'b1) begin
        Memory1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Memory1_out1 <= Compare_To_Constant5_out1;
        end
      end
    end



  assign switch_compare_1_1 = Memory1_out1 > 1'b0;



  assign Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Memory_out1 :
              data_stream_enable);



  assign curr_channel_rollmap = (switch_compare_1 == 1'b0 ? Switch1_out1 :
              data_stream_enable);



  find_first_one_pos u_find_first_one_pos (.clk(clk),
                                           .reset(reset),
                                           .enb(enb),
                                           .In1(curr_channel_rollmap),  // uint8
                                           .Enable(AND_out1),
                                           .first_one_pos(source_device_1)  // uint8
                                           );

  Triggered_Subsystem u_Triggered_Subsystem (.clk(clk),
                                             .reset(reset),
                                             .enb(enb),
                                             .In1(source_device_1),  // uint8
                                             .Enable(AND_out1),
                                             .Out1(source_device)  // uint8
                                             );

  assign Compare_To_Constant2_out1 = InputState == 8'b00001101;



  always @(posedge clk or posedge reset)
    begin : Memory2_process
      if (reset == 1'b1) begin
        Memory2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Memory2_out1 <= AND_out1;
        end
      end
    end



  assign AND3_out1 = Memory1_out1 & Memory2_out1;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 20
  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        dev_output <= 8'b00000000;
      end
      else begin
        if (enb) begin
          if (Compare_To_Constant2_out1 == 1'b1) begin
            dev_output <= 8'b00000000;
          end
          else if (AND3_out1 == 1'b1) begin
            if (dev_output >= 8'b00010100) begin
              dev_output <= 8'b00000000;
            end
            else begin
              dev_output <= dev_output + 8'b00000001;
            end
          end
        end
      end
    end



  assign dev_out_channel_0_19 = dev_output;

  Subsystem u_Subsystem (.clk(clk),
                         .reset(reset),
                         .enb(enb),
                         .source_device(source_device),  // uint8
                         .dev_output(dev_output),  // uint8
                         .Enable(AND_out1),
                         .source_channel_0_159(source_channel_0_159)  // uint8
                         );

  assign source_channel = source_channel_0_159;

  assign AND2_out1 = AND_out1 & Compare_To_Constant5_out1;



  assign bitmasked_0 = AND2_out1;

endmodule  // get_sources

