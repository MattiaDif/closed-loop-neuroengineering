// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\pipe_in_v1\process_and_retrieve.v
// Created: 2021-09-06 16:29:47
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: process_and_retrieve
// Source Path: pipe_in_v1/cust_architecture/process_and_retrieve
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module process_and_retrieve
          (value_from_pipeIn,
           rd_dout);


  input   [15:0] value_from_pipeIn;  // uint16
  output  [15:0] rd_dout;  // uint16



  // data sent for processing
  // 
  // Note: If a read operation occurs simultaneously at the same address 
  // as a write operation, old data appears at the read output port (rd_dout).
  // 
  // note that these RAM are too big.. I just need 160 and thus a reduced address port width  
  // 
  // this memory is to guarantee that the input is already stored
  // 
  // Write in RAM only if an AC data
  // is available
  // 
  // rd_address from Output
  // 
  // data processed for Output
  // 
  // generally, all sample in the processing subsystem
  // are delayed by two samples --> the memories are 
  // needed for this reason
  // 
  // The dual-port RAM in the input interpret subsystem introduces 
  // a sample of delay. Furthermore, I need one sample more of delay
  // due to the IIR filter --> overall delay of two samples
  // 
  // address sent for processing


  // memory for saving AC filtered data in the DC
  // address for the next offline comparison
  assign rd_dout = value_from_pipeIn;

endmodule  // process_and_retrieve

