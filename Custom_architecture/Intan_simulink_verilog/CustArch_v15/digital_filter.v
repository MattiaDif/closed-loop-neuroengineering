// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v15\digital_filter.v
// Created: 2021-06-18 11:42:55
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: digital_filter
// Source Path: CustArch_v15/cust_architecture/process_and_retrieve/Filter_ch1/digital_filter
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module digital_filter
          (clk,
           reset,
           enb,
           raw_input_0,
           raw_input_1,
           raw_input_2,
           raw_input_3,
           raw_input_4,
           raw_input_5,
           raw_input_6,
           raw_input_7,
           Enable,
           filter_output_0,
           filter_output_1,
           filter_output_2,
           filter_output_3,
           filter_output_4,
           filter_output_5,
           filter_output_6,
           filter_output_7);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] raw_input_0;  // uint16
  input   [15:0] raw_input_1;  // uint16
  input   [15:0] raw_input_2;  // uint16
  input   [15:0] raw_input_3;  // uint16
  input   [15:0] raw_input_4;  // uint16
  input   [15:0] raw_input_5;  // uint16
  input   [15:0] raw_input_6;  // uint16
  input   [15:0] raw_input_7;  // uint16
  input   Enable;
  output  [15:0] filter_output_0;  // uint16
  output  [15:0] filter_output_1;  // uint16
  output  [15:0] filter_output_2;  // uint16
  output  [15:0] filter_output_3;  // uint16
  output  [15:0] filter_output_4;  // uint16
  output  [15:0] filter_output_5;  // uint16
  output  [15:0] filter_output_6;  // uint16
  output  [15:0] filter_output_7;  // uint16


  wire [15:0] raw_input [0:7];  // uint16 [8]
  wire [15:0] Constant_out1;  // uint16
  wire signed [16:0] Add_v;  // sfix17
  wire signed [16:0] Add_sub_temp;  // sfix17
  wire signed [16:0] Add_sub_temp_1;  // sfix17
  wire signed [16:0] Add_sub_temp_2;  // sfix17
  wire signed [16:0] Add_sub_temp_3;  // sfix17
  wire signed [16:0] Add_sub_temp_4;  // sfix17
  wire signed [16:0] Add_sub_temp_5;  // sfix17
  wire signed [16:0] Add_sub_temp_6;  // sfix17
  wire signed [16:0] Add_sub_temp_7;  // sfix17
  wire signed [16:0] Add_1;  // sfix17
  wire signed [16:0] Add_2;  // sfix17
  wire signed [16:0] Add_3;  // sfix17
  wire signed [16:0] Add_4;  // sfix17
  wire signed [16:0] Add_5;  // sfix17
  wire signed [16:0] Add_6;  // sfix17
  wire signed [16:0] Add_7;  // sfix17
  wire signed [16:0] Add_8;  // sfix17
  wire signed [31:0] Add_out1 [0:7];  // sfix32_En15 [8]
  wire signed [31:0] highpass_out1_0;  // sfix32_En15
  wire signed [31:0] highpass_out1_1;  // sfix32_En15
  wire signed [31:0] highpass_out1_2;  // sfix32_En15
  wire signed [31:0] highpass_out1_3;  // sfix32_En15
  wire signed [31:0] highpass_out1_4;  // sfix32_En15
  wire signed [31:0] highpass_out1_5;  // sfix32_En15
  wire signed [31:0] highpass_out1_6;  // sfix32_En15
  wire signed [31:0] highpass_out1_7;  // sfix32_En15
  wire signed [31:0] highpass_out1 [0:7];  // sfix32_En15 [8]
  wire [15:0] Constant1_out1;  // uint16
  wire signed [32:0] Add1_v;  // sfix33_En15
  wire signed [32:0] Add1_add_cast;  // sfix33_En15
  wire signed [32:0] Add1_add_temp;  // sfix33_En15
  wire signed [32:0] Add1_add_cast_1;  // sfix33_En15
  wire signed [32:0] Add1_add_temp_1;  // sfix33_En15
  wire signed [32:0] Add1_add_cast_2;  // sfix33_En15
  wire signed [32:0] Add1_add_temp_2;  // sfix33_En15
  wire signed [32:0] Add1_add_cast_3;  // sfix33_En15
  wire signed [32:0] Add1_add_temp_3;  // sfix33_En15
  wire signed [32:0] Add1_add_cast_4;  // sfix33_En15
  wire signed [32:0] Add1_add_temp_4;  // sfix33_En15
  wire signed [32:0] Add1_add_cast_5;  // sfix33_En15
  wire signed [32:0] Add1_add_temp_5;  // sfix33_En15
  wire signed [32:0] Add1_add_cast_6;  // sfix33_En15
  wire signed [32:0] Add1_add_temp_6;  // sfix33_En15
  wire signed [32:0] Add1_add_cast_7;  // sfix33_En15
  wire signed [32:0] Add1_add_temp_7;  // sfix33_En15
  wire [15:0] Add1_out1 [0:7];  // uint16 [8]
  wire [15:0] Add1_out1_bypass [0:7];  // uint16 [8]
  reg [15:0] filter_output_bypass_reg [0:7];  // ufix16 [8]
  wire [15:0] filter_output_bypass_reg_next [0:7];  // ufix16 [8]
  wire [15:0] Add1_out1_last_value [0:7];  // uint16 [8]


  assign raw_input[0] = raw_input_0;
  assign raw_input[1] = raw_input_1;
  assign raw_input[2] = raw_input_2;
  assign raw_input[3] = raw_input_3;
  assign raw_input[4] = raw_input_4;
  assign raw_input[5] = raw_input_5;
  assign raw_input[6] = raw_input_6;
  assign raw_input[7] = raw_input_7;

  assign Constant_out1 = 16'b1000000000000000;



  assign Add_v = {1'b0, Constant_out1};
  assign Add_1 = {1'b0, raw_input[0]};
  assign Add_sub_temp = Add_1 - Add_v;
  assign Add_out1[0] = {Add_sub_temp, 15'b000000000000000};
  assign Add_2 = {1'b0, raw_input[1]};
  assign Add_sub_temp_1 = Add_2 - Add_v;
  assign Add_out1[1] = {Add_sub_temp_1, 15'b000000000000000};
  assign Add_3 = {1'b0, raw_input[2]};
  assign Add_sub_temp_2 = Add_3 - Add_v;
  assign Add_out1[2] = {Add_sub_temp_2, 15'b000000000000000};
  assign Add_4 = {1'b0, raw_input[3]};
  assign Add_sub_temp_3 = Add_4 - Add_v;
  assign Add_out1[3] = {Add_sub_temp_3, 15'b000000000000000};
  assign Add_5 = {1'b0, raw_input[4]};
  assign Add_sub_temp_4 = Add_5 - Add_v;
  assign Add_out1[4] = {Add_sub_temp_4, 15'b000000000000000};
  assign Add_6 = {1'b0, raw_input[5]};
  assign Add_sub_temp_5 = Add_6 - Add_v;
  assign Add_out1[5] = {Add_sub_temp_5, 15'b000000000000000};
  assign Add_7 = {1'b0, raw_input[6]};
  assign Add_sub_temp_6 = Add_7 - Add_v;
  assign Add_out1[6] = {Add_sub_temp_6, 15'b000000000000000};
  assign Add_8 = {1'b0, raw_input[7]};
  assign Add_sub_temp_7 = Add_8 - Add_v;
  assign Add_out1[7] = {Add_sub_temp_7, 15'b000000000000000};



  highpass u_highpass (.clk(clk),
                       .reset(reset),
                       .enb(enb),
                       .Input_0(Add_out1[0]),  // sfix32_En15
                       .Input_1(Add_out1[1]),  // sfix32_En15
                       .Input_2(Add_out1[2]),  // sfix32_En15
                       .Input_3(Add_out1[3]),  // sfix32_En15
                       .Input_4(Add_out1[4]),  // sfix32_En15
                       .Input_5(Add_out1[5]),  // sfix32_En15
                       .Input_6(Add_out1[6]),  // sfix32_En15
                       .Input_7(Add_out1[7]),  // sfix32_En15
                       .Enable_out2(Enable),
                       .Output_0(highpass_out1_0),  // sfix32_En15
                       .Output_1(highpass_out1_1),  // sfix32_En15
                       .Output_2(highpass_out1_2),  // sfix32_En15
                       .Output_3(highpass_out1_3),  // sfix32_En15
                       .Output_4(highpass_out1_4),  // sfix32_En15
                       .Output_5(highpass_out1_5),  // sfix32_En15
                       .Output_6(highpass_out1_6),  // sfix32_En15
                       .Output_7(highpass_out1_7)  // sfix32_En15
                       );

  assign highpass_out1[0] = highpass_out1_0;
  assign highpass_out1[1] = highpass_out1_1;
  assign highpass_out1[2] = highpass_out1_2;
  assign highpass_out1[3] = highpass_out1_3;
  assign highpass_out1[4] = highpass_out1_4;
  assign highpass_out1[5] = highpass_out1_5;
  assign highpass_out1[6] = highpass_out1_6;
  assign highpass_out1[7] = highpass_out1_7;

  assign Constant1_out1 = 16'b1000000000000000;



  assign Add1_v = {2'b0, {Constant1_out1, 15'b000000000000000}};
  assign Add1_add_cast = {highpass_out1[0][31], highpass_out1[0]};
  assign Add1_add_temp = Add1_add_cast + Add1_v;
  assign Add1_out1[0] = Add1_add_temp[30:15];
  assign Add1_add_cast_1 = {highpass_out1[1][31], highpass_out1[1]};
  assign Add1_add_temp_1 = Add1_add_cast_1 + Add1_v;
  assign Add1_out1[1] = Add1_add_temp_1[30:15];
  assign Add1_add_cast_2 = {highpass_out1[2][31], highpass_out1[2]};
  assign Add1_add_temp_2 = Add1_add_cast_2 + Add1_v;
  assign Add1_out1[2] = Add1_add_temp_2[30:15];
  assign Add1_add_cast_3 = {highpass_out1[3][31], highpass_out1[3]};
  assign Add1_add_temp_3 = Add1_add_cast_3 + Add1_v;
  assign Add1_out1[3] = Add1_add_temp_3[30:15];
  assign Add1_add_cast_4 = {highpass_out1[4][31], highpass_out1[4]};
  assign Add1_add_temp_4 = Add1_add_cast_4 + Add1_v;
  assign Add1_out1[4] = Add1_add_temp_4[30:15];
  assign Add1_add_cast_5 = {highpass_out1[5][31], highpass_out1[5]};
  assign Add1_add_temp_5 = Add1_add_cast_5 + Add1_v;
  assign Add1_out1[5] = Add1_add_temp_5[30:15];
  assign Add1_add_cast_6 = {highpass_out1[6][31], highpass_out1[6]};
  assign Add1_add_temp_6 = Add1_add_cast_6 + Add1_v;
  assign Add1_out1[6] = Add1_add_temp_6[30:15];
  assign Add1_add_cast_7 = {highpass_out1[7][31], highpass_out1[7]};
  assign Add1_add_temp_7 = Add1_add_cast_7 + Add1_v;
  assign Add1_out1[7] = Add1_add_temp_7[30:15];



  always @(posedge clk or posedge reset)
    begin : filter_output_bypass_process
      if (reset == 1'b1) begin
        filter_output_bypass_reg[0] <= 16'b0000000000000000;
        filter_output_bypass_reg[1] <= 16'b0000000000000000;
        filter_output_bypass_reg[2] <= 16'b0000000000000000;
        filter_output_bypass_reg[3] <= 16'b0000000000000000;
        filter_output_bypass_reg[4] <= 16'b0000000000000000;
        filter_output_bypass_reg[5] <= 16'b0000000000000000;
        filter_output_bypass_reg[6] <= 16'b0000000000000000;
        filter_output_bypass_reg[7] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          filter_output_bypass_reg[0] <= filter_output_bypass_reg_next[0];
          filter_output_bypass_reg[1] <= filter_output_bypass_reg_next[1];
          filter_output_bypass_reg[2] <= filter_output_bypass_reg_next[2];
          filter_output_bypass_reg[3] <= filter_output_bypass_reg_next[3];
          filter_output_bypass_reg[4] <= filter_output_bypass_reg_next[4];
          filter_output_bypass_reg[5] <= filter_output_bypass_reg_next[5];
          filter_output_bypass_reg[6] <= filter_output_bypass_reg_next[6];
          filter_output_bypass_reg[7] <= filter_output_bypass_reg_next[7];
        end
      end
    end

  assign Add1_out1_last_value[0] = filter_output_bypass_reg[0];
  assign Add1_out1_last_value[1] = filter_output_bypass_reg[1];
  assign Add1_out1_last_value[2] = filter_output_bypass_reg[2];
  assign Add1_out1_last_value[3] = filter_output_bypass_reg[3];
  assign Add1_out1_last_value[4] = filter_output_bypass_reg[4];
  assign Add1_out1_last_value[5] = filter_output_bypass_reg[5];
  assign Add1_out1_last_value[6] = filter_output_bypass_reg[6];
  assign Add1_out1_last_value[7] = filter_output_bypass_reg[7];
  assign filter_output_bypass_reg_next[0] = Add1_out1_bypass[0];
  assign filter_output_bypass_reg_next[1] = Add1_out1_bypass[1];
  assign filter_output_bypass_reg_next[2] = Add1_out1_bypass[2];
  assign filter_output_bypass_reg_next[3] = Add1_out1_bypass[3];
  assign filter_output_bypass_reg_next[4] = Add1_out1_bypass[4];
  assign filter_output_bypass_reg_next[5] = Add1_out1_bypass[5];
  assign filter_output_bypass_reg_next[6] = Add1_out1_bypass[6];
  assign filter_output_bypass_reg_next[7] = Add1_out1_bypass[7];



  assign Add1_out1_bypass[0] = (Enable == 1'b0 ? Add1_out1_last_value[0] :
              Add1_out1[0]);
  assign Add1_out1_bypass[1] = (Enable == 1'b0 ? Add1_out1_last_value[1] :
              Add1_out1[1]);
  assign Add1_out1_bypass[2] = (Enable == 1'b0 ? Add1_out1_last_value[2] :
              Add1_out1[2]);
  assign Add1_out1_bypass[3] = (Enable == 1'b0 ? Add1_out1_last_value[3] :
              Add1_out1[3]);
  assign Add1_out1_bypass[4] = (Enable == 1'b0 ? Add1_out1_last_value[4] :
              Add1_out1[4]);
  assign Add1_out1_bypass[5] = (Enable == 1'b0 ? Add1_out1_last_value[5] :
              Add1_out1[5]);
  assign Add1_out1_bypass[6] = (Enable == 1'b0 ? Add1_out1_last_value[6] :
              Add1_out1[6]);
  assign Add1_out1_bypass[7] = (Enable == 1'b0 ? Add1_out1_last_value[7] :
              Add1_out1[7]);



  assign filter_output_0 = Add1_out1_bypass[0];

  assign filter_output_1 = Add1_out1_bypass[1];

  assign filter_output_2 = Add1_out1_bypass[2];

  assign filter_output_3 = Add1_out1_bypass[3];

  assign filter_output_4 = Add1_out1_bypass[4];

  assign filter_output_5 = Add1_out1_bypass[5];

  assign filter_output_6 = Add1_out1_bypass[6];

  assign filter_output_7 = Add1_out1_bypass[7];

endmodule  // digital_filter

