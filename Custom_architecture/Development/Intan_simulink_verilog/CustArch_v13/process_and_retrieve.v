// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v13\process_and_retrieve.v
// Created: 2021-06-18 09:34:56
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: process_and_retrieve
// Source Path: CustArch_v13/cust_architecture/process_and_retrieve
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module process_and_retrieve
          (clk,
           reset,
           enb,
           enb_1_8_1,
           current_value,
           device_output,
           address_for_processing,
           InputState,
           rd_address,
           rd_out);


  input   clk;
  input   reset;
  input   enb;
  input   enb_1_8_1;
  input   [15:0] current_value;  // uint16
  input   [7:0] device_output;  // uint8
  input   [8:0] address_for_processing;  // ufix9
  input   [7:0] InputState;  // uint8
  input   [8:0] rd_address;  // ufix9
  output  [15:0] rd_out;  // uint16


  wire [15:0] Constant1_out1;  // uint16
  wire signed [16:0] Subtract_1;  // sfix17
  wire signed [16:0] Subtract_2;  // sfix17
  wire signed [16:0] Subtract_out1;  // sfix17
  wire Compare_To_Constant5_out1;
  wire switch_compare_1;
  wire [15:0] TmpGroundAtSwitchInport3_out1;  // uint16
  wire [15:0] data_stream_concat_out1_0;  // uint16
  wire [15:0] data_stream_concat_out1_1;  // uint16
  wire [15:0] data_stream_concat_out1_2;  // uint16
  wire [15:0] data_stream_concat_out1_3;  // uint16
  wire [15:0] data_stream_concat_out1_4;  // uint16
  wire [15:0] data_stream_concat_out1_5;  // uint16
  wire [15:0] data_stream_concat_out1_6;  // uint16
  wire [15:0] data_stream_concat_out1_7;  // uint16
  wire [15:0] data_stream_concat_out1 [0:7];  // uint16 [8]
  reg [15:0] Memory3_reg [0:7];  // ufix16 [8]
  wire [15:0] Memory3_reg_next [0:7];  // ufix16 [8]
  wire [15:0] Memory3_out1 [0:7];  // uint16 [8]
  wire Compare_To_Constant_out1;
  wire Compare_To_Constant1_out1;
  reg [3:0] HDL_Counter_out1;  // ufix4
  reg [7:0] Memory4_out1;  // uint8
  wire Compare_To_Constant3_out1;
  wire Logical_Operator_out1;
  wire [15:0] serializer_PostProcessed;  // uint16
  wire [15:0] Switch_out1;  // uint16
  reg [2:0] Serializer1D2_contl_cnt;  // ufix3
  wire Serializer1D2_invldSignal;
  wire [8:0] digital_filter1_out1_0;  // ufix9
  wire [8:0] digital_filter1_out1_1;  // ufix9
  wire [8:0] digital_filter1_out1_2;  // ufix9
  wire [8:0] digital_filter1_out1_3;  // ufix9
  wire [8:0] digital_filter1_out1_4;  // ufix9
  wire [8:0] digital_filter1_out1_5;  // ufix9
  wire [8:0] digital_filter1_out1_6;  // ufix9
  wire [8:0] digital_filter1_out1_7;  // ufix9
  wire [8:0] digital_filter1_out1 [0:7];  // ufix9 [8]
  reg [8:0] Memory2_reg [0:7];  // ufix9 [8]
  wire [8:0] Memory2_reg_next [0:7];  // ufix9 [8]
  wire [8:0] Memory2_out1 [0:7];  // ufix9 [8]
  wire [8:0] Subsystem_out1_0;  // ufix9
  wire [8:0] Subsystem_out1_1;  // ufix9
  wire [8:0] Subsystem_out1_2;  // ufix9
  wire [8:0] Subsystem_out1_3;  // ufix9
  wire [8:0] Subsystem_out1_4;  // ufix9
  wire [8:0] Subsystem_out1_5;  // ufix9
  wire [8:0] Subsystem_out1_6;  // ufix9
  wire [8:0] Subsystem_out1_7;  // ufix9
  wire [8:0] serial_in_1 [0:7];  // ufix9 [8]
  reg [8:0] Serializer1D2_data [0:6];  // ufix9 [7]
  wire [8:0] Serializer1D2_data_next [0:6];  // ufix9 [7]
  wire [8:0] Serializer1D2_data_temp [0:6];  // ufix9 [7]
  wire [8:0] serializer_PostProcessed_1;  // ufix9
  wire Compare_To_Constant8_out1;
  wire Compare_To_Constant9_out1;
  reg  [0:6] Delay_reg;  // ufix1 [7]
  wire [0:6] Delay_reg_next;  // ufix1 [7]
  wire Delay_out1;
  reg [3:0] HDL_Counter1_out1;  // ufix4
  wire [15:0] ProcessedData_storage1_out1;  // uint16
  wire [15:0] ProcessedData_storage1_out2;  // uint16

  // The dual-port RAM in the input interpret subsystem introduces 
  // a sample of delay. Furthermore, I need one sample more of delay
  // due to the IIR filter --> overall delay of two samples
  // 
  // generally, all sample in the processing subsystem
  // are delayed by two samples --> the memories are 
  // needed for this reason
  // 
  // data sent for processing


  assign Constant1_out1 = 16'b0000000000000001;



  assign Subtract_1 = {9'b0, device_output};
  assign Subtract_2 = {1'b0, Constant1_out1};
  assign Subtract_out1 = Subtract_1 - Subtract_2;



  assign Compare_To_Constant5_out1 = Subtract_out1 == 17'sb00000000000000000;



  assign switch_compare_1 = Compare_To_Constant5_out1 > 1'b0;



  assign TmpGroundAtSwitchInport3_out1 = 16'b0000000000000000;



  data_stream_concat u_data_stream_concat (.clk(clk),
                                           .reset(reset),
                                           .enb(enb),
                                           .current_sample(current_value),  // uint16
                                           .Out1_0(data_stream_concat_out1_0),  // uint16
                                           .Out1_1(data_stream_concat_out1_1),  // uint16
                                           .Out1_2(data_stream_concat_out1_2),  // uint16
                                           .Out1_3(data_stream_concat_out1_3),  // uint16
                                           .Out1_4(data_stream_concat_out1_4),  // uint16
                                           .Out1_5(data_stream_concat_out1_5),  // uint16
                                           .Out1_6(data_stream_concat_out1_6),  // uint16
                                           .Out1_7(data_stream_concat_out1_7)  // uint16
                                           );

  assign data_stream_concat_out1[0] = data_stream_concat_out1_0;
  assign data_stream_concat_out1[1] = data_stream_concat_out1_1;
  assign data_stream_concat_out1[2] = data_stream_concat_out1_2;
  assign data_stream_concat_out1[3] = data_stream_concat_out1_3;
  assign data_stream_concat_out1[4] = data_stream_concat_out1_4;
  assign data_stream_concat_out1[5] = data_stream_concat_out1_5;
  assign data_stream_concat_out1[6] = data_stream_concat_out1_6;
  assign data_stream_concat_out1[7] = data_stream_concat_out1_7;

  always @(posedge clk or posedge reset)
    begin : Memory3_process
      if (reset == 1'b1) begin
        Memory3_reg[0] <= 16'b0000000000000000;
        Memory3_reg[1] <= 16'b0000000000000000;
        Memory3_reg[2] <= 16'b0000000000000000;
        Memory3_reg[3] <= 16'b0000000000000000;
        Memory3_reg[4] <= 16'b0000000000000000;
        Memory3_reg[5] <= 16'b0000000000000000;
        Memory3_reg[6] <= 16'b0000000000000000;
        Memory3_reg[7] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Memory3_reg[0] <= Memory3_reg_next[0];
          Memory3_reg[1] <= Memory3_reg_next[1];
          Memory3_reg[2] <= Memory3_reg_next[2];
          Memory3_reg[3] <= Memory3_reg_next[3];
          Memory3_reg[4] <= Memory3_reg_next[4];
          Memory3_reg[5] <= Memory3_reg_next[5];
          Memory3_reg[6] <= Memory3_reg_next[6];
          Memory3_reg[7] <= Memory3_reg_next[7];
        end
      end
    end

  assign Memory3_out1[0] = Memory3_reg[0];
  assign Memory3_out1[1] = Memory3_reg[1];
  assign Memory3_out1[2] = Memory3_reg[2];
  assign Memory3_out1[3] = Memory3_reg[3];
  assign Memory3_out1[4] = Memory3_reg[4];
  assign Memory3_out1[5] = Memory3_reg[5];
  assign Memory3_out1[6] = Memory3_reg[6];
  assign Memory3_out1[7] = Memory3_reg[7];
  assign Memory3_reg_next[0] = data_stream_concat_out1[0];
  assign Memory3_reg_next[1] = data_stream_concat_out1[1];
  assign Memory3_reg_next[2] = data_stream_concat_out1[2];
  assign Memory3_reg_next[3] = data_stream_concat_out1[3];
  assign Memory3_reg_next[4] = data_stream_concat_out1[4];
  assign Memory3_reg_next[5] = data_stream_concat_out1[5];
  assign Memory3_reg_next[6] = data_stream_concat_out1[6];
  assign Memory3_reg_next[7] = data_stream_concat_out1[7];



  assign Compare_To_Constant_out1 = InputState == 8'b00000111;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 8
  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          if (Compare_To_Constant1_out1 == 1'b1) begin
            HDL_Counter_out1 <= 4'b0000;
          end
          else if (Compare_To_Constant_out1 == 1'b1) begin
            if (HDL_Counter_out1 >= 4'b1000) begin
              HDL_Counter_out1 <= 4'b0000;
            end
            else begin
              HDL_Counter_out1 <= HDL_Counter_out1 + 4'b0001;
            end
          end
        end
      end
    end



  assign Compare_To_Constant1_out1 = HDL_Counter_out1 == 4'b1000;



  always @(posedge clk or posedge reset)
    begin : Memory4_process
      if (reset == 1'b1) begin
        Memory4_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Memory4_out1 <= device_output;
        end
      end
    end



  assign Compare_To_Constant3_out1 = Memory4_out1 == 8'b00000000;



  assign Logical_Operator_out1 = Compare_To_Constant1_out1 & Compare_To_Constant3_out1;



  Filter_ch1 u_Filter_ch1 (.clk(clk),
                           .reset(reset),
                           .enb(enb),
                           .enb_1_8_1(enb_1_8_1),
                           .raw_input_0(Memory3_out1[0]),  // uint16
                           .raw_input_1(Memory3_out1[1]),  // uint16
                           .raw_input_2(Memory3_out1[2]),  // uint16
                           .raw_input_3(Memory3_out1[3]),  // uint16
                           .raw_input_4(Memory3_out1[4]),  // uint16
                           .raw_input_5(Memory3_out1[5]),  // uint16
                           .raw_input_6(Memory3_out1[6]),  // uint16
                           .raw_input_7(Memory3_out1[7]),  // uint16
                           .Enable(Logical_Operator_out1),
                           .S(serializer_PostProcessed)  // uint16
                           );

  assign Switch_out1 = (switch_compare_1 == 1'b0 ? TmpGroundAtSwitchInport3_out1 :
              serializer_PostProcessed);



  always @(posedge clk or posedge reset)
    begin : Serializer1D2_contl_process
      if (reset == 1'b1) begin
        Serializer1D2_contl_cnt <= 3'b000;
      end
      else begin
        if (enb) begin
          if (Serializer1D2_contl_cnt == 3'b111) begin
            Serializer1D2_contl_cnt <= 3'b000;
          end
          else begin
            Serializer1D2_contl_cnt <= Serializer1D2_contl_cnt + 3'b001;
          end
        end
      end
    end

  assign Serializer1D2_invldSignal = Serializer1D2_contl_cnt == 3'b000;



  digital_filter1 u_digital_filter1 (.clk(clk),
                                     .reset(reset),
                                     .enb(enb),
                                     .current_sample(address_for_processing),  // ufix9
                                     .Out1_0(digital_filter1_out1_0),  // ufix9
                                     .Out1_1(digital_filter1_out1_1),  // ufix9
                                     .Out1_2(digital_filter1_out1_2),  // ufix9
                                     .Out1_3(digital_filter1_out1_3),  // ufix9
                                     .Out1_4(digital_filter1_out1_4),  // ufix9
                                     .Out1_5(digital_filter1_out1_5),  // ufix9
                                     .Out1_6(digital_filter1_out1_6),  // ufix9
                                     .Out1_7(digital_filter1_out1_7)  // ufix9
                                     );

  assign digital_filter1_out1[0] = digital_filter1_out1_0;
  assign digital_filter1_out1[1] = digital_filter1_out1_1;
  assign digital_filter1_out1[2] = digital_filter1_out1_2;
  assign digital_filter1_out1[3] = digital_filter1_out1_3;
  assign digital_filter1_out1[4] = digital_filter1_out1_4;
  assign digital_filter1_out1[5] = digital_filter1_out1_5;
  assign digital_filter1_out1[6] = digital_filter1_out1_6;
  assign digital_filter1_out1[7] = digital_filter1_out1_7;

  always @(posedge clk or posedge reset)
    begin : Memory2_process
      if (reset == 1'b1) begin
        Memory2_reg[0] <= 9'b000000000;
        Memory2_reg[1] <= 9'b000000000;
        Memory2_reg[2] <= 9'b000000000;
        Memory2_reg[3] <= 9'b000000000;
        Memory2_reg[4] <= 9'b000000000;
        Memory2_reg[5] <= 9'b000000000;
        Memory2_reg[6] <= 9'b000000000;
        Memory2_reg[7] <= 9'b000000000;
      end
      else begin
        if (enb) begin
          Memory2_reg[0] <= Memory2_reg_next[0];
          Memory2_reg[1] <= Memory2_reg_next[1];
          Memory2_reg[2] <= Memory2_reg_next[2];
          Memory2_reg[3] <= Memory2_reg_next[3];
          Memory2_reg[4] <= Memory2_reg_next[4];
          Memory2_reg[5] <= Memory2_reg_next[5];
          Memory2_reg[6] <= Memory2_reg_next[6];
          Memory2_reg[7] <= Memory2_reg_next[7];
        end
      end
    end

  assign Memory2_out1[0] = Memory2_reg[0];
  assign Memory2_out1[1] = Memory2_reg[1];
  assign Memory2_out1[2] = Memory2_reg[2];
  assign Memory2_out1[3] = Memory2_reg[3];
  assign Memory2_out1[4] = Memory2_reg[4];
  assign Memory2_out1[5] = Memory2_reg[5];
  assign Memory2_out1[6] = Memory2_reg[6];
  assign Memory2_out1[7] = Memory2_reg[7];
  assign Memory2_reg_next[0] = digital_filter1_out1[0];
  assign Memory2_reg_next[1] = digital_filter1_out1[1];
  assign Memory2_reg_next[2] = digital_filter1_out1[2];
  assign Memory2_reg_next[3] = digital_filter1_out1[3];
  assign Memory2_reg_next[4] = digital_filter1_out1[4];
  assign Memory2_reg_next[5] = digital_filter1_out1[5];
  assign Memory2_reg_next[6] = digital_filter1_out1[6];
  assign Memory2_reg_next[7] = digital_filter1_out1[7];



  Subsystem u_Subsystem (.clk(clk),
                         .reset(reset),
                         .enb(enb),
                         .enb_1_8_1(enb_1_8_1),
                         .In1_0(Memory2_out1[0]),  // ufix9
                         .In1_1(Memory2_out1[1]),  // ufix9
                         .In1_2(Memory2_out1[2]),  // ufix9
                         .In1_3(Memory2_out1[3]),  // ufix9
                         .In1_4(Memory2_out1[4]),  // ufix9
                         .In1_5(Memory2_out1[5]),  // ufix9
                         .In1_6(Memory2_out1[6]),  // ufix9
                         .In1_7(Memory2_out1[7]),  // ufix9
                         .In2(Compare_To_Constant1_out1),
                         .Out1_0(Subsystem_out1_0),  // ufix9
                         .Out1_1(Subsystem_out1_1),  // ufix9
                         .Out1_2(Subsystem_out1_2),  // ufix9
                         .Out1_3(Subsystem_out1_3),  // ufix9
                         .Out1_4(Subsystem_out1_4),  // ufix9
                         .Out1_5(Subsystem_out1_5),  // ufix9
                         .Out1_6(Subsystem_out1_6),  // ufix9
                         .Out1_7(Subsystem_out1_7)  // ufix9
                         );

  assign serial_in_1[0] = Subsystem_out1_0;
  assign serial_in_1[1] = Subsystem_out1_1;
  assign serial_in_1[2] = Subsystem_out1_2;
  assign serial_in_1[3] = Subsystem_out1_3;
  assign serial_in_1[4] = Subsystem_out1_4;
  assign serial_in_1[5] = Subsystem_out1_5;
  assign serial_in_1[6] = Subsystem_out1_6;
  assign serial_in_1[7] = Subsystem_out1_7;

  always @(posedge clk or posedge reset)
    begin : Serializer1D2_process
      if (reset == 1'b1) begin
        Serializer1D2_data[0] <= 9'b000000000;
        Serializer1D2_data[1] <= 9'b000000000;
        Serializer1D2_data[2] <= 9'b000000000;
        Serializer1D2_data[3] <= 9'b000000000;
        Serializer1D2_data[4] <= 9'b000000000;
        Serializer1D2_data[5] <= 9'b000000000;
        Serializer1D2_data[6] <= 9'b000000000;
      end
      else begin
        if (enb) begin
          Serializer1D2_data[0] <= Serializer1D2_data_next[0];
          Serializer1D2_data[1] <= Serializer1D2_data_next[1];
          Serializer1D2_data[2] <= Serializer1D2_data_next[2];
          Serializer1D2_data[3] <= Serializer1D2_data_next[3];
          Serializer1D2_data[4] <= Serializer1D2_data_next[4];
          Serializer1D2_data[5] <= Serializer1D2_data_next[5];
          Serializer1D2_data[6] <= Serializer1D2_data_next[6];
        end
      end
    end

  assign serializer_PostProcessed_1 = (Serializer1D2_invldSignal != 1'b0 ? serial_in_1[0] :
              Serializer1D2_data[0]);
  assign Serializer1D2_data_temp[0] = (Serializer1D2_invldSignal != 1'b0 ? serial_in_1[1] :
              Serializer1D2_data[1]);
  assign Serializer1D2_data_temp[1] = (Serializer1D2_invldSignal != 1'b0 ? serial_in_1[2] :
              Serializer1D2_data[2]);
  assign Serializer1D2_data_temp[2] = (Serializer1D2_invldSignal != 1'b0 ? serial_in_1[3] :
              Serializer1D2_data[3]);
  assign Serializer1D2_data_temp[3] = (Serializer1D2_invldSignal != 1'b0 ? serial_in_1[4] :
              Serializer1D2_data[4]);
  assign Serializer1D2_data_temp[4] = (Serializer1D2_invldSignal != 1'b0 ? serial_in_1[5] :
              Serializer1D2_data[5]);
  assign Serializer1D2_data_temp[5] = (Serializer1D2_invldSignal != 1'b0 ? serial_in_1[6] :
              Serializer1D2_data[6]);
  assign Serializer1D2_data_temp[6] = (Serializer1D2_invldSignal != 1'b0 ? serial_in_1[7] :
              serial_in_1[7]);
  assign Serializer1D2_data_next[0] = Serializer1D2_data_temp[0];
  assign Serializer1D2_data_next[1] = Serializer1D2_data_temp[1];
  assign Serializer1D2_data_next[2] = Serializer1D2_data_temp[2];
  assign Serializer1D2_data_next[3] = Serializer1D2_data_temp[3];
  assign Serializer1D2_data_next[4] = Serializer1D2_data_temp[4];
  assign Serializer1D2_data_next[5] = Serializer1D2_data_temp[5];
  assign Serializer1D2_data_next[6] = Serializer1D2_data_temp[6];



  assign Compare_To_Constant8_out1 = InputState == 8'b00000111;



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_reg[0] <= 1'b0;
        Delay_reg[1] <= 1'b0;
        Delay_reg[2] <= 1'b0;
        Delay_reg[3] <= 1'b0;
        Delay_reg[4] <= 1'b0;
        Delay_reg[5] <= 1'b0;
        Delay_reg[6] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_reg[0] <= Delay_reg_next[0];
          Delay_reg[1] <= Delay_reg_next[1];
          Delay_reg[2] <= Delay_reg_next[2];
          Delay_reg[3] <= Delay_reg_next[3];
          Delay_reg[4] <= Delay_reg_next[4];
          Delay_reg[5] <= Delay_reg_next[5];
          Delay_reg[6] <= Delay_reg_next[6];
        end
      end
    end

  assign Delay_out1 = Delay_reg[6];
  assign Delay_reg_next[0] = Compare_To_Constant9_out1;
  assign Delay_reg_next[1] = Delay_reg[0];
  assign Delay_reg_next[2] = Delay_reg[1];
  assign Delay_reg_next[3] = Delay_reg[2];
  assign Delay_reg_next[4] = Delay_reg[3];
  assign Delay_reg_next[5] = Delay_reg[4];
  assign Delay_reg_next[6] = Delay_reg[5];



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 8
  always @(posedge clk or posedge reset)
    begin : HDL_Counter1_process
      if (reset == 1'b1) begin
        HDL_Counter1_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          if (Delay_out1 == 1'b1) begin
            HDL_Counter1_out1 <= 4'b0000;
          end
          else if (Compare_To_Constant8_out1 == 1'b1) begin
            if (HDL_Counter1_out1 >= 4'b1000) begin
              HDL_Counter1_out1 <= 4'b0000;
            end
            else begin
              HDL_Counter1_out1 <= HDL_Counter1_out1 + 4'b0001;
            end
          end
        end
      end
    end



  assign Compare_To_Constant9_out1 = HDL_Counter1_out1 == 4'b1000;



  DualPortRAM_generic #(.AddrWidth(9),
                        .DataWidth(16)
                        )
                      u_ProcessedData_storage1 (.clk(clk),
                                                .enb(enb),
                                                .wr_din(Switch_out1),
                                                .wr_addr(serializer_PostProcessed_1),
                                                .wr_en(Compare_To_Constant9_out1),
                                                .rd_addr(rd_address),
                                                .wr_dout(ProcessedData_storage1_out1),
                                                .rd_dout(ProcessedData_storage1_out2)
                                                );

  assign rd_out = ProcessedData_storage1_out2;

endmodule  // process_and_retrieve

