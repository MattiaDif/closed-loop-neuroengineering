// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v13\data_stream_concat.v
// Created: 2021-06-18 09:34:56
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: data_stream_concat
// Source Path: CustArch_v13/cust_architecture/process_and_retrieve/data_stream_concat
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module data_stream_concat
          (clk,
           reset,
           enb,
           current_sample,
           Out1_0,
           Out1_1,
           Out1_2,
           Out1_3,
           Out1_4,
           Out1_5,
           Out1_6,
           Out1_7);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] current_sample;  // uint16
  output  [15:0] Out1_0;  // uint16
  output  [15:0] Out1_1;  // uint16
  output  [15:0] Out1_2;  // uint16
  output  [15:0] Out1_3;  // uint16
  output  [15:0] Out1_4;  // uint16
  output  [15:0] Out1_5;  // uint16
  output  [15:0] Out1_6;  // uint16
  output  [15:0] Out1_7;  // uint16


  reg [15:0] Delay_reg [0:1];  // ufix16 [2]
  wire [15:0] Delay_reg_next [0:1];  // ufix16 [2]
  wire [15:0] Delay_out1;  // uint16
  reg [15:0] Delay1_reg [0:1];  // ufix16 [2]
  wire [15:0] Delay1_reg_next [0:1];  // ufix16 [2]
  wire [15:0] Delay1_out1;  // uint16
  reg [15:0] Delay2_reg [0:1];  // ufix16 [2]
  wire [15:0] Delay2_reg_next [0:1];  // ufix16 [2]
  wire [15:0] Delay2_out1;  // uint16
  reg [15:0] Delay3_reg [0:1];  // ufix16 [2]
  wire [15:0] Delay3_reg_next [0:1];  // ufix16 [2]
  wire [15:0] Delay3_out1;  // uint16
  reg [15:0] Delay4_reg [0:1];  // ufix16 [2]
  wire [15:0] Delay4_reg_next [0:1];  // ufix16 [2]
  wire [15:0] Delay4_out1;  // uint16
  reg [15:0] Delay5_reg [0:1];  // ufix16 [2]
  wire [15:0] Delay5_reg_next [0:1];  // ufix16 [2]
  wire [15:0] Delay5_out1;  // uint16
  reg [15:0] Delay6_reg [0:1];  // ufix16 [2]
  wire [15:0] Delay6_reg_next [0:1];  // ufix16 [2]
  wire [15:0] Delay6_out1;  // uint16


  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_reg[0] <= 16'b0000000000000000;
        Delay_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_reg[0] <= Delay_reg_next[0];
          Delay_reg[1] <= Delay_reg_next[1];
        end
      end
    end

  assign Delay_out1 = Delay_reg[1];
  assign Delay_reg_next[0] = current_sample;
  assign Delay_reg_next[1] = Delay_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_reg[0] <= 16'b0000000000000000;
        Delay1_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= Delay1_reg_next[0];
          Delay1_reg[1] <= Delay1_reg_next[1];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[1];
  assign Delay1_reg_next[0] = Delay_out1;
  assign Delay1_reg_next[1] = Delay1_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_reg[0] <= 16'b0000000000000000;
        Delay2_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_reg[0] <= Delay2_reg_next[0];
          Delay2_reg[1] <= Delay2_reg_next[1];
        end
      end
    end

  assign Delay2_out1 = Delay2_reg[1];
  assign Delay2_reg_next[0] = Delay1_out1;
  assign Delay2_reg_next[1] = Delay2_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_reg[0] <= 16'b0000000000000000;
        Delay3_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_reg[0] <= Delay3_reg_next[0];
          Delay3_reg[1] <= Delay3_reg_next[1];
        end
      end
    end

  assign Delay3_out1 = Delay3_reg[1];
  assign Delay3_reg_next[0] = Delay2_out1;
  assign Delay3_reg_next[1] = Delay3_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_reg[0] <= 16'b0000000000000000;
        Delay4_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_reg[0] <= Delay4_reg_next[0];
          Delay4_reg[1] <= Delay4_reg_next[1];
        end
      end
    end

  assign Delay4_out1 = Delay4_reg[1];
  assign Delay4_reg_next[0] = Delay3_out1;
  assign Delay4_reg_next[1] = Delay4_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_reg[0] <= 16'b0000000000000000;
        Delay5_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_reg[0] <= Delay5_reg_next[0];
          Delay5_reg[1] <= Delay5_reg_next[1];
        end
      end
    end

  assign Delay5_out1 = Delay5_reg[1];
  assign Delay5_reg_next[0] = Delay4_out1;
  assign Delay5_reg_next[1] = Delay5_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_reg[0] <= 16'b0000000000000000;
        Delay6_reg[1] <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_reg[0] <= Delay6_reg_next[0];
          Delay6_reg[1] <= Delay6_reg_next[1];
        end
      end
    end

  assign Delay6_out1 = Delay6_reg[1];
  assign Delay6_reg_next[0] = Delay5_out1;
  assign Delay6_reg_next[1] = Delay6_reg[0];



  assign Out1_0 = Delay6_out1;

  assign Out1_1 = Delay5_out1;

  assign Out1_2 = Delay4_out1;

  assign Out1_3 = Delay3_out1;

  assign Out1_4 = Delay2_out1;

  assign Out1_5 = Delay1_out1;

  assign Out1_6 = Delay_out1;

  assign Out1_7 = current_sample;

endmodule  // data_stream_concat

