// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v21\spike_detection.v
// Created: 2021-10-18 17:44:13
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: spike_detection
// Source Path: CustArch_v21/cust_architecture/process_and_retrieve/spike_detection
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module spike_detection
          (clk,
           reset,
           enb_1_2_0,
           filter_output,
           rd_addr,
           wr_en_filt,
           write_porcessing_addr_read_from_storage_addr_4,
           spike);


  input   clk;
  input   reset;
  input   enb_1_2_0;
  input   [15:0] filter_output;  // uint16
  input   [8:0] rd_addr;  // ufix9
  input   wr_en_filt;
  input   [8:0] write_porcessing_addr_read_from_storage_addr_4;  // ufix9
  output  [15:0] spike;  // uint16


  wire LocalMaxima_out1;
  wire refractory_period_out1;
  wire Logical_Operator_out1;
  wire [15:0] refractory_period_out2;  // uint16
  reg [15:0] Rate_Transition4_out1;  // uint16

  // spike detected with one sample of delay
  // due to the local maxima check which needs
  // current sample, t-1 and t-2
  // 
  // introduced delay = 1/dataclk


  LocalMaxima u_LocalMaxima (.clk(clk),
                             .reset(reset),
                             .enb_1_2_0(enb_1_2_0),
                             .filter_output(filter_output),  // uint16
                             .wr_en_filt(wr_en_filt),
                             .write_porcessing_addr_read_from_storage_addr_1(write_porcessing_addr_read_from_storage_addr_4),  // ufix9
                             .local_maxima_out(LocalMaxima_out1)
                             );

  assign Logical_Operator_out1 = LocalMaxima_out1 & refractory_period_out1;



  refractory_period u_refractory_period (.clk(clk),
                                         .reset(reset),
                                         .enb_1_2_0(enb_1_2_0),
                                         .wr_en_filt(wr_en_filt),
                                         .wr_en(Logical_Operator_out1),
                                         .write_porcessing_addr_read_from_storage_addr_4(write_porcessing_addr_read_from_storage_addr_4),  // ufix9
                                         .rd_addr(rd_addr),  // ufix9
                                         .refractory_check(refractory_period_out1),
                                         .spike(refractory_period_out2)  // uint16
                                         );

  always @(posedge clk or posedge reset)
    begin : Rate_Transition4_process
      if (reset == 1'b1) begin
        Rate_Transition4_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          Rate_Transition4_out1 <= refractory_period_out2;
        end
      end
    end



  assign spike = Rate_Transition4_out1;

endmodule  // spike_detection

