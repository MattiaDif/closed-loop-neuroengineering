// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v16\FilterChip1.v
// Created: 2021-06-21 17:49:55
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: FilterChip1
// Source Path: CustArch_v16/cust_architecture/process_and_retrieve/FilterChip1
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module FilterChip1
          (clk,
           reset,
           enb,
           current_value,
           filter_enable,
           address_for_processing,
           filtered_data_0,
           filtered_data_1,
           filtered_data_2);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] current_value;  // uint16
  input   filter_enable;
  input   [8:0] address_for_processing;  // ufix9
  output  [15:0] filtered_data_0;  // uint16
  output  [15:0] filtered_data_1;  // uint16
  output  [15:0] filtered_data_2;  // uint16


  reg  filter_enable_1;
  wire [15:0] current_value_enable_out1;  // uint16
  wire [8:0] currest_address_enable_out1;  // ufix9
  reg [8:0] Memory5_out1;  // ufix9
  wire signed [31:0] previous_sample;  // sfix32_En7
  wire signed [31:0] PreviousData2_storage_out1;  // sfix32_En7
  wire signed [31:0] previous_sample_1;  // sfix32_En7
  wire [8:0] FIFO_previous_sample_out1;  // ufix9
  wire Detect_Change2_out1;
  wire preovious_change_out1;
  reg  Memory4_out1;
  wire Logical_Operator_out1;
  wire signed [31:0] new_previous_sample;  // sfix32_En7
  reg signed [31:0] Memory3_out1;  // sfix32_En7
  wire signed [31:0] PreviousData1_storage_out1;  // sfix32_En7
  wire [15:0] filter_output;  // uint16
  wire filter_change_out1;
  wire [8:0] FIFO_filter_out1;  // ufix9
  wire [15:0] Data_Type_Conversion_out1;  // uint16
  wire Detect_Change3_out1;
  reg  Memory2_out1;
  wire Logical_Operator1_out1;
  wire [15:0] Data_Type_Conversion1_out1;  // uint16

  // Note: If a read operation occurs simultaneously at the same address 
  // as a write operation, old data appears at the read output port (rd_dout).


  always @(posedge clk or posedge reset)
    begin : reduced_process
      if (reset == 1'b1) begin
        filter_enable_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          filter_enable_1 <= filter_enable;
        end
      end
    end



  current_value_enable u_current_value_enable (.clk(clk),
                                               .reset(reset),
                                               .enb(enb),
                                               .address_for_processing(current_value),  // uint16
                                               .Enable(filter_enable_1),
                                               .current_sample(current_value_enable_out1)  // uint16
                                               );

  currest_address_enable u_currest_address_enable (.clk(clk),
                                                   .reset(reset),
                                                   .enb(enb),
                                                   .address_for_processing(address_for_processing),  // ufix9
                                                   .Enable(filter_enable),
                                                   .Out1(currest_address_enable_out1)  // ufix9
                                                   );

  always @(posedge clk or posedge reset)
    begin : Memory5_process
      if (reset == 1'b1) begin
        Memory5_out1 <= 9'b000000000;
      end
      else begin
        if (enb) begin
          Memory5_out1 <= currest_address_enable_out1;
        end
      end
    end



  DualPortRAM_generic #(.AddrWidth(9),
                        .DataWidth(32)
                        )
                      u_PreviousData2_storage (.clk(clk),
                                               .enb(enb),
                                               .wr_din(previous_sample),
                                               .wr_addr(Memory5_out1),
                                               .wr_en(filter_enable_1),
                                               .rd_addr(currest_address_enable_out1),
                                               .wr_dout(PreviousData2_storage_out1),
                                               .rd_dout(previous_sample_1)
                                               );

  Detect_Change2 u_Detect_Change2 (.clk(clk),
                                   .reset(reset),
                                   .enb(enb),
                                   .U(FIFO_previous_sample_out1),  // ufix9
                                   .Y(Detect_Change2_out1)
                                   );

  always @(posedge clk or posedge reset)
    begin : Memory4_process
      if (reset == 1'b1) begin
        Memory4_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Memory4_out1 <= preovious_change_out1;
        end
      end
    end



  assign Logical_Operator_out1 = Memory4_out1 & Detect_Change2_out1;



  preovious_change u_preovious_change (.clk(clk),
                                       .reset(reset),
                                       .enb(enb),
                                       .U(new_previous_sample),  // sfix32_En7
                                       .Y(preovious_change_out1)
                                       );

  FIFO_previous_sample u_FIFO_previous_sample (.clk(clk),
                                               .reset(reset),
                                               .enb(enb),
                                               .In(currest_address_enable_out1),  // ufix9
                                               .Push(filter_enable),
                                               .Pop(preovious_change_out1),
                                               .Out(FIFO_previous_sample_out1)  // ufix9
                                               );

  always @(posedge clk or posedge reset)
    begin : Memory3_process
      if (reset == 1'b1) begin
        Memory3_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Memory3_out1 <= new_previous_sample;
        end
      end
    end



  DualPortRAM_generic #(.AddrWidth(9),
                        .DataWidth(32)
                        )
                      u_PreviousData1_storage (.clk(clk),
                                               .enb(enb),
                                               .wr_din(Memory3_out1),
                                               .wr_addr(FIFO_previous_sample_out1),
                                               .wr_en(Logical_Operator_out1),
                                               .rd_addr(currest_address_enable_out1),
                                               .wr_dout(PreviousData1_storage_out1),
                                               .rd_dout(previous_sample)
                                               );

  digital_filter u_digital_filter (.current_sample(current_value_enable_out1),  // uint16
                                   .previous_sample_0(previous_sample),  // sfix32_En7
                                   .previous_sample_1(previous_sample_1),  // sfix32_En7
                                   .filter_output(filter_output),  // uint16
                                   .new_previous_sample(new_previous_sample)  // sfix32_En7
                                   );

  assign filtered_data_0 = filter_output;

  filter_change u_filter_change (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .U(filter_output),  // uint16
                                 .Y(filter_change_out1)
                                 );

  FIFO_filter u_FIFO_filter (.clk(clk),
                             .reset(reset),
                             .enb(enb),
                             .In(currest_address_enable_out1),  // ufix9
                             .Push(filter_enable),
                             .Pop(filter_change_out1),
                             .Out(FIFO_filter_out1)  // ufix9
                             );

  assign Data_Type_Conversion_out1 = {7'b0, FIFO_filter_out1};



  assign filtered_data_1 = Data_Type_Conversion_out1;

  Detect_Change3 u_Detect_Change3 (.clk(clk),
                                   .reset(reset),
                                   .enb(enb),
                                   .U(FIFO_filter_out1),  // ufix9
                                   .Y(Detect_Change3_out1)
                                   );

  always @(posedge clk or posedge reset)
    begin : Memory2_process
      if (reset == 1'b1) begin
        Memory2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Memory2_out1 <= filter_change_out1;
        end
      end
    end



  assign Logical_Operator1_out1 = Detect_Change3_out1 & Memory2_out1;



  assign Data_Type_Conversion1_out1 = {15'b0, Logical_Operator1_out1};



  assign filtered_data_2 = Data_Type_Conversion1_out1;

endmodule  // FilterChip1

