// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArchitecture\spike_detection.v
// Created: 2021-10-26 14:22:20
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: spike_detection
// Source Path: CustArchitecture/cust_architecture/spike_detection
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module spike_detection
          (clk,
           reset,
           enb,
           filter_output,
           filter_writing_address,
           filter_writing_enable,
           read_filter_output_or_spike,
           spike);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] filter_output;  // uint16
  input   [8:0] filter_writing_address;  // ufix9
  input   filter_writing_enable;
  input   [8:0] read_filter_output_or_spike;  // ufix9
  output  [15:0] spike;  // uint16


  wire LocalMaxima_out1;
  wire refractory_period_out1;
  wire spike_check_out1;
  wire [15:0] refractory_period_out2;  // uint16


  LocalMaxima u_LocalMaxima (.clk(clk),
                             .reset(reset),
                             .enb(enb),
                             .filter_output(filter_output),  // uint16
                             .filter_writing_enable(filter_writing_enable),
                             .filter_writing_address(filter_writing_address),  // ufix9
                             .detection_check(LocalMaxima_out1)
                             );

  spike_check u_spike_check (.detection_check(LocalMaxima_out1),
                             .refractory_check(refractory_period_out1),
                             .spike_check_1(spike_check_out1)
                             );

  refractory_period u_refractory_period (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .filter_writing_enable(filter_writing_enable),
                                         .spike_check(spike_check_out1),
                                         .filter_writing_address(filter_writing_address),  // ufix9
                                         .read_filter_output_or_spike(read_filter_output_or_spike),  // ufix9
                                         .refractory_check(refractory_period_out1),
                                         .spike(refractory_period_out2)  // uint16
                                         );

  assign spike = refractory_period_out2;

endmodule  // spike_detection

