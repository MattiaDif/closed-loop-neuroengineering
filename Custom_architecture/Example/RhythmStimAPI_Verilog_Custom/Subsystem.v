// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArchitecture\Subsystem.v
// Created: 2021-10-26 14:22:20
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: CustArchitecture/cust_architecture/Butter_1st_HP/Subsystem
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           enb,
           output_data_to_process,
           InputState,
           address_output_data_to_process,
           filter_output,
           filter_writing_address,
           filter_writing_enable);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] output_data_to_process;  // uint16
  input   [7:0] InputState;  // uint8
  input   [8:0] address_output_data_to_process;  // ufix9
  output  [15:0] filter_output;  // uint16
  output  [8:0] filter_writing_address;  // ufix9
  output  filter_writing_enable;


  reg [8:0] write_porcessing_addr_read_from_storage_addr_1;  // ufix9
  reg [7:0] Memory3_out1;  // uint8
  wire read_from_porcessing;
  reg  write_en;
  wire signed [15:0] new_previous_sample;  // sfix16_E3
  wire signed [15:0] PreviousData_storage_out1;  // sfix16_E3
  wire signed [15:0] previous_sample;  // sfix16_E3


  always @(posedge clk or posedge reset)
    begin : Memory5_process
      if (reset == 1'b1) begin
        write_porcessing_addr_read_from_storage_addr_1 <= 9'b000000000;
      end
      else begin
        if (enb) begin
          write_porcessing_addr_read_from_storage_addr_1 <= address_output_data_to_process;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Memory3_process
      if (reset == 1'b1) begin
        Memory3_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Memory3_out1 <= InputState;
        end
      end
    end



  assign read_from_porcessing = Memory3_out1 == 8'b00000111;



  always @(posedge clk or posedge reset)
    begin : Memory2_process
      if (reset == 1'b1) begin
        write_en <= 1'b0;
      end
      else begin
        if (enb) begin
          write_en <= read_from_porcessing;
        end
      end
    end



  DualPortRAM_generic #(.AddrWidth(9),
                        .DataWidth(16)
                        )
                      u_PreviousData_storage (.clk(clk),
                                              .enb(enb),
                                              .wr_din(new_previous_sample),
                                              .wr_addr(write_porcessing_addr_read_from_storage_addr_1),
                                              .wr_en(write_en),
                                              .rd_addr(address_output_data_to_process),
                                              .wr_dout(PreviousData_storage_out1),
                                              .rd_dout(previous_sample)
                                              );

  one_pole_IIR u_one_pole_IIR (.output_data_to_process(output_data_to_process),  // uint16
                               .previous_sample(previous_sample),  // sfix16_E3
                               .filter_output(filter_output),  // uint16
                               .new_previous_sample(new_previous_sample)  // sfix16_E3
                               );

  assign filter_writing_address = write_porcessing_addr_read_from_storage_addr_1;

  assign filter_writing_enable = write_en;

endmodule  // Subsystem

