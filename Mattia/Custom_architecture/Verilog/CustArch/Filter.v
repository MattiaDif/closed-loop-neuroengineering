// -------------------------------------------------------------
// 
// File Name: C:\GitHub\closed-loop-neuroscience\Mattia\Custom_architecture\Verilog\CustArch\Filter.v
// Created: 2021-03-29 11:16:01
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Filter
// Source Path: CustArch/cust_architecture/process_and_retrieve/80-120Hz IIR/Filter
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Filter
          (clk,
           reset,
           enb,
           In,
           Trigger_emulated,
           Out);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] In;  // sfix16_En15
  input   Trigger_emulated;
  output  signed [15:0] Out;  // sfix16_En11


  wire signed [15:0] scaleconst1;  // sfix16_En22
  wire signed [31:0] multiplier_mul_temp;  // sfix32_En37
  wire signed [35:0] scale1;  // sfix36_En37
  wire signed [15:0] scaletypeconvert1;  // sfix16_En17
  wire signed [39:0] inputconv1;  // sfix40_En29
  wire enb_gated;
  wire signed [15:0] coeff_a2_section1;  // sfix16_En14
  wire enb_gated_1;
  wire signed [15:0] coeff_a3_section1;  // sfix16_En14
  reg signed [15:0] typeconvert1_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert1_tap1;  // sfix16_En15
  wire signed [31:0] a3mul1;  // sfix32_En29
  wire signed [39:0] a1sum1_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert1;  // sfix16_En15
  wire signed [31:0] a2mul1;  // sfix32_En29
  wire signed [39:0] a2sum1_cast2;  // sfix40_En29
  wire signed [40:0] Sub_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum1_temp;  // sfix41_En29
  wire signed [39:0] a2sum1;  // sfix40_En29
  wire signed [40:0] Sub1_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub1_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum1_temp;  // sfix41_En29
  wire signed [39:0] a1sum1;  // sfix40_En29
  wire signed [31:0] b1mul1;  // sfix32_En29
  wire signed [39:0] b1multypeconvert1;  // sfix40_En29
  wire signed [16:0] gain1_cast;  // sfix17_En15
  wire signed [16:0] gain1_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul1;  // sfix32_En29
  wire signed [39:0] adder_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum1;  // sfix40_En29
  wire signed [15:0] section_result1;  // sfix16_En11
  wire signed [15:0] scaleconst2;  // sfix16_En22
  wire signed [31:0] multiplier3_mul_temp;  // sfix32_En33
  wire signed [35:0] scale2;  // sfix36_En37
  wire signed [15:0] scaletypeconvert2;  // sfix16_En17
  wire signed [39:0] inputconv2;  // sfix40_En29
  wire enb_gated_2;
  wire signed [15:0] coeff_a2_section2;  // sfix16_En14
  wire enb_gated_3;
  wire signed [15:0] coeff_a3_section2;  // sfix16_En14
  reg signed [15:0] typeconvert2_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert2_tap1;  // sfix16_En15
  wire signed [31:0] a3mul2;  // sfix32_En29
  wire signed [39:0] a1sum2_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert2;  // sfix16_En15
  wire signed [31:0] a2mul2;  // sfix32_En29
  wire signed [39:0] a2sum2_cast2;  // sfix40_En29
  wire signed [40:0] Sub2_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub2_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum2_temp;  // sfix41_En29
  wire signed [39:0] a2sum2;  // sfix40_En29
  wire signed [40:0] Sub3_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub3_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum2_temp;  // sfix41_En29
  wire signed [39:0] a1sum2;  // sfix40_En29
  wire signed [31:0] b1mul2;  // sfix32_En29
  wire signed [39:0] b1multypeconvert2;  // sfix40_En29
  wire signed [16:0] gain3_cast;  // sfix17_En15
  wire signed [16:0] gain3_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul2;  // sfix32_En29
  wire signed [39:0] adder1_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum2;  // sfix40_En29
  wire signed [15:0] section_result2;  // sfix16_En11
  wire signed [15:0] scaleconst3;  // sfix16_En22
  wire signed [31:0] multiplier6_mul_temp;  // sfix32_En33
  wire signed [35:0] scale3;  // sfix36_En37
  wire signed [15:0] scaletypeconvert3;  // sfix16_En17
  wire signed [39:0] inputconv3;  // sfix40_En29
  wire enb_gated_4;
  wire signed [15:0] coeff_a2_section3;  // sfix16_En14
  wire enb_gated_5;
  wire signed [15:0] coeff_a3_section3;  // sfix16_En14
  reg signed [15:0] typeconvert3_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert3_tap1;  // sfix16_En15
  wire signed [31:0] a3mul3;  // sfix32_En29
  wire signed [39:0] a1sum3_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert3;  // sfix16_En15
  wire signed [31:0] a2mul3;  // sfix32_En29
  wire signed [39:0] a2sum3_cast2;  // sfix40_En29
  wire signed [40:0] Sub4_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub4_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum3_temp;  // sfix41_En29
  wire signed [39:0] a2sum3;  // sfix40_En29
  wire signed [40:0] Sub5_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub5_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum3_temp;  // sfix41_En29
  wire signed [39:0] a1sum3;  // sfix40_En29
  wire signed [31:0] b1mul3;  // sfix32_En29
  wire signed [39:0] b1multypeconvert3;  // sfix40_En29
  wire signed [16:0] gain5_cast;  // sfix17_En15
  wire signed [16:0] gain5_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul3;  // sfix32_En29
  wire signed [39:0] adder2_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum3;  // sfix40_En29
  wire signed [15:0] section_result3;  // sfix16_En11
  wire signed [15:0] scaleconst4;  // sfix16_En22
  wire signed [31:0] multiplier9_mul_temp;  // sfix32_En33
  wire signed [35:0] scale4;  // sfix36_En37
  wire signed [15:0] scaletypeconvert4;  // sfix16_En17
  wire signed [39:0] inputconv4;  // sfix40_En29
  wire enb_gated_6;
  wire signed [15:0] coeff_a2_section4;  // sfix16_En14
  wire enb_gated_7;
  wire signed [15:0] coeff_a3_section4;  // sfix16_En14
  reg signed [15:0] typeconvert4_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert4_tap1;  // sfix16_En15
  wire signed [31:0] a3mul4;  // sfix32_En29
  wire signed [39:0] a1sum4_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert4;  // sfix16_En15
  wire signed [31:0] a2mul4;  // sfix32_En29
  wire signed [39:0] a2sum4_cast2;  // sfix40_En29
  wire signed [40:0] Sub6_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub6_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum4_temp;  // sfix41_En29
  wire signed [39:0] a2sum4;  // sfix40_En29
  wire signed [40:0] Sub7_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub7_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum4_temp;  // sfix41_En29
  wire signed [39:0] a1sum4;  // sfix40_En29
  wire signed [31:0] b1mul4;  // sfix32_En29
  wire signed [39:0] b1multypeconvert4;  // sfix40_En29
  wire signed [16:0] gain7_cast;  // sfix17_En15
  wire signed [16:0] gain7_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul4;  // sfix32_En29
  wire signed [39:0] adder3_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum4;  // sfix40_En29
  wire signed [15:0] section_result4;  // sfix16_En11
  wire signed [15:0] scaleconst5;  // sfix16_En22
  wire signed [31:0] multiplier12_mul_temp;  // sfix32_En33
  wire signed [35:0] scale5;  // sfix36_En37
  wire signed [15:0] scaletypeconvert5;  // sfix16_En17
  wire signed [39:0] inputconv5;  // sfix40_En29
  wire enb_gated_8;
  wire signed [15:0] coeff_a2_section5;  // sfix16_En14
  wire enb_gated_9;
  wire signed [15:0] coeff_a3_section5;  // sfix16_En14
  reg signed [15:0] typeconvert5_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert5_tap1;  // sfix16_En15
  wire signed [31:0] a3mul5;  // sfix32_En29
  wire signed [39:0] a1sum5_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert5;  // sfix16_En15
  wire signed [31:0] a2mul5;  // sfix32_En29
  wire signed [39:0] a2sum5_cast2;  // sfix40_En29
  wire signed [40:0] Sub8_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub8_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum5_temp;  // sfix41_En29
  wire signed [39:0] a2sum5;  // sfix40_En29
  wire signed [40:0] Sub9_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub9_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum5_temp;  // sfix41_En29
  wire signed [39:0] a1sum5;  // sfix40_En29
  wire signed [31:0] b1mul5;  // sfix32_En29
  wire signed [39:0] b1multypeconvert5;  // sfix40_En29
  wire signed [16:0] gain9_cast;  // sfix17_En15
  wire signed [16:0] gain9_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul5;  // sfix32_En29
  wire signed [39:0] adder4_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum5;  // sfix40_En29
  wire signed [15:0] section_result5;  // sfix16_En11
  wire signed [15:0] scaleconst6;  // sfix16_En22
  wire signed [31:0] multiplier15_mul_temp;  // sfix32_En33
  wire signed [35:0] scale6;  // sfix36_En37
  wire signed [15:0] scaletypeconvert6;  // sfix16_En17
  wire signed [39:0] inputconv6;  // sfix40_En29
  wire enb_gated_10;
  wire signed [15:0] coeff_a2_section6;  // sfix16_En14
  wire enb_gated_11;
  wire signed [15:0] coeff_a3_section6;  // sfix16_En14
  reg signed [15:0] typeconvert6_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert6_tap1;  // sfix16_En15
  wire signed [31:0] a3mul6;  // sfix32_En29
  wire signed [39:0] a1sum6_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert6;  // sfix16_En15
  wire signed [31:0] a2mul6;  // sfix32_En29
  wire signed [39:0] a2sum6_cast2;  // sfix40_En29
  wire signed [40:0] Sub10_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub10_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum6_temp;  // sfix41_En29
  wire signed [39:0] a2sum6;  // sfix40_En29
  wire signed [40:0] Sub11_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub11_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum6_temp;  // sfix41_En29
  wire signed [39:0] a1sum6;  // sfix40_En29
  wire signed [31:0] b1mul6;  // sfix32_En29
  wire signed [39:0] b1multypeconvert6;  // sfix40_En29
  wire signed [16:0] gain11_cast;  // sfix17_En15
  wire signed [16:0] gain11_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul6;  // sfix32_En29
  wire signed [39:0] adder5_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum6;  // sfix40_En29
  wire signed [15:0] section_result6;  // sfix16_En11
  wire signed [15:0] scaleconst7;  // sfix16_En22
  wire signed [31:0] multiplier18_mul_temp;  // sfix32_En33
  wire signed [35:0] scale7;  // sfix36_En37
  wire signed [15:0] scaletypeconvert7;  // sfix16_En17
  wire signed [39:0] inputconv7;  // sfix40_En29
  wire enb_gated_12;
  wire signed [15:0] coeff_a2_section7;  // sfix16_En14
  wire enb_gated_13;
  wire signed [15:0] coeff_a3_section7;  // sfix16_En14
  reg signed [15:0] typeconvert7_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert7_tap1;  // sfix16_En15
  wire signed [31:0] a3mul7;  // sfix32_En29
  wire signed [39:0] a1sum7_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert7;  // sfix16_En15
  wire signed [31:0] a2mul7;  // sfix32_En29
  wire signed [39:0] a2sum7_cast2;  // sfix40_En29
  wire signed [40:0] Sub12_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub12_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum7_temp;  // sfix41_En29
  wire signed [39:0] a2sum7;  // sfix40_En29
  wire signed [40:0] Sub13_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub13_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum7_temp;  // sfix41_En29
  wire signed [39:0] a1sum7;  // sfix40_En29
  wire signed [31:0] b1mul7;  // sfix32_En29
  wire signed [39:0] b1multypeconvert7;  // sfix40_En29
  wire signed [16:0] gain13_cast;  // sfix17_En15
  wire signed [16:0] gain13_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul7;  // sfix32_En29
  wire signed [39:0] adder6_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum7;  // sfix40_En29
  wire signed [15:0] section_result7;  // sfix16_En11
  wire signed [15:0] scaleconst8;  // sfix16_En22
  wire signed [31:0] multiplier21_mul_temp;  // sfix32_En33
  wire signed [35:0] scale8;  // sfix36_En37
  wire signed [15:0] scaletypeconvert8;  // sfix16_En17
  wire signed [39:0] inputconv8;  // sfix40_En29
  wire enb_gated_14;
  wire signed [15:0] coeff_a2_section8;  // sfix16_En14
  wire enb_gated_15;
  wire signed [15:0] coeff_a3_section8;  // sfix16_En14
  reg signed [15:0] typeconvert8_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert8_tap1;  // sfix16_En15
  wire signed [31:0] a3mul8;  // sfix32_En29
  wire signed [39:0] a1sum8_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert8;  // sfix16_En15
  wire signed [31:0] a2mul8;  // sfix32_En29
  wire signed [39:0] a2sum8_cast2;  // sfix40_En29
  wire signed [40:0] Sub14_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub14_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum8_temp;  // sfix41_En29
  wire signed [39:0] a2sum8;  // sfix40_En29
  wire signed [40:0] Sub15_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub15_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum8_temp;  // sfix41_En29
  wire signed [39:0] a1sum8;  // sfix40_En29
  wire signed [31:0] b1mul8;  // sfix32_En29
  wire signed [39:0] b1multypeconvert8;  // sfix40_En29
  wire signed [16:0] gain15_cast;  // sfix17_En15
  wire signed [16:0] gain15_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul8;  // sfix32_En29
  wire signed [39:0] adder7_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum8;  // sfix40_En29
  wire signed [15:0] section_result8;  // sfix16_En11
  wire signed [15:0] scaleconst9;  // sfix16_En22
  wire signed [31:0] multiplier24_mul_temp;  // sfix32_En33
  wire signed [35:0] scale9;  // sfix36_En37
  wire signed [15:0] scaletypeconvert9;  // sfix16_En17
  wire signed [39:0] inputconv9;  // sfix40_En29
  wire enb_gated_16;
  wire signed [15:0] coeff_a2_section9;  // sfix16_En14
  wire enb_gated_17;
  wire signed [15:0] coeff_a3_section9;  // sfix16_En14
  reg signed [15:0] typeconvert9_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert9_tap1;  // sfix16_En15
  wire signed [31:0] a3mul9;  // sfix32_En29
  wire signed [39:0] a1sum9_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert9;  // sfix16_En15
  wire signed [31:0] a2mul9;  // sfix32_En29
  wire signed [39:0] a2sum9_cast2;  // sfix40_En29
  wire signed [40:0] Sub16_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub16_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum9_temp;  // sfix41_En29
  wire signed [39:0] a2sum9;  // sfix40_En29
  wire signed [40:0] Sub17_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub17_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum9_temp;  // sfix41_En29
  wire signed [39:0] a1sum9;  // sfix40_En29
  wire signed [31:0] b1mul9;  // sfix32_En29
  wire signed [39:0] b1multypeconvert9;  // sfix40_En29
  wire signed [16:0] gain17_cast;  // sfix17_En15
  wire signed [16:0] gain17_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul9;  // sfix32_En29
  wire signed [39:0] adder8_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum9;  // sfix40_En29
  wire signed [15:0] section_result9;  // sfix16_En11
  wire signed [15:0] scaleconst10;  // sfix16_En22
  wire signed [31:0] multiplier27_mul_temp;  // sfix32_En33
  wire signed [35:0] scale10;  // sfix36_En37
  wire signed [15:0] scaletypeconvert10;  // sfix16_En17
  wire signed [39:0] inputconv10;  // sfix40_En29
  wire enb_gated_18;
  wire signed [15:0] coeff_a2_section10;  // sfix16_En14
  wire enb_gated_19;
  wire signed [15:0] coeff_a3_section10;  // sfix16_En14
  reg signed [15:0] typeconvert10_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert10_tap1;  // sfix16_En15
  wire signed [31:0] a3mul10;  // sfix32_En29
  wire signed [39:0] a1sum10_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert10;  // sfix16_En15
  wire signed [31:0] a2mul10;  // sfix32_En29
  wire signed [39:0] a2sum10_cast2;  // sfix40_En29
  wire signed [40:0] Sub18_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub18_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum10_temp;  // sfix41_En29
  wire signed [39:0] a2sum10;  // sfix40_En29
  wire signed [40:0] Sub19_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub19_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum10_temp;  // sfix41_En29
  wire signed [39:0] a1sum10;  // sfix40_En29
  wire signed [31:0] b1mul10;  // sfix32_En29
  wire signed [39:0] b1multypeconvert10;  // sfix40_En29
  wire signed [16:0] gain19_cast;  // sfix17_En15
  wire signed [16:0] gain19_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul10;  // sfix32_En29
  wire signed [39:0] adder9_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum10;  // sfix40_En29
  wire signed [15:0] section_result10;  // sfix16_En11
  wire signed [15:0] scaleconst11;  // sfix16_En22
  wire signed [31:0] multiplier30_mul_temp;  // sfix32_En33
  wire signed [35:0] scale11;  // sfix36_En37
  wire signed [15:0] scaletypeconvert11;  // sfix16_En17
  wire signed [39:0] inputconv11;  // sfix40_En29
  wire enb_gated_20;
  wire signed [15:0] coeff_a2_section11;  // sfix16_En14
  wire enb_gated_21;
  wire signed [15:0] coeff_a3_section11;  // sfix16_En14
  reg signed [15:0] typeconvert11_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert11_tap1;  // sfix16_En15
  wire signed [31:0] a3mul11;  // sfix32_En29
  wire signed [39:0] a1sum11_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert11;  // sfix16_En15
  wire signed [31:0] a2mul11;  // sfix32_En29
  wire signed [39:0] a2sum11_cast2;  // sfix40_En29
  wire signed [40:0] Sub20_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub20_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum11_temp;  // sfix41_En29
  wire signed [39:0] a2sum11;  // sfix40_En29
  wire signed [40:0] Sub21_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub21_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum11_temp;  // sfix41_En29
  wire signed [39:0] a1sum11;  // sfix40_En29
  wire signed [31:0] b1mul11;  // sfix32_En29
  wire signed [39:0] b1multypeconvert11;  // sfix40_En29
  wire signed [16:0] gain21_cast;  // sfix17_En15
  wire signed [16:0] gain21_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul11;  // sfix32_En29
  wire signed [39:0] adder10_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum11;  // sfix40_En29
  wire signed [15:0] section_result11;  // sfix16_En11
  wire signed [15:0] scaleconst12;  // sfix16_En22
  wire signed [31:0] multiplier33_mul_temp;  // sfix32_En33
  wire signed [35:0] scale12;  // sfix36_En37
  wire signed [15:0] scaletypeconvert12;  // sfix16_En17
  wire signed [39:0] inputconv12;  // sfix40_En29
  wire enb_gated_22;
  wire signed [15:0] coeff_a2_section12;  // sfix16_En14
  wire enb_gated_23;
  wire signed [15:0] coeff_a3_section12;  // sfix16_En14
  reg signed [15:0] typeconvert12_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert12_tap1;  // sfix16_En15
  wire signed [31:0] a3mul12;  // sfix32_En29
  wire signed [39:0] a1sum12_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert12;  // sfix16_En15
  wire signed [31:0] a2mul12;  // sfix32_En29
  wire signed [39:0] a2sum12_cast2;  // sfix40_En29
  wire signed [40:0] Sub22_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub22_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum12_temp;  // sfix41_En29
  wire signed [39:0] a2sum12;  // sfix40_En29
  wire signed [40:0] Sub23_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub23_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum12_temp;  // sfix41_En29
  wire signed [39:0] a1sum12;  // sfix40_En29
  wire signed [31:0] b1mul12;  // sfix32_En29
  wire signed [39:0] b1multypeconvert12;  // sfix40_En29
  wire signed [16:0] gain23_cast;  // sfix17_En15
  wire signed [16:0] gain23_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul12;  // sfix32_En29
  wire signed [39:0] adder11_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum12;  // sfix40_En29
  wire signed [15:0] section_result12;  // sfix16_En11
  wire signed [15:0] scaleconst13;  // sfix16_En22
  wire signed [31:0] multiplier36_mul_temp;  // sfix32_En33
  wire signed [35:0] scale13;  // sfix36_En37
  wire signed [15:0] scaletypeconvert13;  // sfix16_En17
  wire signed [39:0] inputconv13;  // sfix40_En29
  wire enb_gated_24;
  wire signed [15:0] coeff_a2_section13;  // sfix16_En14
  wire enb_gated_25;
  wire signed [15:0] coeff_a3_section13;  // sfix16_En14
  reg signed [15:0] typeconvert13_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert13_tap1;  // sfix16_En15
  wire signed [31:0] a3mul13;  // sfix32_En29
  wire signed [39:0] a1sum13_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert13;  // sfix16_En15
  wire signed [31:0] a2mul13;  // sfix32_En29
  wire signed [39:0] a2sum13_cast2;  // sfix40_En29
  wire signed [40:0] Sub24_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub24_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum13_temp;  // sfix41_En29
  wire signed [39:0] a2sum13;  // sfix40_En29
  wire signed [40:0] Sub25_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub25_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum13_temp;  // sfix41_En29
  wire signed [39:0] a1sum13;  // sfix40_En29
  wire signed [31:0] b1mul13;  // sfix32_En29
  wire signed [39:0] b1multypeconvert13;  // sfix40_En29
  wire signed [16:0] gain25_cast;  // sfix17_En15
  wire signed [16:0] gain25_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul13;  // sfix32_En29
  wire signed [39:0] adder12_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum13;  // sfix40_En29
  wire signed [15:0] section_result13;  // sfix16_En11
  wire signed [15:0] scaleconst14;  // sfix16_En22
  wire signed [31:0] multiplier39_mul_temp;  // sfix32_En33
  wire signed [35:0] scale14;  // sfix36_En37
  wire signed [15:0] scaletypeconvert14;  // sfix16_En17
  wire signed [39:0] inputconv14;  // sfix40_En29
  wire enb_gated_26;
  wire signed [15:0] coeff_a2_section14;  // sfix16_En14
  wire enb_gated_27;
  wire signed [15:0] coeff_a3_section14;  // sfix16_En14
  reg signed [15:0] typeconvert14_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert14_tap1;  // sfix16_En15
  wire signed [31:0] a3mul14;  // sfix32_En29
  wire signed [39:0] a1sum14_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert14;  // sfix16_En15
  wire signed [31:0] a2mul14;  // sfix32_En29
  wire signed [39:0] a2sum14_cast2;  // sfix40_En29
  wire signed [40:0] Sub26_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub26_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum14_temp;  // sfix41_En29
  wire signed [39:0] a2sum14;  // sfix40_En29
  wire signed [40:0] Sub27_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub27_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum14_temp;  // sfix41_En29
  wire signed [39:0] a1sum14;  // sfix40_En29
  wire signed [31:0] b1mul14;  // sfix32_En29
  wire signed [39:0] b1multypeconvert14;  // sfix40_En29
  wire signed [16:0] gain27_cast;  // sfix17_En15
  wire signed [16:0] gain27_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul14;  // sfix32_En29
  wire signed [39:0] adder13_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum14;  // sfix40_En29
  wire signed [15:0] section_result14;  // sfix16_En11
  wire signed [15:0] scaleconst15;  // sfix16_En22
  wire signed [31:0] multiplier42_mul_temp;  // sfix32_En33
  wire signed [35:0] scale15;  // sfix36_En37
  wire signed [15:0] scaletypeconvert15;  // sfix16_En17
  wire signed [39:0] inputconv15;  // sfix40_En29
  wire enb_gated_28;
  wire signed [15:0] coeff_a2_section15;  // sfix16_En14
  wire enb_gated_29;
  wire signed [15:0] coeff_a3_section15;  // sfix16_En14
  reg signed [15:0] typeconvert15_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert15_tap1;  // sfix16_En15
  wire signed [31:0] a3mul15;  // sfix32_En29
  wire signed [39:0] a1sum15_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert15;  // sfix16_En15
  wire signed [31:0] a2mul15;  // sfix32_En29
  wire signed [39:0] a2sum15_cast2;  // sfix40_En29
  wire signed [40:0] Sub28_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub28_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum15_temp;  // sfix41_En29
  wire signed [39:0] a2sum15;  // sfix40_En29
  wire signed [40:0] Sub29_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub29_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum15_temp;  // sfix41_En29
  wire signed [39:0] a1sum15;  // sfix40_En29
  wire signed [31:0] b1mul15;  // sfix32_En29
  wire signed [39:0] b1multypeconvert15;  // sfix40_En29
  wire signed [16:0] gain29_cast;  // sfix17_En15
  wire signed [16:0] gain29_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul15;  // sfix32_En29
  wire signed [39:0] adder14_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum15;  // sfix40_En29
  wire signed [15:0] section_result15;  // sfix16_En11
  wire signed [15:0] scaleconst16;  // sfix16_En22
  wire signed [31:0] multiplier45_mul_temp;  // sfix32_En33
  wire signed [35:0] scale16;  // sfix36_En37
  wire signed [15:0] scaletypeconvert16;  // sfix16_En17
  wire signed [39:0] inputconv16;  // sfix40_En29
  wire enb_gated_30;
  wire signed [15:0] coeff_a2_section16;  // sfix16_En14
  wire enb_gated_31;
  wire signed [15:0] coeff_a3_section16;  // sfix16_En14
  reg signed [15:0] typeconvert16_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert16_tap1;  // sfix16_En15
  wire signed [31:0] a3mul16;  // sfix32_En29
  wire signed [39:0] a1sum16_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert16;  // sfix16_En15
  wire signed [31:0] a2mul16;  // sfix32_En29
  wire signed [39:0] a2sum16_cast2;  // sfix40_En29
  wire signed [40:0] Sub30_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub30_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum16_temp;  // sfix41_En29
  wire signed [39:0] a2sum16;  // sfix40_En29
  wire signed [40:0] Sub31_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub31_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum16_temp;  // sfix41_En29
  wire signed [39:0] a1sum16;  // sfix40_En29
  wire signed [31:0] b1mul16;  // sfix32_En29
  wire signed [39:0] b1multypeconvert16;  // sfix40_En29
  wire signed [16:0] gain31_cast;  // sfix17_En15
  wire signed [16:0] gain31_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul16;  // sfix32_En29
  wire signed [39:0] adder15_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum16;  // sfix40_En29
  wire signed [15:0] section_result16;  // sfix16_En11
  wire signed [15:0] scaleconst17;  // sfix16_En22
  wire signed [31:0] multiplier48_mul_temp;  // sfix32_En33
  wire signed [35:0] scale17;  // sfix36_En37
  wire signed [15:0] scaletypeconvert17;  // sfix16_En17
  wire signed [39:0] inputconv17;  // sfix40_En29
  wire enb_gated_32;
  wire signed [15:0] coeff_a2_section17;  // sfix16_En14
  wire enb_gated_33;
  wire signed [15:0] coeff_a3_section17;  // sfix16_En14
  reg signed [15:0] typeconvert17_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert17_tap1;  // sfix16_En15
  wire signed [31:0] a3mul17;  // sfix32_En29
  wire signed [39:0] a1sum17_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert17;  // sfix16_En15
  wire signed [31:0] a2mul17;  // sfix32_En29
  wire signed [39:0] a2sum17_cast2;  // sfix40_En29
  wire signed [40:0] Sub32_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub32_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum17_temp;  // sfix41_En29
  wire signed [39:0] a2sum17;  // sfix40_En29
  wire signed [40:0] Sub33_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub33_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum17_temp;  // sfix41_En29
  wire signed [39:0] a1sum17;  // sfix40_En29
  wire signed [31:0] b1mul17;  // sfix32_En29
  wire signed [39:0] b1multypeconvert17;  // sfix40_En29
  wire signed [16:0] gain33_cast;  // sfix17_En15
  wire signed [16:0] gain33_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul17;  // sfix32_En29
  wire signed [39:0] adder16_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum17;  // sfix40_En29
  wire signed [15:0] section_result17;  // sfix16_En11
  wire signed [15:0] scaleconst18;  // sfix16_En22
  wire signed [31:0] multiplier51_mul_temp;  // sfix32_En33
  wire signed [35:0] scale18;  // sfix36_En37
  wire signed [15:0] scaletypeconvert18;  // sfix16_En17
  wire signed [39:0] inputconv18;  // sfix40_En29
  wire enb_gated_34;
  wire signed [15:0] coeff_a2_section18;  // sfix16_En14
  wire enb_gated_35;
  wire signed [15:0] coeff_a3_section18;  // sfix16_En14
  reg signed [15:0] typeconvert18_tap0;  // sfix16_En15
  reg signed [15:0] typeconvert18_tap1;  // sfix16_En15
  wire signed [31:0] a3mul18;  // sfix32_En29
  wire signed [39:0] a1sum18_cast2;  // sfix40_En29
  wire signed [15:0] typeconvert18;  // sfix16_En15
  wire signed [31:0] a2mul18;  // sfix32_En29
  wire signed [39:0] a2sum18_cast2;  // sfix40_En29
  wire signed [40:0] Sub34_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub34_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a2sum18_temp;  // sfix41_En29
  wire signed [39:0] a2sum18;  // sfix40_En29
  wire signed [40:0] Sub35_sub_cast;  // sfix41_En29
  wire signed [40:0] Sub35_sub_cast_1;  // sfix41_En29
  wire signed [40:0] a1sum18_temp;  // sfix41_En29
  wire signed [39:0] a1sum18;  // sfix40_En29
  wire signed [31:0] b1mul18;  // sfix32_En29
  wire signed [39:0] b1multypeconvert18;  // sfix40_En29
  wire signed [16:0] gain35_cast;  // sfix17_En15
  wire signed [16:0] gain35_cast_1;  // sfix17_En15
  wire signed [31:0] b3mul18;  // sfix32_En29
  wire signed [39:0] adder17_add_cast;  // sfix40_En29
  wire signed [39:0] b1sum18;  // sfix40_En29
  wire signed [15:0] output_typeconvert;  // sfix16_En11


  assign scaleconst1 = 16'sb0100100101110001;



  assign multiplier_mul_temp = In * scaleconst1;
  assign scale1 = {{4{multiplier_mul_temp[31]}}, multiplier_mul_temp};



  assign scaletypeconvert1 = scale1[35:20] + $signed({1'b0, scale1[19] & (scale1[20] | (|scale1[18:0]))});



  assign inputconv1 = {{12{scaletypeconvert1[15]}}, {scaletypeconvert1, 12'b000000000000}};



  assign enb_gated = Trigger_emulated && enb;

  assign coeff_a2_section1 = 16'sb1000000000011010;



  assign enb_gated_1 = Trigger_emulated && enb;

  assign coeff_a3_section1 = 16'sb0011111111110000;



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap1_process
      if (reset == 1'b1) begin
        typeconvert1_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_1) begin
          typeconvert1_tap1 <= typeconvert1_tap0;
        end
      end
    end



  assign a3mul1 = typeconvert1_tap1 * coeff_a3_section1;



  assign a1sum1_cast2 = {{8{a3mul1[31]}}, a3mul1};



  // coeff_b2_section1
  always @(posedge clk or posedge reset)
    begin : delay_process_section1_tap0_process
      if (reset == 1'b1) begin
        typeconvert1_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated) begin
          typeconvert1_tap0 <= typeconvert1;
        end
      end
    end



  assign a2mul1 = typeconvert1_tap0 * coeff_a2_section1;



  assign a2sum1_cast2 = {{8{a2mul1[31]}}, a2mul1};



  assign Sub_sub_cast = {inputconv1[39], inputconv1};
  assign Sub_sub_cast_1 = {a2sum1_cast2[39], a2sum1_cast2};
  assign a2sum1_temp = Sub_sub_cast - Sub_sub_cast_1;



  assign a2sum1 = a2sum1_temp[39:0];



  assign Sub1_sub_cast = {a2sum1[39], a2sum1};
  assign Sub1_sub_cast_1 = {a1sum1_cast2[39], a1sum1_cast2};
  assign a1sum1_temp = Sub1_sub_cast - Sub1_sub_cast_1;



  assign a1sum1 = a1sum1_temp[39:0];



  assign typeconvert1 = a1sum1[29:14] + $signed({1'b0, a1sum1[13] & (a1sum1[14] | (|a1sum1[12:0]))});



  // coeff_b1_section1
  assign b1mul1 = {{2{typeconvert1[15]}}, {typeconvert1, 14'b00000000000000}};



  assign b1multypeconvert1 = {{8{b1mul1[31]}}, b1mul1};



  // coeff_b3_section1
  assign gain1_cast = {typeconvert1_tap1[15], typeconvert1_tap1};
  assign gain1_cast_1 =  - (gain1_cast);
  assign b3mul1 = {gain1_cast_1[16], {gain1_cast_1, 14'b00000000000000}};



  assign adder_add_cast = {{8{b3mul1[31]}}, b3mul1};
  assign b1sum1 = b1multypeconvert1 + adder_add_cast;



  assign section_result1 = b1sum1[33:18] + $signed({1'b0, b1sum1[17] & (b1sum1[18] | (|b1sum1[16:0]))});



  assign scaleconst2 = 16'sb0100100101110001;



  assign multiplier3_mul_temp = section_result1 * scaleconst2;
  assign scale2 = {multiplier3_mul_temp, 4'b0000};



  assign scaletypeconvert2 = scale2[35:20] + $signed({1'b0, scale2[19] & (scale2[20] | (|scale2[18:0]))});



  assign inputconv2 = {{12{scaletypeconvert2[15]}}, {scaletypeconvert2, 12'b000000000000}};



  assign enb_gated_2 = Trigger_emulated && enb;

  assign coeff_a2_section2 = 16'sb1000000000001111;



  assign enb_gated_3 = Trigger_emulated && enb;

  assign coeff_a3_section2 = 16'sb0011111111110110;



  always @(posedge clk or posedge reset)
    begin : delay_process_section2_tap1_process
      if (reset == 1'b1) begin
        typeconvert2_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_3) begin
          typeconvert2_tap1 <= typeconvert2_tap0;
        end
      end
    end



  assign a3mul2 = typeconvert2_tap1 * coeff_a3_section2;



  assign a1sum2_cast2 = {{8{a3mul2[31]}}, a3mul2};



  // coeff_b2_section2
  always @(posedge clk or posedge reset)
    begin : delay_process_section2_tap0_process
      if (reset == 1'b1) begin
        typeconvert2_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_2) begin
          typeconvert2_tap0 <= typeconvert2;
        end
      end
    end



  assign a2mul2 = typeconvert2_tap0 * coeff_a2_section2;



  assign a2sum2_cast2 = {{8{a2mul2[31]}}, a2mul2};



  assign Sub2_sub_cast = {inputconv2[39], inputconv2};
  assign Sub2_sub_cast_1 = {a2sum2_cast2[39], a2sum2_cast2};
  assign a2sum2_temp = Sub2_sub_cast - Sub2_sub_cast_1;



  assign a2sum2 = a2sum2_temp[39:0];



  assign Sub3_sub_cast = {a2sum2[39], a2sum2};
  assign Sub3_sub_cast_1 = {a1sum2_cast2[39], a1sum2_cast2};
  assign a1sum2_temp = Sub3_sub_cast - Sub3_sub_cast_1;



  assign a1sum2 = a1sum2_temp[39:0];



  assign typeconvert2 = a1sum2[29:14] + $signed({1'b0, a1sum2[13] & (a1sum2[14] | (|a1sum2[12:0]))});



  // coeff_b1_section2
  assign b1mul2 = {{2{typeconvert2[15]}}, {typeconvert2, 14'b00000000000000}};



  assign b1multypeconvert2 = {{8{b1mul2[31]}}, b1mul2};



  // coeff_b3_section2
  assign gain3_cast = {typeconvert2_tap1[15], typeconvert2_tap1};
  assign gain3_cast_1 =  - (gain3_cast);
  assign b3mul2 = {gain3_cast_1[16], {gain3_cast_1, 14'b00000000000000}};



  assign adder1_add_cast = {{8{b3mul2[31]}}, b3mul2};
  assign b1sum2 = b1multypeconvert2 + adder1_add_cast;



  assign section_result2 = b1sum2[33:18] + $signed({1'b0, b1sum2[17] & (b1sum2[18] | (|b1sum2[16:0]))});



  assign scaleconst3 = 16'sb0100100101100010;



  assign multiplier6_mul_temp = section_result2 * scaleconst3;
  assign scale3 = {multiplier6_mul_temp, 4'b0000};



  assign scaletypeconvert3 = scale3[35:20] + $signed({1'b0, scale3[19] & (scale3[20] | (|scale3[18:0]))});



  assign inputconv3 = {{12{scaletypeconvert3[15]}}, {scaletypeconvert3, 12'b000000000000}};



  assign enb_gated_4 = Trigger_emulated && enb;

  assign coeff_a2_section3 = 16'sb1000000000111000;



  assign enb_gated_5 = Trigger_emulated && enb;

  assign coeff_a3_section3 = 16'sb0011111111010010;



  always @(posedge clk or posedge reset)
    begin : delay_process_section3_tap1_process
      if (reset == 1'b1) begin
        typeconvert3_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_5) begin
          typeconvert3_tap1 <= typeconvert3_tap0;
        end
      end
    end



  assign a3mul3 = typeconvert3_tap1 * coeff_a3_section3;



  assign a1sum3_cast2 = {{8{a3mul3[31]}}, a3mul3};



  // coeff_b2_section3
  always @(posedge clk or posedge reset)
    begin : delay_process_section3_tap0_process
      if (reset == 1'b1) begin
        typeconvert3_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_4) begin
          typeconvert3_tap0 <= typeconvert3;
        end
      end
    end



  assign a2mul3 = typeconvert3_tap0 * coeff_a2_section3;



  assign a2sum3_cast2 = {{8{a2mul3[31]}}, a2mul3};



  assign Sub4_sub_cast = {inputconv3[39], inputconv3};
  assign Sub4_sub_cast_1 = {a2sum3_cast2[39], a2sum3_cast2};
  assign a2sum3_temp = Sub4_sub_cast - Sub4_sub_cast_1;



  assign a2sum3 = a2sum3_temp[39:0];



  assign Sub5_sub_cast = {a2sum3[39], a2sum3};
  assign Sub5_sub_cast_1 = {a1sum3_cast2[39], a1sum3_cast2};
  assign a1sum3_temp = Sub5_sub_cast - Sub5_sub_cast_1;



  assign a1sum3 = a1sum3_temp[39:0];



  assign typeconvert3 = a1sum3[29:14] + $signed({1'b0, a1sum3[13] & (a1sum3[14] | (|a1sum3[12:0]))});



  // coeff_b1_section3
  assign b1mul3 = {{2{typeconvert3[15]}}, {typeconvert3, 14'b00000000000000}};



  assign b1multypeconvert3 = {{8{b1mul3[31]}}, b1mul3};



  // coeff_b3_section3
  assign gain5_cast = {typeconvert3_tap1[15], typeconvert3_tap1};
  assign gain5_cast_1 =  - (gain5_cast);
  assign b3mul3 = {gain5_cast_1[16], {gain5_cast_1, 14'b00000000000000}};



  assign adder2_add_cast = {{8{b3mul3[31]}}, b3mul3};
  assign b1sum3 = b1multypeconvert3 + adder2_add_cast;



  assign section_result3 = b1sum3[33:18] + $signed({1'b0, b1sum3[17] & (b1sum3[18] | (|b1sum3[16:0]))});



  assign scaleconst4 = 16'sb0100100101100010;



  assign multiplier9_mul_temp = section_result3 * scaleconst4;
  assign scale4 = {multiplier9_mul_temp, 4'b0000};



  assign scaletypeconvert4 = scale4[35:20] + $signed({1'b0, scale4[19] & (scale4[20] | (|scale4[18:0]))});



  assign inputconv4 = {{12{scaletypeconvert4[15]}}, {scaletypeconvert4, 12'b000000000000}};



  assign enb_gated_6 = Trigger_emulated && enb;

  assign coeff_a2_section4 = 16'sb1000000000100011;



  assign enb_gated_7 = Trigger_emulated && enb;

  assign coeff_a3_section4 = 16'sb0011111111100010;



  always @(posedge clk or posedge reset)
    begin : delay_process_section4_tap1_process
      if (reset == 1'b1) begin
        typeconvert4_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_7) begin
          typeconvert4_tap1 <= typeconvert4_tap0;
        end
      end
    end



  assign a3mul4 = typeconvert4_tap1 * coeff_a3_section4;



  assign a1sum4_cast2 = {{8{a3mul4[31]}}, a3mul4};



  // coeff_b2_section4
  always @(posedge clk or posedge reset)
    begin : delay_process_section4_tap0_process
      if (reset == 1'b1) begin
        typeconvert4_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_6) begin
          typeconvert4_tap0 <= typeconvert4;
        end
      end
    end



  assign a2mul4 = typeconvert4_tap0 * coeff_a2_section4;



  assign a2sum4_cast2 = {{8{a2mul4[31]}}, a2mul4};



  assign Sub6_sub_cast = {inputconv4[39], inputconv4};
  assign Sub6_sub_cast_1 = {a2sum4_cast2[39], a2sum4_cast2};
  assign a2sum4_temp = Sub6_sub_cast - Sub6_sub_cast_1;



  assign a2sum4 = a2sum4_temp[39:0];



  assign Sub7_sub_cast = {a2sum4[39], a2sum4};
  assign Sub7_sub_cast_1 = {a1sum4_cast2[39], a1sum4_cast2};
  assign a1sum4_temp = Sub7_sub_cast - Sub7_sub_cast_1;



  assign a1sum4 = a1sum4_temp[39:0];



  assign typeconvert4 = a1sum4[29:14] + $signed({1'b0, a1sum4[13] & (a1sum4[14] | (|a1sum4[12:0]))});



  // coeff_b1_section4
  assign b1mul4 = {{2{typeconvert4[15]}}, {typeconvert4, 14'b00000000000000}};



  assign b1multypeconvert4 = {{8{b1mul4[31]}}, b1mul4};



  // coeff_b3_section4
  assign gain7_cast = {typeconvert4_tap1[15], typeconvert4_tap1};
  assign gain7_cast_1 =  - (gain7_cast);
  assign b3mul4 = {gain7_cast_1[16], {gain7_cast_1, 14'b00000000000000}};



  assign adder3_add_cast = {{8{b3mul4[31]}}, b3mul4};
  assign b1sum4 = b1multypeconvert4 + adder3_add_cast;



  assign section_result4 = b1sum4[33:18] + $signed({1'b0, b1sum4[17] & (b1sum4[18] | (|b1sum4[16:0]))});



  assign scaleconst5 = 16'sb0100100101010101;



  assign multiplier12_mul_temp = section_result4 * scaleconst5;
  assign scale5 = {multiplier12_mul_temp, 4'b0000};



  assign scaletypeconvert5 = scale5[35:20] + $signed({1'b0, scale5[19] & (scale5[20] | (|scale5[18:0]))});



  assign inputconv5 = {{12{scaletypeconvert5[15]}}, {scaletypeconvert5, 12'b000000000000}};



  assign enb_gated_8 = Trigger_emulated && enb;

  assign coeff_a2_section5 = 16'sb1000000001010100;



  assign enb_gated_9 = Trigger_emulated && enb;

  assign coeff_a3_section5 = 16'sb0011111110110110;



  always @(posedge clk or posedge reset)
    begin : delay_process_section5_tap1_process
      if (reset == 1'b1) begin
        typeconvert5_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_9) begin
          typeconvert5_tap1 <= typeconvert5_tap0;
        end
      end
    end



  assign a3mul5 = typeconvert5_tap1 * coeff_a3_section5;



  assign a1sum5_cast2 = {{8{a3mul5[31]}}, a3mul5};



  // coeff_b2_section5
  always @(posedge clk or posedge reset)
    begin : delay_process_section5_tap0_process
      if (reset == 1'b1) begin
        typeconvert5_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_8) begin
          typeconvert5_tap0 <= typeconvert5;
        end
      end
    end



  assign a2mul5 = typeconvert5_tap0 * coeff_a2_section5;



  assign a2sum5_cast2 = {{8{a2mul5[31]}}, a2mul5};



  assign Sub8_sub_cast = {inputconv5[39], inputconv5};
  assign Sub8_sub_cast_1 = {a2sum5_cast2[39], a2sum5_cast2};
  assign a2sum5_temp = Sub8_sub_cast - Sub8_sub_cast_1;



  assign a2sum5 = a2sum5_temp[39:0];



  assign Sub9_sub_cast = {a2sum5[39], a2sum5};
  assign Sub9_sub_cast_1 = {a1sum5_cast2[39], a1sum5_cast2};
  assign a1sum5_temp = Sub9_sub_cast - Sub9_sub_cast_1;



  assign a1sum5 = a1sum5_temp[39:0];



  assign typeconvert5 = a1sum5[29:14] + $signed({1'b0, a1sum5[13] & (a1sum5[14] | (|a1sum5[12:0]))});



  // coeff_b1_section5
  assign b1mul5 = {{2{typeconvert5[15]}}, {typeconvert5, 14'b00000000000000}};



  assign b1multypeconvert5 = {{8{b1mul5[31]}}, b1mul5};



  // coeff_b3_section5
  assign gain9_cast = {typeconvert5_tap1[15], typeconvert5_tap1};
  assign gain9_cast_1 =  - (gain9_cast);
  assign b3mul5 = {gain9_cast_1[16], {gain9_cast_1, 14'b00000000000000}};



  assign adder4_add_cast = {{8{b3mul5[31]}}, b3mul5};
  assign b1sum5 = b1multypeconvert5 + adder4_add_cast;



  assign section_result5 = b1sum5[33:18] + $signed({1'b0, b1sum5[17] & (b1sum5[18] | (|b1sum5[16:0]))});



  assign scaleconst6 = 16'sb0100100101010101;



  assign multiplier15_mul_temp = section_result5 * scaleconst6;
  assign scale6 = {multiplier15_mul_temp, 4'b0000};



  assign scaletypeconvert6 = scale6[35:20] + $signed({1'b0, scale6[19] & (scale6[20] | (|scale6[18:0]))});



  assign inputconv6 = {{12{scaletypeconvert6[15]}}, {scaletypeconvert6, 12'b000000000000}};



  assign enb_gated_10 = Trigger_emulated && enb;

  assign coeff_a2_section6 = 16'sb1000000000110111;



  assign enb_gated_11 = Trigger_emulated && enb;

  assign coeff_a3_section6 = 16'sb0011111111001110;



  always @(posedge clk or posedge reset)
    begin : delay_process_section6_tap1_process
      if (reset == 1'b1) begin
        typeconvert6_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_11) begin
          typeconvert6_tap1 <= typeconvert6_tap0;
        end
      end
    end



  assign a3mul6 = typeconvert6_tap1 * coeff_a3_section6;



  assign a1sum6_cast2 = {{8{a3mul6[31]}}, a3mul6};



  // coeff_b2_section6
  always @(posedge clk or posedge reset)
    begin : delay_process_section6_tap0_process
      if (reset == 1'b1) begin
        typeconvert6_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_10) begin
          typeconvert6_tap0 <= typeconvert6;
        end
      end
    end



  assign a2mul6 = typeconvert6_tap0 * coeff_a2_section6;



  assign a2sum6_cast2 = {{8{a2mul6[31]}}, a2mul6};



  assign Sub10_sub_cast = {inputconv6[39], inputconv6};
  assign Sub10_sub_cast_1 = {a2sum6_cast2[39], a2sum6_cast2};
  assign a2sum6_temp = Sub10_sub_cast - Sub10_sub_cast_1;



  assign a2sum6 = a2sum6_temp[39:0];



  assign Sub11_sub_cast = {a2sum6[39], a2sum6};
  assign Sub11_sub_cast_1 = {a1sum6_cast2[39], a1sum6_cast2};
  assign a1sum6_temp = Sub11_sub_cast - Sub11_sub_cast_1;



  assign a1sum6 = a1sum6_temp[39:0];



  assign typeconvert6 = a1sum6[29:14] + $signed({1'b0, a1sum6[13] & (a1sum6[14] | (|a1sum6[12:0]))});



  // coeff_b1_section6
  assign b1mul6 = {{2{typeconvert6[15]}}, {typeconvert6, 14'b00000000000000}};



  assign b1multypeconvert6 = {{8{b1mul6[31]}}, b1mul6};



  // coeff_b3_section6
  assign gain11_cast = {typeconvert6_tap1[15], typeconvert6_tap1};
  assign gain11_cast_1 =  - (gain11_cast);
  assign b3mul6 = {gain11_cast_1[16], {gain11_cast_1, 14'b00000000000000}};



  assign adder5_add_cast = {{8{b3mul6[31]}}, b3mul6};
  assign b1sum6 = b1multypeconvert6 + adder5_add_cast;



  assign section_result6 = b1sum6[33:18] + $signed({1'b0, b1sum6[17] & (b1sum6[18] | (|b1sum6[16:0]))});



  assign scaleconst7 = 16'sb0100100101001000;



  assign multiplier18_mul_temp = section_result6 * scaleconst7;
  assign scale7 = {multiplier18_mul_temp, 4'b0000};



  assign scaletypeconvert7 = scale7[35:20] + $signed({1'b0, scale7[19] & (scale7[20] | (|scale7[18:0]))});



  assign inputconv7 = {{12{scaletypeconvert7[15]}}, {scaletypeconvert7, 12'b000000000000}};



  assign enb_gated_12 = Trigger_emulated && enb;

  assign coeff_a2_section7 = 16'sb1000000001101101;



  assign enb_gated_13 = Trigger_emulated && enb;

  assign coeff_a3_section7 = 16'sb0011111110011101;



  always @(posedge clk or posedge reset)
    begin : delay_process_section7_tap1_process
      if (reset == 1'b1) begin
        typeconvert7_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_13) begin
          typeconvert7_tap1 <= typeconvert7_tap0;
        end
      end
    end



  assign a3mul7 = typeconvert7_tap1 * coeff_a3_section7;



  assign a1sum7_cast2 = {{8{a3mul7[31]}}, a3mul7};



  // coeff_b2_section7
  always @(posedge clk or posedge reset)
    begin : delay_process_section7_tap0_process
      if (reset == 1'b1) begin
        typeconvert7_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_12) begin
          typeconvert7_tap0 <= typeconvert7;
        end
      end
    end



  assign a2mul7 = typeconvert7_tap0 * coeff_a2_section7;



  assign a2sum7_cast2 = {{8{a2mul7[31]}}, a2mul7};



  assign Sub12_sub_cast = {inputconv7[39], inputconv7};
  assign Sub12_sub_cast_1 = {a2sum7_cast2[39], a2sum7_cast2};
  assign a2sum7_temp = Sub12_sub_cast - Sub12_sub_cast_1;



  assign a2sum7 = a2sum7_temp[39:0];



  assign Sub13_sub_cast = {a2sum7[39], a2sum7};
  assign Sub13_sub_cast_1 = {a1sum7_cast2[39], a1sum7_cast2};
  assign a1sum7_temp = Sub13_sub_cast - Sub13_sub_cast_1;



  assign a1sum7 = a1sum7_temp[39:0];



  assign typeconvert7 = a1sum7[29:14] + $signed({1'b0, a1sum7[13] & (a1sum7[14] | (|a1sum7[12:0]))});



  // coeff_b1_section7
  assign b1mul7 = {{2{typeconvert7[15]}}, {typeconvert7, 14'b00000000000000}};



  assign b1multypeconvert7 = {{8{b1mul7[31]}}, b1mul7};



  // coeff_b3_section7
  assign gain13_cast = {typeconvert7_tap1[15], typeconvert7_tap1};
  assign gain13_cast_1 =  - (gain13_cast);
  assign b3mul7 = {gain13_cast_1[16], {gain13_cast_1, 14'b00000000000000}};



  assign adder6_add_cast = {{8{b3mul7[31]}}, b3mul7};
  assign b1sum7 = b1multypeconvert7 + adder6_add_cast;



  assign section_result7 = b1sum7[33:18] + $signed({1'b0, b1sum7[17] & (b1sum7[18] | (|b1sum7[16:0]))});



  assign scaleconst8 = 16'sb0100100101001000;



  assign multiplier21_mul_temp = section_result7 * scaleconst8;
  assign scale8 = {multiplier21_mul_temp, 4'b0000};



  assign scaletypeconvert8 = scale8[35:20] + $signed({1'b0, scale8[19] & (scale8[20] | (|scale8[18:0]))});



  assign inputconv8 = {{12{scaletypeconvert8[15]}}, {scaletypeconvert8, 12'b000000000000}};



  assign enb_gated_14 = Trigger_emulated && enb;

  assign coeff_a2_section8 = 16'sb1000000001001010;



  assign enb_gated_15 = Trigger_emulated && enb;

  assign coeff_a3_section8 = 16'sb0011111110111011;



  always @(posedge clk or posedge reset)
    begin : delay_process_section8_tap1_process
      if (reset == 1'b1) begin
        typeconvert8_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_15) begin
          typeconvert8_tap1 <= typeconvert8_tap0;
        end
      end
    end



  assign a3mul8 = typeconvert8_tap1 * coeff_a3_section8;



  assign a1sum8_cast2 = {{8{a3mul8[31]}}, a3mul8};



  // coeff_b2_section8
  always @(posedge clk or posedge reset)
    begin : delay_process_section8_tap0_process
      if (reset == 1'b1) begin
        typeconvert8_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_14) begin
          typeconvert8_tap0 <= typeconvert8;
        end
      end
    end



  assign a2mul8 = typeconvert8_tap0 * coeff_a2_section8;



  assign a2sum8_cast2 = {{8{a2mul8[31]}}, a2mul8};



  assign Sub14_sub_cast = {inputconv8[39], inputconv8};
  assign Sub14_sub_cast_1 = {a2sum8_cast2[39], a2sum8_cast2};
  assign a2sum8_temp = Sub14_sub_cast - Sub14_sub_cast_1;



  assign a2sum8 = a2sum8_temp[39:0];



  assign Sub15_sub_cast = {a2sum8[39], a2sum8};
  assign Sub15_sub_cast_1 = {a1sum8_cast2[39], a1sum8_cast2};
  assign a1sum8_temp = Sub15_sub_cast - Sub15_sub_cast_1;



  assign a1sum8 = a1sum8_temp[39:0];



  assign typeconvert8 = a1sum8[29:14] + $signed({1'b0, a1sum8[13] & (a1sum8[14] | (|a1sum8[12:0]))});



  // coeff_b1_section8
  assign b1mul8 = {{2{typeconvert8[15]}}, {typeconvert8, 14'b00000000000000}};



  assign b1multypeconvert8 = {{8{b1mul8[31]}}, b1mul8};



  // coeff_b3_section8
  assign gain15_cast = {typeconvert8_tap1[15], typeconvert8_tap1};
  assign gain15_cast_1 =  - (gain15_cast);
  assign b3mul8 = {gain15_cast_1[16], {gain15_cast_1, 14'b00000000000000}};



  assign adder7_add_cast = {{8{b3mul8[31]}}, b3mul8};
  assign b1sum8 = b1multypeconvert8 + adder7_add_cast;



  assign section_result8 = b1sum8[33:18] + $signed({1'b0, b1sum8[17] & (b1sum8[18] | (|b1sum8[16:0]))});



  assign scaleconst9 = 16'sb0100100100111101;



  assign multiplier24_mul_temp = section_result8 * scaleconst9;
  assign scale9 = {multiplier24_mul_temp, 4'b0000};



  assign scaletypeconvert9 = scale9[35:20] + $signed({1'b0, scale9[19] & (scale9[20] | (|scale9[18:0]))});



  assign inputconv9 = {{12{scaletypeconvert9[15]}}, {scaletypeconvert9, 12'b000000000000}};



  assign enb_gated_16 = Trigger_emulated && enb;

  assign coeff_a2_section9 = 16'sb1000000010000001;



  assign enb_gated_17 = Trigger_emulated && enb;

  assign coeff_a3_section9 = 16'sb0011111110001000;



  always @(posedge clk or posedge reset)
    begin : delay_process_section9_tap1_process
      if (reset == 1'b1) begin
        typeconvert9_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_17) begin
          typeconvert9_tap1 <= typeconvert9_tap0;
        end
      end
    end



  assign a3mul9 = typeconvert9_tap1 * coeff_a3_section9;



  assign a1sum9_cast2 = {{8{a3mul9[31]}}, a3mul9};



  // coeff_b2_section9
  always @(posedge clk or posedge reset)
    begin : delay_process_section9_tap0_process
      if (reset == 1'b1) begin
        typeconvert9_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_16) begin
          typeconvert9_tap0 <= typeconvert9;
        end
      end
    end



  assign a2mul9 = typeconvert9_tap0 * coeff_a2_section9;



  assign a2sum9_cast2 = {{8{a2mul9[31]}}, a2mul9};



  assign Sub16_sub_cast = {inputconv9[39], inputconv9};
  assign Sub16_sub_cast_1 = {a2sum9_cast2[39], a2sum9_cast2};
  assign a2sum9_temp = Sub16_sub_cast - Sub16_sub_cast_1;



  assign a2sum9 = a2sum9_temp[39:0];



  assign Sub17_sub_cast = {a2sum9[39], a2sum9};
  assign Sub17_sub_cast_1 = {a1sum9_cast2[39], a1sum9_cast2};
  assign a1sum9_temp = Sub17_sub_cast - Sub17_sub_cast_1;



  assign a1sum9 = a1sum9_temp[39:0];



  assign typeconvert9 = a1sum9[29:14] + $signed({1'b0, a1sum9[13] & (a1sum9[14] | (|a1sum9[12:0]))});



  // coeff_b1_section9
  assign b1mul9 = {{2{typeconvert9[15]}}, {typeconvert9, 14'b00000000000000}};



  assign b1multypeconvert9 = {{8{b1mul9[31]}}, b1mul9};



  // coeff_b3_section9
  assign gain17_cast = {typeconvert9_tap1[15], typeconvert9_tap1};
  assign gain17_cast_1 =  - (gain17_cast);
  assign b3mul9 = {gain17_cast_1[16], {gain17_cast_1, 14'b00000000000000}};



  assign adder8_add_cast = {{8{b3mul9[31]}}, b3mul9};
  assign b1sum9 = b1multypeconvert9 + adder8_add_cast;



  assign section_result9 = b1sum9[33:18] + $signed({1'b0, b1sum9[17] & (b1sum9[18] | (|b1sum9[16:0]))});



  assign scaleconst10 = 16'sb0100100100111101;



  assign multiplier27_mul_temp = section_result9 * scaleconst10;
  assign scale10 = {multiplier27_mul_temp, 4'b0000};



  assign scaletypeconvert10 = scale10[35:20] + $signed({1'b0, scale10[19] & (scale10[20] | (|scale10[18:0]))});



  assign inputconv10 = {{12{scaletypeconvert10[15]}}, {scaletypeconvert10, 12'b000000000000}};



  assign enb_gated_18 = Trigger_emulated && enb;

  assign coeff_a2_section10 = 16'sb1000000001011101;



  assign enb_gated_19 = Trigger_emulated && enb;

  assign coeff_a3_section10 = 16'sb0011111110101000;



  always @(posedge clk or posedge reset)
    begin : delay_process_section10_tap1_process
      if (reset == 1'b1) begin
        typeconvert10_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_19) begin
          typeconvert10_tap1 <= typeconvert10_tap0;
        end
      end
    end



  assign a3mul10 = typeconvert10_tap1 * coeff_a3_section10;



  assign a1sum10_cast2 = {{8{a3mul10[31]}}, a3mul10};



  // coeff_b2_section10
  always @(posedge clk or posedge reset)
    begin : delay_process_section10_tap0_process
      if (reset == 1'b1) begin
        typeconvert10_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_18) begin
          typeconvert10_tap0 <= typeconvert10;
        end
      end
    end



  assign a2mul10 = typeconvert10_tap0 * coeff_a2_section10;



  assign a2sum10_cast2 = {{8{a2mul10[31]}}, a2mul10};



  assign Sub18_sub_cast = {inputconv10[39], inputconv10};
  assign Sub18_sub_cast_1 = {a2sum10_cast2[39], a2sum10_cast2};
  assign a2sum10_temp = Sub18_sub_cast - Sub18_sub_cast_1;



  assign a2sum10 = a2sum10_temp[39:0];



  assign Sub19_sub_cast = {a2sum10[39], a2sum10};
  assign Sub19_sub_cast_1 = {a1sum10_cast2[39], a1sum10_cast2};
  assign a1sum10_temp = Sub19_sub_cast - Sub19_sub_cast_1;



  assign a1sum10 = a1sum10_temp[39:0];



  assign typeconvert10 = a1sum10[29:14] + $signed({1'b0, a1sum10[13] & (a1sum10[14] | (|a1sum10[12:0]))});



  // coeff_b1_section10
  assign b1mul10 = {{2{typeconvert10[15]}}, {typeconvert10, 14'b00000000000000}};



  assign b1multypeconvert10 = {{8{b1mul10[31]}}, b1mul10};



  // coeff_b3_section10
  assign gain19_cast = {typeconvert10_tap1[15], typeconvert10_tap1};
  assign gain19_cast_1 =  - (gain19_cast);
  assign b3mul10 = {gain19_cast_1[16], {gain19_cast_1, 14'b00000000000000}};



  assign adder9_add_cast = {{8{b3mul10[31]}}, b3mul10};
  assign b1sum10 = b1multypeconvert10 + adder9_add_cast;



  assign section_result10 = b1sum10[33:18] + $signed({1'b0, b1sum10[17] & (b1sum10[18] | (|b1sum10[16:0]))});



  assign scaleconst11 = 16'sb0100100100110011;



  assign multiplier30_mul_temp = section_result10 * scaleconst11;
  assign scale11 = {multiplier30_mul_temp, 4'b0000};



  assign scaletypeconvert11 = scale11[35:20] + $signed({1'b0, scale11[19] & (scale11[20] | (|scale11[18:0]))});



  assign inputconv11 = {{12{scaletypeconvert11[15]}}, {scaletypeconvert11, 12'b000000000000}};



  assign enb_gated_20 = Trigger_emulated && enb;

  assign coeff_a2_section11 = 16'sb1000000010010000;



  assign enb_gated_21 = Trigger_emulated && enb;

  assign coeff_a3_section11 = 16'sb0011111101111001;



  always @(posedge clk or posedge reset)
    begin : delay_process_section11_tap1_process
      if (reset == 1'b1) begin
        typeconvert11_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_21) begin
          typeconvert11_tap1 <= typeconvert11_tap0;
        end
      end
    end



  assign a3mul11 = typeconvert11_tap1 * coeff_a3_section11;



  assign a1sum11_cast2 = {{8{a3mul11[31]}}, a3mul11};



  // coeff_b2_section11
  always @(posedge clk or posedge reset)
    begin : delay_process_section11_tap0_process
      if (reset == 1'b1) begin
        typeconvert11_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_20) begin
          typeconvert11_tap0 <= typeconvert11;
        end
      end
    end



  assign a2mul11 = typeconvert11_tap0 * coeff_a2_section11;



  assign a2sum11_cast2 = {{8{a2mul11[31]}}, a2mul11};



  assign Sub20_sub_cast = {inputconv11[39], inputconv11};
  assign Sub20_sub_cast_1 = {a2sum11_cast2[39], a2sum11_cast2};
  assign a2sum11_temp = Sub20_sub_cast - Sub20_sub_cast_1;



  assign a2sum11 = a2sum11_temp[39:0];



  assign Sub21_sub_cast = {a2sum11[39], a2sum11};
  assign Sub21_sub_cast_1 = {a1sum11_cast2[39], a1sum11_cast2};
  assign a1sum11_temp = Sub21_sub_cast - Sub21_sub_cast_1;



  assign a1sum11 = a1sum11_temp[39:0];



  assign typeconvert11 = a1sum11[29:14] + $signed({1'b0, a1sum11[13] & (a1sum11[14] | (|a1sum11[12:0]))});



  // coeff_b1_section11
  assign b1mul11 = {{2{typeconvert11[15]}}, {typeconvert11, 14'b00000000000000}};



  assign b1multypeconvert11 = {{8{b1mul11[31]}}, b1mul11};



  // coeff_b3_section11
  assign gain21_cast = {typeconvert11_tap1[15], typeconvert11_tap1};
  assign gain21_cast_1 =  - (gain21_cast);
  assign b3mul11 = {gain21_cast_1[16], {gain21_cast_1, 14'b00000000000000}};



  assign adder10_add_cast = {{8{b3mul11[31]}}, b3mul11};
  assign b1sum11 = b1multypeconvert11 + adder10_add_cast;



  assign section_result11 = b1sum11[33:18] + $signed({1'b0, b1sum11[17] & (b1sum11[18] | (|b1sum11[16:0]))});



  assign scaleconst12 = 16'sb0100100100110011;



  assign multiplier33_mul_temp = section_result11 * scaleconst12;
  assign scale12 = {multiplier33_mul_temp, 4'b0000};



  assign scaletypeconvert12 = scale12[35:20] + $signed({1'b0, scale12[19] & (scale12[20] | (|scale12[18:0]))});



  assign inputconv12 = {{12{scaletypeconvert12[15]}}, {scaletypeconvert12, 12'b000000000000}};



  assign enb_gated_22 = Trigger_emulated && enb;

  assign coeff_a2_section12 = 16'sb1000000001101110;



  assign enb_gated_23 = Trigger_emulated && enb;

  assign coeff_a3_section12 = 16'sb0011111110010111;



  always @(posedge clk or posedge reset)
    begin : delay_process_section12_tap1_process
      if (reset == 1'b1) begin
        typeconvert12_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_23) begin
          typeconvert12_tap1 <= typeconvert12_tap0;
        end
      end
    end



  assign a3mul12 = typeconvert12_tap1 * coeff_a3_section12;



  assign a1sum12_cast2 = {{8{a3mul12[31]}}, a3mul12};



  // coeff_b2_section12
  always @(posedge clk or posedge reset)
    begin : delay_process_section12_tap0_process
      if (reset == 1'b1) begin
        typeconvert12_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_22) begin
          typeconvert12_tap0 <= typeconvert12;
        end
      end
    end



  assign a2mul12 = typeconvert12_tap0 * coeff_a2_section12;



  assign a2sum12_cast2 = {{8{a2mul12[31]}}, a2mul12};



  assign Sub22_sub_cast = {inputconv12[39], inputconv12};
  assign Sub22_sub_cast_1 = {a2sum12_cast2[39], a2sum12_cast2};
  assign a2sum12_temp = Sub22_sub_cast - Sub22_sub_cast_1;



  assign a2sum12 = a2sum12_temp[39:0];



  assign Sub23_sub_cast = {a2sum12[39], a2sum12};
  assign Sub23_sub_cast_1 = {a1sum12_cast2[39], a1sum12_cast2};
  assign a1sum12_temp = Sub23_sub_cast - Sub23_sub_cast_1;



  assign a1sum12 = a1sum12_temp[39:0];



  assign typeconvert12 = a1sum12[29:14] + $signed({1'b0, a1sum12[13] & (a1sum12[14] | (|a1sum12[12:0]))});



  // coeff_b1_section12
  assign b1mul12 = {{2{typeconvert12[15]}}, {typeconvert12, 14'b00000000000000}};



  assign b1multypeconvert12 = {{8{b1mul12[31]}}, b1mul12};



  // coeff_b3_section12
  assign gain23_cast = {typeconvert12_tap1[15], typeconvert12_tap1};
  assign gain23_cast_1 =  - (gain23_cast);
  assign b3mul12 = {gain23_cast_1[16], {gain23_cast_1, 14'b00000000000000}};



  assign adder11_add_cast = {{8{b3mul12[31]}}, b3mul12};
  assign b1sum12 = b1multypeconvert12 + adder11_add_cast;



  assign section_result12 = b1sum12[33:18] + $signed({1'b0, b1sum12[17] & (b1sum12[18] | (|b1sum12[16:0]))});



  assign scaleconst13 = 16'sb0100100100101100;



  assign multiplier36_mul_temp = section_result12 * scaleconst13;
  assign scale13 = {multiplier36_mul_temp, 4'b0000};



  assign scaletypeconvert13 = scale13[35:20] + $signed({1'b0, scale13[19] & (scale13[20] | (|scale13[18:0]))});



  assign inputconv13 = {{12{scaletypeconvert13[15]}}, {scaletypeconvert13, 12'b000000000000}};



  assign enb_gated_24 = Trigger_emulated && enb;

  assign coeff_a2_section13 = 16'sb1000000010011001;



  assign enb_gated_25 = Trigger_emulated && enb;

  assign coeff_a3_section13 = 16'sb0011111101101111;



  always @(posedge clk or posedge reset)
    begin : delay_process_section13_tap1_process
      if (reset == 1'b1) begin
        typeconvert13_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_25) begin
          typeconvert13_tap1 <= typeconvert13_tap0;
        end
      end
    end



  assign a3mul13 = typeconvert13_tap1 * coeff_a3_section13;



  assign a1sum13_cast2 = {{8{a3mul13[31]}}, a3mul13};



  // coeff_b2_section13
  always @(posedge clk or posedge reset)
    begin : delay_process_section13_tap0_process
      if (reset == 1'b1) begin
        typeconvert13_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_24) begin
          typeconvert13_tap0 <= typeconvert13;
        end
      end
    end



  assign a2mul13 = typeconvert13_tap0 * coeff_a2_section13;



  assign a2sum13_cast2 = {{8{a2mul13[31]}}, a2mul13};



  assign Sub24_sub_cast = {inputconv13[39], inputconv13};
  assign Sub24_sub_cast_1 = {a2sum13_cast2[39], a2sum13_cast2};
  assign a2sum13_temp = Sub24_sub_cast - Sub24_sub_cast_1;



  assign a2sum13 = a2sum13_temp[39:0];



  assign Sub25_sub_cast = {a2sum13[39], a2sum13};
  assign Sub25_sub_cast_1 = {a1sum13_cast2[39], a1sum13_cast2};
  assign a1sum13_temp = Sub25_sub_cast - Sub25_sub_cast_1;



  assign a1sum13 = a1sum13_temp[39:0];



  assign typeconvert13 = a1sum13[29:14] + $signed({1'b0, a1sum13[13] & (a1sum13[14] | (|a1sum13[12:0]))});



  // coeff_b1_section13
  assign b1mul13 = {{2{typeconvert13[15]}}, {typeconvert13, 14'b00000000000000}};



  assign b1multypeconvert13 = {{8{b1mul13[31]}}, b1mul13};



  // coeff_b3_section13
  assign gain25_cast = {typeconvert13_tap1[15], typeconvert13_tap1};
  assign gain25_cast_1 =  - (gain25_cast);
  assign b3mul13 = {gain25_cast_1[16], {gain25_cast_1, 14'b00000000000000}};



  assign adder12_add_cast = {{8{b3mul13[31]}}, b3mul13};
  assign b1sum13 = b1multypeconvert13 + adder12_add_cast;



  assign section_result13 = b1sum13[33:18] + $signed({1'b0, b1sum13[17] & (b1sum13[18] | (|b1sum13[16:0]))});



  assign scaleconst14 = 16'sb0100100100101100;



  assign multiplier39_mul_temp = section_result13 * scaleconst14;
  assign scale14 = {multiplier39_mul_temp, 4'b0000};



  assign scaletypeconvert14 = scale14[35:20] + $signed({1'b0, scale14[19] & (scale14[20] | (|scale14[18:0]))});



  assign inputconv14 = {{12{scaletypeconvert14[15]}}, {scaletypeconvert14, 12'b000000000000}};



  assign enb_gated_26 = Trigger_emulated && enb;

  assign coeff_a2_section14 = 16'sb1000000001111110;



  assign enb_gated_27 = Trigger_emulated && enb;

  assign coeff_a3_section14 = 16'sb0011111110001000;



  always @(posedge clk or posedge reset)
    begin : delay_process_section14_tap1_process
      if (reset == 1'b1) begin
        typeconvert14_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_27) begin
          typeconvert14_tap1 <= typeconvert14_tap0;
        end
      end
    end



  assign a3mul14 = typeconvert14_tap1 * coeff_a3_section14;



  assign a1sum14_cast2 = {{8{a3mul14[31]}}, a3mul14};



  // coeff_b2_section14
  always @(posedge clk or posedge reset)
    begin : delay_process_section14_tap0_process
      if (reset == 1'b1) begin
        typeconvert14_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_26) begin
          typeconvert14_tap0 <= typeconvert14;
        end
      end
    end



  assign a2mul14 = typeconvert14_tap0 * coeff_a2_section14;



  assign a2sum14_cast2 = {{8{a2mul14[31]}}, a2mul14};



  assign Sub26_sub_cast = {inputconv14[39], inputconv14};
  assign Sub26_sub_cast_1 = {a2sum14_cast2[39], a2sum14_cast2};
  assign a2sum14_temp = Sub26_sub_cast - Sub26_sub_cast_1;



  assign a2sum14 = a2sum14_temp[39:0];



  assign Sub27_sub_cast = {a2sum14[39], a2sum14};
  assign Sub27_sub_cast_1 = {a1sum14_cast2[39], a1sum14_cast2};
  assign a1sum14_temp = Sub27_sub_cast - Sub27_sub_cast_1;



  assign a1sum14 = a1sum14_temp[39:0];



  assign typeconvert14 = a1sum14[29:14] + $signed({1'b0, a1sum14[13] & (a1sum14[14] | (|a1sum14[12:0]))});



  // coeff_b1_section14
  assign b1mul14 = {{2{typeconvert14[15]}}, {typeconvert14, 14'b00000000000000}};



  assign b1multypeconvert14 = {{8{b1mul14[31]}}, b1mul14};



  // coeff_b3_section14
  assign gain27_cast = {typeconvert14_tap1[15], typeconvert14_tap1};
  assign gain27_cast_1 =  - (gain27_cast);
  assign b3mul14 = {gain27_cast_1[16], {gain27_cast_1, 14'b00000000000000}};



  assign adder13_add_cast = {{8{b3mul14[31]}}, b3mul14};
  assign b1sum14 = b1multypeconvert14 + adder13_add_cast;



  assign section_result14 = b1sum14[33:18] + $signed({1'b0, b1sum14[17] & (b1sum14[18] | (|b1sum14[16:0]))});



  assign scaleconst15 = 16'sb0100100100100111;



  assign multiplier42_mul_temp = section_result14 * scaleconst15;
  assign scale15 = {multiplier42_mul_temp, 4'b0000};



  assign scaletypeconvert15 = scale15[35:20] + $signed({1'b0, scale15[19] & (scale15[20] | (|scale15[18:0]))});



  assign inputconv15 = {{12{scaletypeconvert15[15]}}, {scaletypeconvert15, 12'b000000000000}};



  assign enb_gated_28 = Trigger_emulated && enb;

  assign coeff_a2_section15 = 16'sb1000000010011101;



  assign enb_gated_29 = Trigger_emulated && enb;

  assign coeff_a3_section15 = 16'sb0011111101101011;



  always @(posedge clk or posedge reset)
    begin : delay_process_section15_tap1_process
      if (reset == 1'b1) begin
        typeconvert15_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_29) begin
          typeconvert15_tap1 <= typeconvert15_tap0;
        end
      end
    end



  assign a3mul15 = typeconvert15_tap1 * coeff_a3_section15;



  assign a1sum15_cast2 = {{8{a3mul15[31]}}, a3mul15};



  // coeff_b2_section15
  always @(posedge clk or posedge reset)
    begin : delay_process_section15_tap0_process
      if (reset == 1'b1) begin
        typeconvert15_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_28) begin
          typeconvert15_tap0 <= typeconvert15;
        end
      end
    end



  assign a2mul15 = typeconvert15_tap0 * coeff_a2_section15;



  assign a2sum15_cast2 = {{8{a2mul15[31]}}, a2mul15};



  assign Sub28_sub_cast = {inputconv15[39], inputconv15};
  assign Sub28_sub_cast_1 = {a2sum15_cast2[39], a2sum15_cast2};
  assign a2sum15_temp = Sub28_sub_cast - Sub28_sub_cast_1;



  assign a2sum15 = a2sum15_temp[39:0];



  assign Sub29_sub_cast = {a2sum15[39], a2sum15};
  assign Sub29_sub_cast_1 = {a1sum15_cast2[39], a1sum15_cast2};
  assign a1sum15_temp = Sub29_sub_cast - Sub29_sub_cast_1;



  assign a1sum15 = a1sum15_temp[39:0];



  assign typeconvert15 = a1sum15[29:14] + $signed({1'b0, a1sum15[13] & (a1sum15[14] | (|a1sum15[12:0]))});



  // coeff_b1_section15
  assign b1mul15 = {{2{typeconvert15[15]}}, {typeconvert15, 14'b00000000000000}};



  assign b1multypeconvert15 = {{8{b1mul15[31]}}, b1mul15};



  // coeff_b3_section15
  assign gain29_cast = {typeconvert15_tap1[15], typeconvert15_tap1};
  assign gain29_cast_1 =  - (gain29_cast);
  assign b3mul15 = {gain29_cast_1[16], {gain29_cast_1, 14'b00000000000000}};



  assign adder14_add_cast = {{8{b3mul15[31]}}, b3mul15};
  assign b1sum15 = b1multypeconvert15 + adder14_add_cast;



  assign section_result15 = b1sum15[33:18] + $signed({1'b0, b1sum15[17] & (b1sum15[18] | (|b1sum15[16:0]))});



  assign scaleconst16 = 16'sb0100100100100111;



  assign multiplier45_mul_temp = section_result15 * scaleconst16;
  assign scale16 = {multiplier45_mul_temp, 4'b0000};



  assign scaletypeconvert16 = scale16[35:20] + $signed({1'b0, scale16[19] & (scale16[20] | (|scale16[18:0]))});



  assign inputconv16 = {{12{scaletypeconvert16[15]}}, {scaletypeconvert16, 12'b000000000000}};



  assign enb_gated_30 = Trigger_emulated && enb;

  assign coeff_a2_section16 = 16'sb1000000010001011;



  assign enb_gated_31 = Trigger_emulated && enb;

  assign coeff_a3_section16 = 16'sb0011111101111011;



  always @(posedge clk or posedge reset)
    begin : delay_process_section16_tap1_process
      if (reset == 1'b1) begin
        typeconvert16_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_31) begin
          typeconvert16_tap1 <= typeconvert16_tap0;
        end
      end
    end



  assign a3mul16 = typeconvert16_tap1 * coeff_a3_section16;



  assign a1sum16_cast2 = {{8{a3mul16[31]}}, a3mul16};



  // coeff_b2_section16
  always @(posedge clk or posedge reset)
    begin : delay_process_section16_tap0_process
      if (reset == 1'b1) begin
        typeconvert16_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_30) begin
          typeconvert16_tap0 <= typeconvert16;
        end
      end
    end



  assign a2mul16 = typeconvert16_tap0 * coeff_a2_section16;



  assign a2sum16_cast2 = {{8{a2mul16[31]}}, a2mul16};



  assign Sub30_sub_cast = {inputconv16[39], inputconv16};
  assign Sub30_sub_cast_1 = {a2sum16_cast2[39], a2sum16_cast2};
  assign a2sum16_temp = Sub30_sub_cast - Sub30_sub_cast_1;



  assign a2sum16 = a2sum16_temp[39:0];



  assign Sub31_sub_cast = {a2sum16[39], a2sum16};
  assign Sub31_sub_cast_1 = {a1sum16_cast2[39], a1sum16_cast2};
  assign a1sum16_temp = Sub31_sub_cast - Sub31_sub_cast_1;



  assign a1sum16 = a1sum16_temp[39:0];



  assign typeconvert16 = a1sum16[29:14] + $signed({1'b0, a1sum16[13] & (a1sum16[14] | (|a1sum16[12:0]))});



  // coeff_b1_section16
  assign b1mul16 = {{2{typeconvert16[15]}}, {typeconvert16, 14'b00000000000000}};



  assign b1multypeconvert16 = {{8{b1mul16[31]}}, b1mul16};



  // coeff_b3_section16
  assign gain31_cast = {typeconvert16_tap1[15], typeconvert16_tap1};
  assign gain31_cast_1 =  - (gain31_cast);
  assign b3mul16 = {gain31_cast_1[16], {gain31_cast_1, 14'b00000000000000}};



  assign adder15_add_cast = {{8{b3mul16[31]}}, b3mul16};
  assign b1sum16 = b1multypeconvert16 + adder15_add_cast;



  assign section_result16 = b1sum16[33:18] + $signed({1'b0, b1sum16[17] & (b1sum16[18] | (|b1sum16[16:0]))});



  assign scaleconst17 = 16'sb0100100100100101;



  assign multiplier48_mul_temp = section_result16 * scaleconst17;
  assign scale17 = {multiplier48_mul_temp, 4'b0000};



  assign scaletypeconvert17 = scale17[35:20] + $signed({1'b0, scale17[19] & (scale17[20] | (|scale17[18:0]))});



  assign inputconv17 = {{12{scaletypeconvert17[15]}}, {scaletypeconvert17, 12'b000000000000}};



  assign enb_gated_32 = Trigger_emulated && enb;

  assign coeff_a2_section17 = 16'sb1000000010011100;



  assign enb_gated_33 = Trigger_emulated && enb;

  assign coeff_a3_section17 = 16'sb0011111101101011;



  always @(posedge clk or posedge reset)
    begin : delay_process_section17_tap1_process
      if (reset == 1'b1) begin
        typeconvert17_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_33) begin
          typeconvert17_tap1 <= typeconvert17_tap0;
        end
      end
    end



  assign a3mul17 = typeconvert17_tap1 * coeff_a3_section17;



  assign a1sum17_cast2 = {{8{a3mul17[31]}}, a3mul17};



  // coeff_b2_section17
  always @(posedge clk or posedge reset)
    begin : delay_process_section17_tap0_process
      if (reset == 1'b1) begin
        typeconvert17_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_32) begin
          typeconvert17_tap0 <= typeconvert17;
        end
      end
    end



  assign a2mul17 = typeconvert17_tap0 * coeff_a2_section17;



  assign a2sum17_cast2 = {{8{a2mul17[31]}}, a2mul17};



  assign Sub32_sub_cast = {inputconv17[39], inputconv17};
  assign Sub32_sub_cast_1 = {a2sum17_cast2[39], a2sum17_cast2};
  assign a2sum17_temp = Sub32_sub_cast - Sub32_sub_cast_1;



  assign a2sum17 = a2sum17_temp[39:0];



  assign Sub33_sub_cast = {a2sum17[39], a2sum17};
  assign Sub33_sub_cast_1 = {a1sum17_cast2[39], a1sum17_cast2};
  assign a1sum17_temp = Sub33_sub_cast - Sub33_sub_cast_1;



  assign a1sum17 = a1sum17_temp[39:0];



  assign typeconvert17 = a1sum17[29:14] + $signed({1'b0, a1sum17[13] & (a1sum17[14] | (|a1sum17[12:0]))});



  // coeff_b1_section17
  assign b1mul17 = {{2{typeconvert17[15]}}, {typeconvert17, 14'b00000000000000}};



  assign b1multypeconvert17 = {{8{b1mul17[31]}}, b1mul17};



  // coeff_b3_section17
  assign gain33_cast = {typeconvert17_tap1[15], typeconvert17_tap1};
  assign gain33_cast_1 =  - (gain33_cast);
  assign b3mul17 = {gain33_cast_1[16], {gain33_cast_1, 14'b00000000000000}};



  assign adder16_add_cast = {{8{b3mul17[31]}}, b3mul17};
  assign b1sum17 = b1multypeconvert17 + adder16_add_cast;



  assign section_result17 = b1sum17[33:18] + $signed({1'b0, b1sum17[17] & (b1sum17[18] | (|b1sum17[16:0]))});



  assign scaleconst18 = 16'sb0100100100100101;



  assign multiplier51_mul_temp = section_result17 * scaleconst18;
  assign scale18 = {multiplier51_mul_temp, 4'b0000};



  assign scaletypeconvert18 = scale18[35:20] + $signed({1'b0, scale18[19] & (scale18[20] | (|scale18[18:0]))});



  assign inputconv18 = {{12{scaletypeconvert18[15]}}, {scaletypeconvert18, 12'b000000000000}};



  assign enb_gated_34 = Trigger_emulated && enb;

  assign coeff_a2_section18 = 16'sb1000000010010110;



  assign enb_gated_35 = Trigger_emulated && enb;

  assign coeff_a3_section18 = 16'sb0011111101110001;



  always @(posedge clk or posedge reset)
    begin : delay_process_section18_tap1_process
      if (reset == 1'b1) begin
        typeconvert18_tap1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_35) begin
          typeconvert18_tap1 <= typeconvert18_tap0;
        end
      end
    end



  assign a3mul18 = typeconvert18_tap1 * coeff_a3_section18;



  assign a1sum18_cast2 = {{8{a3mul18[31]}}, a3mul18};



  // coeff_b2_section18
  always @(posedge clk or posedge reset)
    begin : delay_process_section18_tap0_process
      if (reset == 1'b1) begin
        typeconvert18_tap0 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated_34) begin
          typeconvert18_tap0 <= typeconvert18;
        end
      end
    end



  assign a2mul18 = typeconvert18_tap0 * coeff_a2_section18;



  assign a2sum18_cast2 = {{8{a2mul18[31]}}, a2mul18};



  assign Sub34_sub_cast = {inputconv18[39], inputconv18};
  assign Sub34_sub_cast_1 = {a2sum18_cast2[39], a2sum18_cast2};
  assign a2sum18_temp = Sub34_sub_cast - Sub34_sub_cast_1;



  assign a2sum18 = a2sum18_temp[39:0];



  assign Sub35_sub_cast = {a2sum18[39], a2sum18};
  assign Sub35_sub_cast_1 = {a1sum18_cast2[39], a1sum18_cast2};
  assign a1sum18_temp = Sub35_sub_cast - Sub35_sub_cast_1;



  assign a1sum18 = a1sum18_temp[39:0];



  assign typeconvert18 = a1sum18[29:14] + $signed({1'b0, a1sum18[13] & (a1sum18[14] | (|a1sum18[12:0]))});



  // coeff_b1_section18
  assign b1mul18 = {{2{typeconvert18[15]}}, {typeconvert18, 14'b00000000000000}};



  assign b1multypeconvert18 = {{8{b1mul18[31]}}, b1mul18};



  // coeff_b3_section18
  assign gain35_cast = {typeconvert18_tap1[15], typeconvert18_tap1};
  assign gain35_cast_1 =  - (gain35_cast);
  assign b3mul18 = {gain35_cast_1[16], {gain35_cast_1, 14'b00000000000000}};



  assign adder17_add_cast = {{8{b3mul18[31]}}, b3mul18};
  assign b1sum18 = b1multypeconvert18 + adder17_add_cast;



  assign output_typeconvert = b1sum18[33:18] + $signed({1'b0, b1sum18[17] & (b1sum18[18] | (|b1sum18[16:0]))});



  assign Out = output_typeconvert;

endmodule  // Filter

