// ------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\cust_arch_22\filter_block
// Created: 2019-10-11 18:41:12
// Generated by MATLAB 9.7 and HDL Coder 3.15
// 
// ------------------------------------------------------------
// 
// 
// ------------------------------------------------------------
// 
// Module: filter_block
// Source Path: /filter_block
// 
// ------------------------------------------------------------
// 
// HDL Implementation    : Fully Serial
// Folding Factor        : 108
// Multipliers           : 1



`timescale 1 ns / 1 ns

module filter_block
               (
                clk,
                enb_108_1_1_gated,
                reset,
                filter_block_in,
                filter_block_out
                );

  input   clk; 
  input   enb_108_1_1_gated; 
  input   reset; 
  input   signed [15:0] filter_block_in; //sfix16_En15
  output  signed [15:0] filter_block_out; //sfix16_En11

////////////////////////////////////////////////////////////////
//Module Architecture: filter_block
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [31:0] scaleconst1 = 32'h00004971; //sfix32_En22
  parameter signed [31:0] coeff_b1_section1 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section1 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section1 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section1 = 32'hFF801A00; //sfix32_En22
  parameter signed [31:0] coeff_a3_section1 = 32'h003FF000; //sfix32_En22
  parameter signed [31:0] scaleconst2 = 32'h00004971; //sfix32_En22
  parameter signed [31:0] coeff_b1_section2 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section2 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section2 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section2 = 32'hFF800F00; //sfix32_En22
  parameter signed [31:0] coeff_a3_section2 = 32'h003FF600; //sfix32_En22
  parameter signed [31:0] scaleconst3 = 32'h00004962; //sfix32_En22
  parameter signed [31:0] coeff_b1_section3 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section3 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section3 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section3 = 32'hFF803800; //sfix32_En22
  parameter signed [31:0] coeff_a3_section3 = 32'h003FD200; //sfix32_En22
  parameter signed [31:0] scaleconst4 = 32'h00004962; //sfix32_En22
  parameter signed [31:0] coeff_b1_section4 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section4 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section4 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section4 = 32'hFF802300; //sfix32_En22
  parameter signed [31:0] coeff_a3_section4 = 32'h003FE200; //sfix32_En22
  parameter signed [31:0] scaleconst5 = 32'h00004955; //sfix32_En22
  parameter signed [31:0] coeff_b1_section5 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section5 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section5 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section5 = 32'hFF805400; //sfix32_En22
  parameter signed [31:0] coeff_a3_section5 = 32'h003FB600; //sfix32_En22
  parameter signed [31:0] scaleconst6 = 32'h00004955; //sfix32_En22
  parameter signed [31:0] coeff_b1_section6 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section6 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section6 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section6 = 32'hFF803700; //sfix32_En22
  parameter signed [31:0] coeff_a3_section6 = 32'h003FCE00; //sfix32_En22
  parameter signed [31:0] scaleconst7 = 32'h00004948; //sfix32_En22
  parameter signed [31:0] coeff_b1_section7 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section7 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section7 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section7 = 32'hFF806D00; //sfix32_En22
  parameter signed [31:0] coeff_a3_section7 = 32'h003F9D00; //sfix32_En22
  parameter signed [31:0] scaleconst8 = 32'h00004948; //sfix32_En22
  parameter signed [31:0] coeff_b1_section8 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section8 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section8 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section8 = 32'hFF804A00; //sfix32_En22
  parameter signed [31:0] coeff_a3_section8 = 32'h003FBB00; //sfix32_En22
  parameter signed [31:0] scaleconst9 = 32'h0000493D; //sfix32_En22
  parameter signed [31:0] coeff_b1_section9 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section9 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section9 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section9 = 32'hFF808100; //sfix32_En22
  parameter signed [31:0] coeff_a3_section9 = 32'h003F8800; //sfix32_En22
  parameter signed [31:0] scaleconst10 = 32'h0000493D; //sfix32_En22
  parameter signed [31:0] coeff_b1_section10 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section10 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section10 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section10 = 32'hFF805D00; //sfix32_En22
  parameter signed [31:0] coeff_a3_section10 = 32'h003FA800; //sfix32_En22
  parameter signed [31:0] scaleconst11 = 32'h00004933; //sfix32_En22
  parameter signed [31:0] coeff_b1_section11 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section11 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section11 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section11 = 32'hFF809000; //sfix32_En22
  parameter signed [31:0] coeff_a3_section11 = 32'h003F7900; //sfix32_En22
  parameter signed [31:0] scaleconst12 = 32'h00004933; //sfix32_En22
  parameter signed [31:0] coeff_b1_section12 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section12 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section12 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section12 = 32'hFF806E00; //sfix32_En22
  parameter signed [31:0] coeff_a3_section12 = 32'h003F9700; //sfix32_En22
  parameter signed [31:0] scaleconst13 = 32'h0000492C; //sfix32_En22
  parameter signed [31:0] coeff_b1_section13 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section13 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section13 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section13 = 32'hFF809900; //sfix32_En22
  parameter signed [31:0] coeff_a3_section13 = 32'h003F6F00; //sfix32_En22
  parameter signed [31:0] scaleconst14 = 32'h0000492C; //sfix32_En22
  parameter signed [31:0] coeff_b1_section14 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section14 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section14 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section14 = 32'hFF807E00; //sfix32_En22
  parameter signed [31:0] coeff_a3_section14 = 32'h003F8800; //sfix32_En22
  parameter signed [31:0] scaleconst15 = 32'h00004927; //sfix32_En22
  parameter signed [31:0] coeff_b1_section15 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section15 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section15 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section15 = 32'hFF809D00; //sfix32_En22
  parameter signed [31:0] coeff_a3_section15 = 32'h003F6B00; //sfix32_En22
  parameter signed [31:0] scaleconst16 = 32'h00004927; //sfix32_En22
  parameter signed [31:0] coeff_b1_section16 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section16 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section16 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section16 = 32'hFF808B00; //sfix32_En22
  parameter signed [31:0] coeff_a3_section16 = 32'h003F7B00; //sfix32_En22
  parameter signed [31:0] scaleconst17 = 32'h00004925; //sfix32_En22
  parameter signed [31:0] coeff_b1_section17 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section17 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section17 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section17 = 32'hFF809C00; //sfix32_En22
  parameter signed [31:0] coeff_a3_section17 = 32'h003F6B00; //sfix32_En22
  parameter signed [31:0] scaleconst18 = 32'h00004925; //sfix32_En22
  parameter signed [31:0] coeff_b1_section18 = 32'h00400000; //sfix32_En22
  parameter signed [31:0] coeff_b2_section18 = 32'h00000000; //sfix32_En22
  parameter signed [31:0] coeff_b3_section18 = 32'hFFC00000; //sfix32_En22
  parameter signed [31:0] coeff_a2_section18 = 32'hFF809600; //sfix32_En22
  parameter signed [31:0] coeff_a3_section18 = 32'h003F7100; //sfix32_En22
  // Signals
  reg  signed [15:0] input_register; // sfix16_En15
  reg  [6:0] cur_count; // ufix7
  wire phase_0; // boolean
  wire phase_2; // boolean
  wire phase_3; // boolean
  wire phase_5; // boolean
  wire phase_6; // boolean
  wire phase_8; // boolean
  wire phase_9; // boolean
  wire phase_11; // boolean
  wire phase_12; // boolean
  wire phase_14; // boolean
  wire phase_15; // boolean
  wire phase_17; // boolean
  wire phase_18; // boolean
  wire phase_20; // boolean
  wire phase_21; // boolean
  wire phase_23; // boolean
  wire phase_24; // boolean
  wire phase_26; // boolean
  wire phase_27; // boolean
  wire phase_29; // boolean
  wire phase_30; // boolean
  wire phase_32; // boolean
  wire phase_33; // boolean
  wire phase_35; // boolean
  wire phase_36; // boolean
  wire phase_38; // boolean
  wire phase_39; // boolean
  wire phase_41; // boolean
  wire phase_42; // boolean
  wire phase_44; // boolean
  wire phase_45; // boolean
  wire phase_47; // boolean
  wire phase_48; // boolean
  wire phase_50; // boolean
  wire phase_51; // boolean
  wire phase_53; // boolean
  wire phase_54; // boolean
  wire phase_56; // boolean
  wire phase_57; // boolean
  wire phase_59; // boolean
  wire phase_60; // boolean
  wire phase_62; // boolean
  wire phase_63; // boolean
  wire phase_65; // boolean
  wire phase_66; // boolean
  wire phase_68; // boolean
  wire phase_69; // boolean
  wire phase_71; // boolean
  wire phase_72; // boolean
  wire phase_74; // boolean
  wire phase_75; // boolean
  wire phase_77; // boolean
  wire phase_78; // boolean
  wire phase_80; // boolean
  wire phase_81; // boolean
  wire phase_83; // boolean
  wire phase_84; // boolean
  wire phase_86; // boolean
  wire phase_87; // boolean
  wire phase_89; // boolean
  wire phase_90; // boolean
  wire phase_92; // boolean
  wire phase_93; // boolean
  wire phase_95; // boolean
  wire phase_96; // boolean
  wire phase_98; // boolean
  wire phase_99; // boolean
  wire phase_101; // boolean
  wire phase_102; // boolean
  wire phase_104; // boolean
  wire phase_105; // boolean
  wire phase_107; // boolean
  wire signed [15:0] sectionipconvert; // sfix16_En17
  wire signed [15:0] storagetypeconvert; // sfix16_En15
  reg  signed [15:0] prev_stg_op1; // sfix16_En11
  reg  signed [15:0] prev_stg_op2; // sfix16_En11
  reg  signed [15:0] prev_stg_op3; // sfix16_En11
  reg  signed [15:0] prev_stg_op4; // sfix16_En11
  reg  signed [15:0] prev_stg_op5; // sfix16_En11
  reg  signed [15:0] prev_stg_op6; // sfix16_En11
  reg  signed [15:0] prev_stg_op7; // sfix16_En11
  reg  signed [15:0] prev_stg_op8; // sfix16_En11
  reg  signed [15:0] prev_stg_op9; // sfix16_En11
  reg  signed [15:0] prev_stg_op10; // sfix16_En11
  reg  signed [15:0] prev_stg_op11; // sfix16_En11
  reg  signed [15:0] prev_stg_op12; // sfix16_En11
  reg  signed [15:0] prev_stg_op13; // sfix16_En11
  reg  signed [15:0] prev_stg_op14; // sfix16_En11
  reg  signed [15:0] prev_stg_op15; // sfix16_En11
  reg  signed [15:0] prev_stg_op16; // sfix16_En11
  reg  signed [15:0] prev_stg_op17; // sfix16_En11
  reg  signed [15:0] storage_state_in1; // sfix16_En15
  reg  signed [15:0] delay_section1 [0:1] ; // sfix16_En15
  reg  signed [15:0] storage_state_in2; // sfix16_En15
  reg  signed [15:0] delay_section2 [0:1] ; // sfix16_En15
  reg  signed [15:0] storage_state_in3; // sfix16_En15
  reg  signed [15:0] delay_section3 [0:1] ; // sfix16_En15
  reg  signed [15:0] storage_state_in4; // sfix16_En15
  reg  signed [15:0] delay_section4 [0:1] ; // sfix16_En15
  reg  signed [15:0] storage_state_in5; // sfix16_En15
  reg  signed [15:0] delay_section5 [0:1] ; // sfix16_En15
  reg  signed [15:0] storage_state_in6; // sfix16_En15
  reg  signed [15:0] delay_section6 [0:1] ; // sfix16_En15
  reg  signed [15:0] storage_state_in7; // sfix16_En15
  reg  signed [15:0] delay_section7 [0:1] ; // sfix16_En15
  reg  signed [15:0] storage_state_in8; // sfix16_En15
  reg  signed [15:0] delay_section8 [0:1] ; // sfix16_En15
  reg  signed [15:0] storage_state_in9; // sfix16_En15
  reg  signed [15:0] delay_section9 [0:1] ; // sfix16_En15
  reg  signed [15:0] storage_state_in10; // sfix16_En15
  reg  signed [15:0] delay_section10 [0:1] ; // sfix16_En15
  reg  signed [15:0] storage_state_in11; // sfix16_En15
  reg  signed [15:0] delay_section11 [0:1] ; // sfix16_En15
  reg  signed [15:0] storage_state_in12; // sfix16_En15
  reg  signed [15:0] delay_section12 [0:1] ; // sfix16_En15
  reg  signed [15:0] storage_state_in13; // sfix16_En15
  reg  signed [15:0] delay_section13 [0:1] ; // sfix16_En15
  reg  signed [15:0] storage_state_in14; // sfix16_En15
  reg  signed [15:0] delay_section14 [0:1] ; // sfix16_En15
  reg  signed [15:0] storage_state_in15; // sfix16_En15
  reg  signed [15:0] delay_section15 [0:1] ; // sfix16_En15
  reg  signed [15:0] storage_state_in16; // sfix16_En15
  reg  signed [15:0] delay_section16 [0:1] ; // sfix16_En15
  reg  signed [15:0] storage_state_in17; // sfix16_En15
  reg  signed [15:0] delay_section17 [0:1] ; // sfix16_En15
  reg  signed [15:0] storage_state_in18; // sfix16_En15
  reg  signed [15:0] delay_section18 [0:1] ; // sfix16_En15
  wire signed [19:0] input_section1_cast; // sfix20_En15
  wire signed [19:0] storage_in_section1_cast; // sfix20_En15
  wire signed [19:0] delay_section11_cast; // sfix20_En15
  wire signed [19:0] delay_section12_cast; // sfix20_En15
  wire signed [19:0] input_section2_cast; // sfix20_En15
  wire signed [19:0] storage_in_section2_cast; // sfix20_En15
  wire signed [19:0] delay_section21_cast; // sfix20_En15
  wire signed [19:0] delay_section22_cast; // sfix20_En15
  wire signed [19:0] input_section3_cast; // sfix20_En15
  wire signed [19:0] storage_in_section3_cast; // sfix20_En15
  wire signed [19:0] delay_section31_cast; // sfix20_En15
  wire signed [19:0] delay_section32_cast; // sfix20_En15
  wire signed [19:0] input_section4_cast; // sfix20_En15
  wire signed [19:0] storage_in_section4_cast; // sfix20_En15
  wire signed [19:0] delay_section41_cast; // sfix20_En15
  wire signed [19:0] delay_section42_cast; // sfix20_En15
  wire signed [19:0] input_section5_cast; // sfix20_En15
  wire signed [19:0] storage_in_section5_cast; // sfix20_En15
  wire signed [19:0] delay_section51_cast; // sfix20_En15
  wire signed [19:0] delay_section52_cast; // sfix20_En15
  wire signed [19:0] input_section6_cast; // sfix20_En15
  wire signed [19:0] storage_in_section6_cast; // sfix20_En15
  wire signed [19:0] delay_section61_cast; // sfix20_En15
  wire signed [19:0] delay_section62_cast; // sfix20_En15
  wire signed [19:0] input_section7_cast; // sfix20_En15
  wire signed [19:0] storage_in_section7_cast; // sfix20_En15
  wire signed [19:0] delay_section71_cast; // sfix20_En15
  wire signed [19:0] delay_section72_cast; // sfix20_En15
  wire signed [19:0] input_section8_cast; // sfix20_En15
  wire signed [19:0] storage_in_section8_cast; // sfix20_En15
  wire signed [19:0] delay_section81_cast; // sfix20_En15
  wire signed [19:0] delay_section82_cast; // sfix20_En15
  wire signed [19:0] input_section9_cast; // sfix20_En15
  wire signed [19:0] storage_in_section9_cast; // sfix20_En15
  wire signed [19:0] delay_section91_cast; // sfix20_En15
  wire signed [19:0] delay_section92_cast; // sfix20_En15
  wire signed [19:0] input_section10_cast; // sfix20_En15
  wire signed [19:0] storage_in_section10_cast; // sfix20_En15
  wire signed [19:0] delay_section101_cast; // sfix20_En15
  wire signed [19:0] delay_section102_cast; // sfix20_En15
  wire signed [19:0] input_section11_cast; // sfix20_En15
  wire signed [19:0] storage_in_section11_cast; // sfix20_En15
  wire signed [19:0] delay_section111_cast; // sfix20_En15
  wire signed [19:0] delay_section112_cast; // sfix20_En15
  wire signed [19:0] input_section12_cast; // sfix20_En15
  wire signed [19:0] storage_in_section12_cast; // sfix20_En15
  wire signed [19:0] delay_section121_cast; // sfix20_En15
  wire signed [19:0] delay_section122_cast; // sfix20_En15
  wire signed [19:0] input_section13_cast; // sfix20_En15
  wire signed [19:0] storage_in_section13_cast; // sfix20_En15
  wire signed [19:0] delay_section131_cast; // sfix20_En15
  wire signed [19:0] delay_section132_cast; // sfix20_En15
  wire signed [19:0] input_section14_cast; // sfix20_En15
  wire signed [19:0] storage_in_section14_cast; // sfix20_En15
  wire signed [19:0] delay_section141_cast; // sfix20_En15
  wire signed [19:0] delay_section142_cast; // sfix20_En15
  wire signed [19:0] input_section15_cast; // sfix20_En15
  wire signed [19:0] storage_in_section15_cast; // sfix20_En15
  wire signed [19:0] delay_section151_cast; // sfix20_En15
  wire signed [19:0] delay_section152_cast; // sfix20_En15
  wire signed [19:0] input_section16_cast; // sfix20_En15
  wire signed [19:0] storage_in_section16_cast; // sfix20_En15
  wire signed [19:0] delay_section161_cast; // sfix20_En15
  wire signed [19:0] delay_section162_cast; // sfix20_En15
  wire signed [19:0] input_section17_cast; // sfix20_En15
  wire signed [19:0] storage_in_section17_cast; // sfix20_En15
  wire signed [19:0] delay_section171_cast; // sfix20_En15
  wire signed [19:0] delay_section172_cast; // sfix20_En15
  wire signed [19:0] input_section18_cast; // sfix20_En15
  wire signed [19:0] storage_in_section18_cast; // sfix20_En15
  wire signed [19:0] delay_section181_cast; // sfix20_En15
  wire signed [19:0] delay_section182_cast; // sfix20_En15
  wire signed [19:0] inputmux_section_1; // sfix20_En15
  wire signed [31:0] coeffmux_section_1; // sfix32_En22
  wire signed [51:0] prod; // sfix52_En37
  wire signed [31:0] prod_den; // sfix32_En29
  wire signed [39:0] prod_den_cast_temp; // sfix40_En29
  wire signed [39:0] prod_den_cast; // sfix40_En29
  wire signed [39:0] prod_den_cast_neg; // sfix40_En29
  wire signed [40:0] unaryminus_temp; // sfix41_En29
  wire signed [31:0] prod_num; // sfix32_En29
  wire signed [39:0] prod_num_cast_temp; // sfix40_En29
  wire signed [39:0] prod_num_cast; // sfix40_En29
  wire signed [39:0] accum_mux_in1; // sfix40_En29
  wire signed [39:0] accum_mux_in2; // sfix40_En29
  wire signed [39:0] accum_mux_out; // sfix40_En29
  wire signed [39:0] accum_mux_in1_temp; // sfix40_En29
  wire signed [39:0] sectionipconvert_cast; // sfix40_En29
  wire final_phase; // boolean
  wire section_phase; // boolean
  reg  signed [39:0] accum_reg; // sfix40_En29
  wire signed [39:0] add_cast; // sfix40_En29
  wire signed [39:0] add_cast_1; // sfix40_En29
  wire signed [40:0] add_temp; // sfix41_En29
  wire signed [39:0] acc_out_cast_numacc; // sfix40_En29
  wire signed [15:0] sectionopconvert; // sfix16_En11
  wire signed [15:0] output_typeconvert; // sfix16_En11
  reg  signed [15:0] output_register; // sfix16_En11

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (enb_108_1_1_gated == 1'b1) begin
          input_register <= filter_block_in;
        end
      end
    end // input_reg_process

  always @ (posedge clk or posedge reset)
    begin: Counter_process
      if (reset == 1'b1) begin
        cur_count <= 7'b0000000;
      end
      else begin
        if (enb_108_1_1_gated == 1'b1) begin
          if (cur_count >= 7'b1101011) begin
            cur_count <= 7'b0000000;
          end
          else begin
            cur_count <= cur_count + 7'b0000001;
          end
        end
      end
    end // Counter_process

  assign  phase_0 = (cur_count == 7'b0000000 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_2 = (cur_count == 7'b0000010 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_3 = (cur_count == 7'b0000011 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_5 = (cur_count == 7'b0000101 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_6 = (cur_count == 7'b0000110 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_8 = (cur_count == 7'b0001000 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_9 = (cur_count == 7'b0001001 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_11 = (cur_count == 7'b0001011 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_12 = (cur_count == 7'b0001100 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_14 = (cur_count == 7'b0001110 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_15 = (cur_count == 7'b0001111 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_17 = (cur_count == 7'b0010001 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_18 = (cur_count == 7'b0010010 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_20 = (cur_count == 7'b0010100 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_21 = (cur_count == 7'b0010101 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_23 = (cur_count == 7'b0010111 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_24 = (cur_count == 7'b0011000 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_26 = (cur_count == 7'b0011010 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_27 = (cur_count == 7'b0011011 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_29 = (cur_count == 7'b0011101 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_30 = (cur_count == 7'b0011110 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_32 = (cur_count == 7'b0100000 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_33 = (cur_count == 7'b0100001 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_35 = (cur_count == 7'b0100011 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_36 = (cur_count == 7'b0100100 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_38 = (cur_count == 7'b0100110 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_39 = (cur_count == 7'b0100111 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_41 = (cur_count == 7'b0101001 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_42 = (cur_count == 7'b0101010 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_44 = (cur_count == 7'b0101100 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_45 = (cur_count == 7'b0101101 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_47 = (cur_count == 7'b0101111 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_48 = (cur_count == 7'b0110000 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_50 = (cur_count == 7'b0110010 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_51 = (cur_count == 7'b0110011 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_53 = (cur_count == 7'b0110101 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_54 = (cur_count == 7'b0110110 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_56 = (cur_count == 7'b0111000 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_57 = (cur_count == 7'b0111001 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_59 = (cur_count == 7'b0111011 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_60 = (cur_count == 7'b0111100 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_62 = (cur_count == 7'b0111110 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_63 = (cur_count == 7'b0111111 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_65 = (cur_count == 7'b1000001 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_66 = (cur_count == 7'b1000010 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_68 = (cur_count == 7'b1000100 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_69 = (cur_count == 7'b1000101 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_71 = (cur_count == 7'b1000111 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_72 = (cur_count == 7'b1001000 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_74 = (cur_count == 7'b1001010 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_75 = (cur_count == 7'b1001011 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_77 = (cur_count == 7'b1001101 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_78 = (cur_count == 7'b1001110 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_80 = (cur_count == 7'b1010000 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_81 = (cur_count == 7'b1010001 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_83 = (cur_count == 7'b1010011 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_84 = (cur_count == 7'b1010100 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_86 = (cur_count == 7'b1010110 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_87 = (cur_count == 7'b1010111 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_89 = (cur_count == 7'b1011001 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_90 = (cur_count == 7'b1011010 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_92 = (cur_count == 7'b1011100 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_93 = (cur_count == 7'b1011101 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_95 = (cur_count == 7'b1011111 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_96 = (cur_count == 7'b1100000 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_98 = (cur_count == 7'b1100010 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_99 = (cur_count == 7'b1100011 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_101 = (cur_count == 7'b1100101 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_102 = (cur_count == 7'b1100110 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_104 = (cur_count == 7'b1101000 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_105 = (cur_count == 7'b1101001 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_107 = (cur_count == 7'b1101011 && enb_108_1_1_gated == 1'b1) ? 1'b1 : 1'b0;


  // Next stage input = Previous stage output. Storing Previous stage output
  always @ (posedge clk or posedge reset)
    begin: prev_stg_op1_process
      if (reset == 1'b1) begin
        prev_stg_op1 <= 0;
      end
      else begin
        if (phase_5 == 1'b1) begin
          prev_stg_op1 <= sectionopconvert;
        end
      end
    end // prev_stg_op1_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op2_process
      if (reset == 1'b1) begin
        prev_stg_op2 <= 0;
      end
      else begin
        if (phase_11 == 1'b1) begin
          prev_stg_op2 <= sectionopconvert;
        end
      end
    end // prev_stg_op2_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op3_process
      if (reset == 1'b1) begin
        prev_stg_op3 <= 0;
      end
      else begin
        if (phase_17 == 1'b1) begin
          prev_stg_op3 <= sectionopconvert;
        end
      end
    end // prev_stg_op3_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op4_process
      if (reset == 1'b1) begin
        prev_stg_op4 <= 0;
      end
      else begin
        if (phase_23 == 1'b1) begin
          prev_stg_op4 <= sectionopconvert;
        end
      end
    end // prev_stg_op4_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op5_process
      if (reset == 1'b1) begin
        prev_stg_op5 <= 0;
      end
      else begin
        if (phase_29 == 1'b1) begin
          prev_stg_op5 <= sectionopconvert;
        end
      end
    end // prev_stg_op5_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op6_process
      if (reset == 1'b1) begin
        prev_stg_op6 <= 0;
      end
      else begin
        if (phase_35 == 1'b1) begin
          prev_stg_op6 <= sectionopconvert;
        end
      end
    end // prev_stg_op6_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op7_process
      if (reset == 1'b1) begin
        prev_stg_op7 <= 0;
      end
      else begin
        if (phase_41 == 1'b1) begin
          prev_stg_op7 <= sectionopconvert;
        end
      end
    end // prev_stg_op7_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op8_process
      if (reset == 1'b1) begin
        prev_stg_op8 <= 0;
      end
      else begin
        if (phase_47 == 1'b1) begin
          prev_stg_op8 <= sectionopconvert;
        end
      end
    end // prev_stg_op8_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op9_process
      if (reset == 1'b1) begin
        prev_stg_op9 <= 0;
      end
      else begin
        if (phase_53 == 1'b1) begin
          prev_stg_op9 <= sectionopconvert;
        end
      end
    end // prev_stg_op9_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op10_process
      if (reset == 1'b1) begin
        prev_stg_op10 <= 0;
      end
      else begin
        if (phase_59 == 1'b1) begin
          prev_stg_op10 <= sectionopconvert;
        end
      end
    end // prev_stg_op10_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op11_process
      if (reset == 1'b1) begin
        prev_stg_op11 <= 0;
      end
      else begin
        if (phase_65 == 1'b1) begin
          prev_stg_op11 <= sectionopconvert;
        end
      end
    end // prev_stg_op11_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op12_process
      if (reset == 1'b1) begin
        prev_stg_op12 <= 0;
      end
      else begin
        if (phase_71 == 1'b1) begin
          prev_stg_op12 <= sectionopconvert;
        end
      end
    end // prev_stg_op12_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op13_process
      if (reset == 1'b1) begin
        prev_stg_op13 <= 0;
      end
      else begin
        if (phase_77 == 1'b1) begin
          prev_stg_op13 <= sectionopconvert;
        end
      end
    end // prev_stg_op13_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op14_process
      if (reset == 1'b1) begin
        prev_stg_op14 <= 0;
      end
      else begin
        if (phase_83 == 1'b1) begin
          prev_stg_op14 <= sectionopconvert;
        end
      end
    end // prev_stg_op14_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op15_process
      if (reset == 1'b1) begin
        prev_stg_op15 <= 0;
      end
      else begin
        if (phase_89 == 1'b1) begin
          prev_stg_op15 <= sectionopconvert;
        end
      end
    end // prev_stg_op15_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op16_process
      if (reset == 1'b1) begin
        prev_stg_op16 <= 0;
      end
      else begin
        if (phase_95 == 1'b1) begin
          prev_stg_op16 <= sectionopconvert;
        end
      end
    end // prev_stg_op16_process

  always @ (posedge clk or posedge reset)
    begin: prev_stg_op17_process
      if (reset == 1'b1) begin
        prev_stg_op17 <= 0;
      end
      else begin
        if (phase_101 == 1'b1) begin
          prev_stg_op17 <= sectionopconvert;
        end
      end
    end // prev_stg_op17_process

  always @ (posedge clk or posedge reset)
    begin: delay_process_section1
      if (reset == 1'b1) begin
        delay_section1[0] <= 16'b0000000000000000;
        delay_section1[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section1[1] <= delay_section1[0];
          delay_section1[0] <= storage_state_in1;
        end
      end
    end // delay_process_section1

  always @ (posedge clk or posedge reset)
    begin: delay_process_section2
      if (reset == 1'b1) begin
        delay_section2[0] <= 16'b0000000000000000;
        delay_section2[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section2[1] <= delay_section2[0];
          delay_section2[0] <= storage_state_in2;
        end
      end
    end // delay_process_section2

  always @ (posedge clk or posedge reset)
    begin: delay_process_section3
      if (reset == 1'b1) begin
        delay_section3[0] <= 16'b0000000000000000;
        delay_section3[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section3[1] <= delay_section3[0];
          delay_section3[0] <= storage_state_in3;
        end
      end
    end // delay_process_section3

  always @ (posedge clk or posedge reset)
    begin: delay_process_section4
      if (reset == 1'b1) begin
        delay_section4[0] <= 16'b0000000000000000;
        delay_section4[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section4[1] <= delay_section4[0];
          delay_section4[0] <= storage_state_in4;
        end
      end
    end // delay_process_section4

  always @ (posedge clk or posedge reset)
    begin: delay_process_section5
      if (reset == 1'b1) begin
        delay_section5[0] <= 16'b0000000000000000;
        delay_section5[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section5[1] <= delay_section5[0];
          delay_section5[0] <= storage_state_in5;
        end
      end
    end // delay_process_section5

  always @ (posedge clk or posedge reset)
    begin: delay_process_section6
      if (reset == 1'b1) begin
        delay_section6[0] <= 16'b0000000000000000;
        delay_section6[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section6[1] <= delay_section6[0];
          delay_section6[0] <= storage_state_in6;
        end
      end
    end // delay_process_section6

  always @ (posedge clk or posedge reset)
    begin: delay_process_section7
      if (reset == 1'b1) begin
        delay_section7[0] <= 16'b0000000000000000;
        delay_section7[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section7[1] <= delay_section7[0];
          delay_section7[0] <= storage_state_in7;
        end
      end
    end // delay_process_section7

  always @ (posedge clk or posedge reset)
    begin: delay_process_section8
      if (reset == 1'b1) begin
        delay_section8[0] <= 16'b0000000000000000;
        delay_section8[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section8[1] <= delay_section8[0];
          delay_section8[0] <= storage_state_in8;
        end
      end
    end // delay_process_section8

  always @ (posedge clk or posedge reset)
    begin: delay_process_section9
      if (reset == 1'b1) begin
        delay_section9[0] <= 16'b0000000000000000;
        delay_section9[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section9[1] <= delay_section9[0];
          delay_section9[0] <= storage_state_in9;
        end
      end
    end // delay_process_section9

  always @ (posedge clk or posedge reset)
    begin: delay_process_section10
      if (reset == 1'b1) begin
        delay_section10[0] <= 16'b0000000000000000;
        delay_section10[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section10[1] <= delay_section10[0];
          delay_section10[0] <= storage_state_in10;
        end
      end
    end // delay_process_section10

  always @ (posedge clk or posedge reset)
    begin: delay_process_section11
      if (reset == 1'b1) begin
        delay_section11[0] <= 16'b0000000000000000;
        delay_section11[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section11[1] <= delay_section11[0];
          delay_section11[0] <= storage_state_in11;
        end
      end
    end // delay_process_section11

  always @ (posedge clk or posedge reset)
    begin: delay_process_section12
      if (reset == 1'b1) begin
        delay_section12[0] <= 16'b0000000000000000;
        delay_section12[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section12[1] <= delay_section12[0];
          delay_section12[0] <= storage_state_in12;
        end
      end
    end // delay_process_section12

  always @ (posedge clk or posedge reset)
    begin: delay_process_section13
      if (reset == 1'b1) begin
        delay_section13[0] <= 16'b0000000000000000;
        delay_section13[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section13[1] <= delay_section13[0];
          delay_section13[0] <= storage_state_in13;
        end
      end
    end // delay_process_section13

  always @ (posedge clk or posedge reset)
    begin: delay_process_section14
      if (reset == 1'b1) begin
        delay_section14[0] <= 16'b0000000000000000;
        delay_section14[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section14[1] <= delay_section14[0];
          delay_section14[0] <= storage_state_in14;
        end
      end
    end // delay_process_section14

  always @ (posedge clk or posedge reset)
    begin: delay_process_section15
      if (reset == 1'b1) begin
        delay_section15[0] <= 16'b0000000000000000;
        delay_section15[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section15[1] <= delay_section15[0];
          delay_section15[0] <= storage_state_in15;
        end
      end
    end // delay_process_section15

  always @ (posedge clk or posedge reset)
    begin: delay_process_section16
      if (reset == 1'b1) begin
        delay_section16[0] <= 16'b0000000000000000;
        delay_section16[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section16[1] <= delay_section16[0];
          delay_section16[0] <= storage_state_in16;
        end
      end
    end // delay_process_section16

  always @ (posedge clk or posedge reset)
    begin: delay_process_section17
      if (reset == 1'b1) begin
        delay_section17[0] <= 16'b0000000000000000;
        delay_section17[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section17[1] <= delay_section17[0];
          delay_section17[0] <= storage_state_in17;
        end
      end
    end // delay_process_section17

  always @ (posedge clk or posedge reset)
    begin: delay_process_section18
      if (reset == 1'b1) begin
        delay_section18[0] <= 16'b0000000000000000;
        delay_section18[1] <= 16'b0000000000000000;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_section18[1] <= delay_section18[0];
          delay_section18[0] <= storage_state_in18;
        end
      end
    end // delay_process_section18

  // Making common precision for input and state 
  assign input_section1_cast = $signed({{4{input_register[15]}}, input_register});

  assign delay_section11_cast = $signed({{4{delay_section1[0][15]}}, delay_section1[0]});

  assign delay_section12_cast = $signed({{4{delay_section1[1][15]}}, delay_section1[1]});

  assign storage_in_section1_cast = $signed({{4{storage_state_in1[15]}}, storage_state_in1});

  assign input_section2_cast = $signed({prev_stg_op1[15:0], 4'b0000});

  assign delay_section21_cast = $signed({{4{delay_section2[0][15]}}, delay_section2[0]});

  assign delay_section22_cast = $signed({{4{delay_section2[1][15]}}, delay_section2[1]});

  assign storage_in_section2_cast = $signed({{4{storage_state_in2[15]}}, storage_state_in2});

  assign input_section3_cast = $signed({prev_stg_op2[15:0], 4'b0000});

  assign delay_section31_cast = $signed({{4{delay_section3[0][15]}}, delay_section3[0]});

  assign delay_section32_cast = $signed({{4{delay_section3[1][15]}}, delay_section3[1]});

  assign storage_in_section3_cast = $signed({{4{storage_state_in3[15]}}, storage_state_in3});

  assign input_section4_cast = $signed({prev_stg_op3[15:0], 4'b0000});

  assign delay_section41_cast = $signed({{4{delay_section4[0][15]}}, delay_section4[0]});

  assign delay_section42_cast = $signed({{4{delay_section4[1][15]}}, delay_section4[1]});

  assign storage_in_section4_cast = $signed({{4{storage_state_in4[15]}}, storage_state_in4});

  assign input_section5_cast = $signed({prev_stg_op4[15:0], 4'b0000});

  assign delay_section51_cast = $signed({{4{delay_section5[0][15]}}, delay_section5[0]});

  assign delay_section52_cast = $signed({{4{delay_section5[1][15]}}, delay_section5[1]});

  assign storage_in_section5_cast = $signed({{4{storage_state_in5[15]}}, storage_state_in5});

  assign input_section6_cast = $signed({prev_stg_op5[15:0], 4'b0000});

  assign delay_section61_cast = $signed({{4{delay_section6[0][15]}}, delay_section6[0]});

  assign delay_section62_cast = $signed({{4{delay_section6[1][15]}}, delay_section6[1]});

  assign storage_in_section6_cast = $signed({{4{storage_state_in6[15]}}, storage_state_in6});

  assign input_section7_cast = $signed({prev_stg_op6[15:0], 4'b0000});

  assign delay_section71_cast = $signed({{4{delay_section7[0][15]}}, delay_section7[0]});

  assign delay_section72_cast = $signed({{4{delay_section7[1][15]}}, delay_section7[1]});

  assign storage_in_section7_cast = $signed({{4{storage_state_in7[15]}}, storage_state_in7});

  assign input_section8_cast = $signed({prev_stg_op7[15:0], 4'b0000});

  assign delay_section81_cast = $signed({{4{delay_section8[0][15]}}, delay_section8[0]});

  assign delay_section82_cast = $signed({{4{delay_section8[1][15]}}, delay_section8[1]});

  assign storage_in_section8_cast = $signed({{4{storage_state_in8[15]}}, storage_state_in8});

  assign input_section9_cast = $signed({prev_stg_op8[15:0], 4'b0000});

  assign delay_section91_cast = $signed({{4{delay_section9[0][15]}}, delay_section9[0]});

  assign delay_section92_cast = $signed({{4{delay_section9[1][15]}}, delay_section9[1]});

  assign storage_in_section9_cast = $signed({{4{storage_state_in9[15]}}, storage_state_in9});

  assign input_section10_cast = $signed({prev_stg_op9[15:0], 4'b0000});

  assign delay_section101_cast = $signed({{4{delay_section10[0][15]}}, delay_section10[0]});

  assign delay_section102_cast = $signed({{4{delay_section10[1][15]}}, delay_section10[1]});

  assign storage_in_section10_cast = $signed({{4{storage_state_in10[15]}}, storage_state_in10});

  assign input_section11_cast = $signed({prev_stg_op10[15:0], 4'b0000});

  assign delay_section111_cast = $signed({{4{delay_section11[0][15]}}, delay_section11[0]});

  assign delay_section112_cast = $signed({{4{delay_section11[1][15]}}, delay_section11[1]});

  assign storage_in_section11_cast = $signed({{4{storage_state_in11[15]}}, storage_state_in11});

  assign input_section12_cast = $signed({prev_stg_op11[15:0], 4'b0000});

  assign delay_section121_cast = $signed({{4{delay_section12[0][15]}}, delay_section12[0]});

  assign delay_section122_cast = $signed({{4{delay_section12[1][15]}}, delay_section12[1]});

  assign storage_in_section12_cast = $signed({{4{storage_state_in12[15]}}, storage_state_in12});

  assign input_section13_cast = $signed({prev_stg_op12[15:0], 4'b0000});

  assign delay_section131_cast = $signed({{4{delay_section13[0][15]}}, delay_section13[0]});

  assign delay_section132_cast = $signed({{4{delay_section13[1][15]}}, delay_section13[1]});

  assign storage_in_section13_cast = $signed({{4{storage_state_in13[15]}}, storage_state_in13});

  assign input_section14_cast = $signed({prev_stg_op13[15:0], 4'b0000});

  assign delay_section141_cast = $signed({{4{delay_section14[0][15]}}, delay_section14[0]});

  assign delay_section142_cast = $signed({{4{delay_section14[1][15]}}, delay_section14[1]});

  assign storage_in_section14_cast = $signed({{4{storage_state_in14[15]}}, storage_state_in14});

  assign input_section15_cast = $signed({prev_stg_op14[15:0], 4'b0000});

  assign delay_section151_cast = $signed({{4{delay_section15[0][15]}}, delay_section15[0]});

  assign delay_section152_cast = $signed({{4{delay_section15[1][15]}}, delay_section15[1]});

  assign storage_in_section15_cast = $signed({{4{storage_state_in15[15]}}, storage_state_in15});

  assign input_section16_cast = $signed({prev_stg_op15[15:0], 4'b0000});

  assign delay_section161_cast = $signed({{4{delay_section16[0][15]}}, delay_section16[0]});

  assign delay_section162_cast = $signed({{4{delay_section16[1][15]}}, delay_section16[1]});

  assign storage_in_section16_cast = $signed({{4{storage_state_in16[15]}}, storage_state_in16});

  assign input_section17_cast = $signed({prev_stg_op16[15:0], 4'b0000});

  assign delay_section171_cast = $signed({{4{delay_section17[0][15]}}, delay_section17[0]});

  assign delay_section172_cast = $signed({{4{delay_section17[1][15]}}, delay_section17[1]});

  assign storage_in_section17_cast = $signed({{4{storage_state_in17[15]}}, storage_state_in17});

  assign input_section18_cast = $signed({prev_stg_op17[15:0], 4'b0000});

  assign delay_section181_cast = $signed({{4{delay_section18[0][15]}}, delay_section18[0]});

  assign delay_section182_cast = $signed({{4{delay_section18[1][15]}}, delay_section18[1]});

  assign storage_in_section18_cast = $signed({{4{storage_state_in18[15]}}, storage_state_in18});

  assign inputmux_section_1 = (cur_count == 7'b0000000) ? input_section1_cast :
                             (cur_count == 7'b0000001) ? delay_section11_cast :
                             (cur_count == 7'b0000010) ? delay_section12_cast :
                             (cur_count == 7'b0000011) ? storage_in_section1_cast :
                             (cur_count == 7'b0000100) ? delay_section11_cast :
                             (cur_count == 7'b0000101) ? delay_section12_cast :
                             (cur_count == 7'b0000110) ? input_section2_cast :
                             (cur_count == 7'b0000111) ? delay_section21_cast :
                             (cur_count == 7'b0001000) ? delay_section22_cast :
                             (cur_count == 7'b0001001) ? storage_in_section2_cast :
                             (cur_count == 7'b0001010) ? delay_section21_cast :
                             (cur_count == 7'b0001011) ? delay_section22_cast :
                             (cur_count == 7'b0001100) ? input_section3_cast :
                             (cur_count == 7'b0001101) ? delay_section31_cast :
                             (cur_count == 7'b0001110) ? delay_section32_cast :
                             (cur_count == 7'b0001111) ? storage_in_section3_cast :
                             (cur_count == 7'b0010000) ? delay_section31_cast :
                             (cur_count == 7'b0010001) ? delay_section32_cast :
                             (cur_count == 7'b0010010) ? input_section4_cast :
                             (cur_count == 7'b0010011) ? delay_section41_cast :
                             (cur_count == 7'b0010100) ? delay_section42_cast :
                             (cur_count == 7'b0010101) ? storage_in_section4_cast :
                             (cur_count == 7'b0010110) ? delay_section41_cast :
                             (cur_count == 7'b0010111) ? delay_section42_cast :
                             (cur_count == 7'b0011000) ? input_section5_cast :
                             (cur_count == 7'b0011001) ? delay_section51_cast :
                             (cur_count == 7'b0011010) ? delay_section52_cast :
                             (cur_count == 7'b0011011) ? storage_in_section5_cast :
                             (cur_count == 7'b0011100) ? delay_section51_cast :
                             (cur_count == 7'b0011101) ? delay_section52_cast :
                             (cur_count == 7'b0011110) ? input_section6_cast :
                             (cur_count == 7'b0011111) ? delay_section61_cast :
                             (cur_count == 7'b0100000) ? delay_section62_cast :
                             (cur_count == 7'b0100001) ? storage_in_section6_cast :
                             (cur_count == 7'b0100010) ? delay_section61_cast :
                             (cur_count == 7'b0100011) ? delay_section62_cast :
                             (cur_count == 7'b0100100) ? input_section7_cast :
                             (cur_count == 7'b0100101) ? delay_section71_cast :
                             (cur_count == 7'b0100110) ? delay_section72_cast :
                             (cur_count == 7'b0100111) ? storage_in_section7_cast :
                             (cur_count == 7'b0101000) ? delay_section71_cast :
                             (cur_count == 7'b0101001) ? delay_section72_cast :
                             (cur_count == 7'b0101010) ? input_section8_cast :
                             (cur_count == 7'b0101011) ? delay_section81_cast :
                             (cur_count == 7'b0101100) ? delay_section82_cast :
                             (cur_count == 7'b0101101) ? storage_in_section8_cast :
                             (cur_count == 7'b0101110) ? delay_section81_cast :
                             (cur_count == 7'b0101111) ? delay_section82_cast :
                             (cur_count == 7'b0110000) ? input_section9_cast :
                             (cur_count == 7'b0110001) ? delay_section91_cast :
                             (cur_count == 7'b0110010) ? delay_section92_cast :
                             (cur_count == 7'b0110011) ? storage_in_section9_cast :
                             (cur_count == 7'b0110100) ? delay_section91_cast :
                             (cur_count == 7'b0110101) ? delay_section92_cast :
                             (cur_count == 7'b0110110) ? input_section10_cast :
                             (cur_count == 7'b0110111) ? delay_section101_cast :
                             (cur_count == 7'b0111000) ? delay_section102_cast :
                             (cur_count == 7'b0111001) ? storage_in_section10_cast :
                             (cur_count == 7'b0111010) ? delay_section101_cast :
                             (cur_count == 7'b0111011) ? delay_section102_cast :
                             (cur_count == 7'b0111100) ? input_section11_cast :
                             (cur_count == 7'b0111101) ? delay_section111_cast :
                             (cur_count == 7'b0111110) ? delay_section112_cast :
                             (cur_count == 7'b0111111) ? storage_in_section11_cast :
                             (cur_count == 7'b1000000) ? delay_section111_cast :
                             (cur_count == 7'b1000001) ? delay_section112_cast :
                             (cur_count == 7'b1000010) ? input_section12_cast :
                             (cur_count == 7'b1000011) ? delay_section121_cast :
                             (cur_count == 7'b1000100) ? delay_section122_cast :
                             (cur_count == 7'b1000101) ? storage_in_section12_cast :
                             (cur_count == 7'b1000110) ? delay_section121_cast :
                             (cur_count == 7'b1000111) ? delay_section122_cast :
                             (cur_count == 7'b1001000) ? input_section13_cast :
                             (cur_count == 7'b1001001) ? delay_section131_cast :
                             (cur_count == 7'b1001010) ? delay_section132_cast :
                             (cur_count == 7'b1001011) ? storage_in_section13_cast :
                             (cur_count == 7'b1001100) ? delay_section131_cast :
                             (cur_count == 7'b1001101) ? delay_section132_cast :
                             (cur_count == 7'b1001110) ? input_section14_cast :
                             (cur_count == 7'b1001111) ? delay_section141_cast :
                             (cur_count == 7'b1010000) ? delay_section142_cast :
                             (cur_count == 7'b1010001) ? storage_in_section14_cast :
                             (cur_count == 7'b1010010) ? delay_section141_cast :
                             (cur_count == 7'b1010011) ? delay_section142_cast :
                             (cur_count == 7'b1010100) ? input_section15_cast :
                             (cur_count == 7'b1010101) ? delay_section151_cast :
                             (cur_count == 7'b1010110) ? delay_section152_cast :
                             (cur_count == 7'b1010111) ? storage_in_section15_cast :
                             (cur_count == 7'b1011000) ? delay_section151_cast :
                             (cur_count == 7'b1011001) ? delay_section152_cast :
                             (cur_count == 7'b1011010) ? input_section16_cast :
                             (cur_count == 7'b1011011) ? delay_section161_cast :
                             (cur_count == 7'b1011100) ? delay_section162_cast :
                             (cur_count == 7'b1011101) ? storage_in_section16_cast :
                             (cur_count == 7'b1011110) ? delay_section161_cast :
                             (cur_count == 7'b1011111) ? delay_section162_cast :
                             (cur_count == 7'b1100000) ? input_section17_cast :
                             (cur_count == 7'b1100001) ? delay_section171_cast :
                             (cur_count == 7'b1100010) ? delay_section172_cast :
                             (cur_count == 7'b1100011) ? storage_in_section17_cast :
                             (cur_count == 7'b1100100) ? delay_section171_cast :
                             (cur_count == 7'b1100101) ? delay_section172_cast :
                             (cur_count == 7'b1100110) ? input_section18_cast :
                             (cur_count == 7'b1100111) ? delay_section181_cast :
                             (cur_count == 7'b1101000) ? delay_section182_cast :
                             (cur_count == 7'b1101001) ? storage_in_section18_cast :
                             (cur_count == 7'b1101010) ? delay_section181_cast :
                             delay_section182_cast;

  assign coeffmux_section_1 = (cur_count == 7'b0000000) ? scaleconst1 :
                             (cur_count == 7'b0000001) ? coeff_a2_section1 :
                             (cur_count == 7'b0000010) ? coeff_a3_section1 :
                             (cur_count == 7'b0000011) ? coeff_b1_section1 :
                             (cur_count == 7'b0000100) ? coeff_b2_section1 :
                             (cur_count == 7'b0000101) ? coeff_b3_section1 :
                             (cur_count == 7'b0000110) ? scaleconst2 :
                             (cur_count == 7'b0000111) ? coeff_a2_section2 :
                             (cur_count == 7'b0001000) ? coeff_a3_section2 :
                             (cur_count == 7'b0001001) ? coeff_b1_section2 :
                             (cur_count == 7'b0001010) ? coeff_b2_section2 :
                             (cur_count == 7'b0001011) ? coeff_b3_section2 :
                             (cur_count == 7'b0001100) ? scaleconst3 :
                             (cur_count == 7'b0001101) ? coeff_a2_section3 :
                             (cur_count == 7'b0001110) ? coeff_a3_section3 :
                             (cur_count == 7'b0001111) ? coeff_b1_section3 :
                             (cur_count == 7'b0010000) ? coeff_b2_section3 :
                             (cur_count == 7'b0010001) ? coeff_b3_section3 :
                             (cur_count == 7'b0010010) ? scaleconst4 :
                             (cur_count == 7'b0010011) ? coeff_a2_section4 :
                             (cur_count == 7'b0010100) ? coeff_a3_section4 :
                             (cur_count == 7'b0010101) ? coeff_b1_section4 :
                             (cur_count == 7'b0010110) ? coeff_b2_section4 :
                             (cur_count == 7'b0010111) ? coeff_b3_section4 :
                             (cur_count == 7'b0011000) ? scaleconst5 :
                             (cur_count == 7'b0011001) ? coeff_a2_section5 :
                             (cur_count == 7'b0011010) ? coeff_a3_section5 :
                             (cur_count == 7'b0011011) ? coeff_b1_section5 :
                             (cur_count == 7'b0011100) ? coeff_b2_section5 :
                             (cur_count == 7'b0011101) ? coeff_b3_section5 :
                             (cur_count == 7'b0011110) ? scaleconst6 :
                             (cur_count == 7'b0011111) ? coeff_a2_section6 :
                             (cur_count == 7'b0100000) ? coeff_a3_section6 :
                             (cur_count == 7'b0100001) ? coeff_b1_section6 :
                             (cur_count == 7'b0100010) ? coeff_b2_section6 :
                             (cur_count == 7'b0100011) ? coeff_b3_section6 :
                             (cur_count == 7'b0100100) ? scaleconst7 :
                             (cur_count == 7'b0100101) ? coeff_a2_section7 :
                             (cur_count == 7'b0100110) ? coeff_a3_section7 :
                             (cur_count == 7'b0100111) ? coeff_b1_section7 :
                             (cur_count == 7'b0101000) ? coeff_b2_section7 :
                             (cur_count == 7'b0101001) ? coeff_b3_section7 :
                             (cur_count == 7'b0101010) ? scaleconst8 :
                             (cur_count == 7'b0101011) ? coeff_a2_section8 :
                             (cur_count == 7'b0101100) ? coeff_a3_section8 :
                             (cur_count == 7'b0101101) ? coeff_b1_section8 :
                             (cur_count == 7'b0101110) ? coeff_b2_section8 :
                             (cur_count == 7'b0101111) ? coeff_b3_section8 :
                             (cur_count == 7'b0110000) ? scaleconst9 :
                             (cur_count == 7'b0110001) ? coeff_a2_section9 :
                             (cur_count == 7'b0110010) ? coeff_a3_section9 :
                             (cur_count == 7'b0110011) ? coeff_b1_section9 :
                             (cur_count == 7'b0110100) ? coeff_b2_section9 :
                             (cur_count == 7'b0110101) ? coeff_b3_section9 :
                             (cur_count == 7'b0110110) ? scaleconst10 :
                             (cur_count == 7'b0110111) ? coeff_a2_section10 :
                             (cur_count == 7'b0111000) ? coeff_a3_section10 :
                             (cur_count == 7'b0111001) ? coeff_b1_section10 :
                             (cur_count == 7'b0111010) ? coeff_b2_section10 :
                             (cur_count == 7'b0111011) ? coeff_b3_section10 :
                             (cur_count == 7'b0111100) ? scaleconst11 :
                             (cur_count == 7'b0111101) ? coeff_a2_section11 :
                             (cur_count == 7'b0111110) ? coeff_a3_section11 :
                             (cur_count == 7'b0111111) ? coeff_b1_section11 :
                             (cur_count == 7'b1000000) ? coeff_b2_section11 :
                             (cur_count == 7'b1000001) ? coeff_b3_section11 :
                             (cur_count == 7'b1000010) ? scaleconst12 :
                             (cur_count == 7'b1000011) ? coeff_a2_section12 :
                             (cur_count == 7'b1000100) ? coeff_a3_section12 :
                             (cur_count == 7'b1000101) ? coeff_b1_section12 :
                             (cur_count == 7'b1000110) ? coeff_b2_section12 :
                             (cur_count == 7'b1000111) ? coeff_b3_section12 :
                             (cur_count == 7'b1001000) ? scaleconst13 :
                             (cur_count == 7'b1001001) ? coeff_a2_section13 :
                             (cur_count == 7'b1001010) ? coeff_a3_section13 :
                             (cur_count == 7'b1001011) ? coeff_b1_section13 :
                             (cur_count == 7'b1001100) ? coeff_b2_section13 :
                             (cur_count == 7'b1001101) ? coeff_b3_section13 :
                             (cur_count == 7'b1001110) ? scaleconst14 :
                             (cur_count == 7'b1001111) ? coeff_a2_section14 :
                             (cur_count == 7'b1010000) ? coeff_a3_section14 :
                             (cur_count == 7'b1010001) ? coeff_b1_section14 :
                             (cur_count == 7'b1010010) ? coeff_b2_section14 :
                             (cur_count == 7'b1010011) ? coeff_b3_section14 :
                             (cur_count == 7'b1010100) ? scaleconst15 :
                             (cur_count == 7'b1010101) ? coeff_a2_section15 :
                             (cur_count == 7'b1010110) ? coeff_a3_section15 :
                             (cur_count == 7'b1010111) ? coeff_b1_section15 :
                             (cur_count == 7'b1011000) ? coeff_b2_section15 :
                             (cur_count == 7'b1011001) ? coeff_b3_section15 :
                             (cur_count == 7'b1011010) ? scaleconst16 :
                             (cur_count == 7'b1011011) ? coeff_a2_section16 :
                             (cur_count == 7'b1011100) ? coeff_a3_section16 :
                             (cur_count == 7'b1011101) ? coeff_b1_section16 :
                             (cur_count == 7'b1011110) ? coeff_b2_section16 :
                             (cur_count == 7'b1011111) ? coeff_b3_section16 :
                             (cur_count == 7'b1100000) ? scaleconst17 :
                             (cur_count == 7'b1100001) ? coeff_a2_section17 :
                             (cur_count == 7'b1100010) ? coeff_a3_section17 :
                             (cur_count == 7'b1100011) ? coeff_b1_section17 :
                             (cur_count == 7'b1100100) ? coeff_b2_section17 :
                             (cur_count == 7'b1100101) ? coeff_b3_section17 :
                             (cur_count == 7'b1100110) ? scaleconst18 :
                             (cur_count == 7'b1100111) ? coeff_a2_section18 :
                             (cur_count == 7'b1101000) ? coeff_a3_section18 :
                             (cur_count == 7'b1101001) ? coeff_b1_section18 :
                             (cur_count == 7'b1101010) ? coeff_b2_section18 :
                             coeff_b3_section18;

  assign prod = inputmux_section_1 * coeffmux_section_1;

  assign prod_den = (prod[39:0] + {prod[8], {7{~prod[8]}}})>>>8;

  assign prod_den_cast_temp = $signed({{8{prod_den[31]}}, prod_den});

  assign prod_den_cast = prod_den_cast_temp;

  assign unaryminus_temp = (prod_den_cast==40'b1000000000000000000000000000000000000000) ? $signed({1'b0, prod_den_cast}) : -prod_den_cast;
  assign prod_den_cast_neg = unaryminus_temp[39:0];

  assign prod_num = (prod[39:0] + {prod[8], {7{~prod[8]}}})>>>8;

  assign prod_num_cast_temp = $signed({{8{prod_num[31]}}, prod_num});

  assign prod_num_cast = prod_num_cast_temp;

  assign accum_mux_in1 = (cur_count == 7'b0000000) ? prod_num_cast :
                        (cur_count == 7'b0000001) ? prod_den_cast_neg :
                        (cur_count == 7'b0000010) ? prod_den_cast_neg :
                        (cur_count == 7'b0000011) ? prod_num_cast :
                        (cur_count == 7'b0000100) ? prod_num_cast :
                        (cur_count == 7'b0000101) ? prod_num_cast :
                        (cur_count == 7'b0000110) ? prod_num_cast :
                        (cur_count == 7'b0000111) ? prod_den_cast_neg :
                        (cur_count == 7'b0001000) ? prod_den_cast_neg :
                        (cur_count == 7'b0001001) ? prod_num_cast :
                        (cur_count == 7'b0001010) ? prod_num_cast :
                        (cur_count == 7'b0001011) ? prod_num_cast :
                        (cur_count == 7'b0001100) ? prod_num_cast :
                        (cur_count == 7'b0001101) ? prod_den_cast_neg :
                        (cur_count == 7'b0001110) ? prod_den_cast_neg :
                        (cur_count == 7'b0001111) ? prod_num_cast :
                        (cur_count == 7'b0010000) ? prod_num_cast :
                        (cur_count == 7'b0010001) ? prod_num_cast :
                        (cur_count == 7'b0010010) ? prod_num_cast :
                        (cur_count == 7'b0010011) ? prod_den_cast_neg :
                        (cur_count == 7'b0010100) ? prod_den_cast_neg :
                        (cur_count == 7'b0010101) ? prod_num_cast :
                        (cur_count == 7'b0010110) ? prod_num_cast :
                        (cur_count == 7'b0010111) ? prod_num_cast :
                        (cur_count == 7'b0011000) ? prod_num_cast :
                        (cur_count == 7'b0011001) ? prod_den_cast_neg :
                        (cur_count == 7'b0011010) ? prod_den_cast_neg :
                        (cur_count == 7'b0011011) ? prod_num_cast :
                        (cur_count == 7'b0011100) ? prod_num_cast :
                        (cur_count == 7'b0011101) ? prod_num_cast :
                        (cur_count == 7'b0011110) ? prod_num_cast :
                        (cur_count == 7'b0011111) ? prod_den_cast_neg :
                        (cur_count == 7'b0100000) ? prod_den_cast_neg :
                        (cur_count == 7'b0100001) ? prod_num_cast :
                        (cur_count == 7'b0100010) ? prod_num_cast :
                        (cur_count == 7'b0100011) ? prod_num_cast :
                        (cur_count == 7'b0100100) ? prod_num_cast :
                        (cur_count == 7'b0100101) ? prod_den_cast_neg :
                        (cur_count == 7'b0100110) ? prod_den_cast_neg :
                        (cur_count == 7'b0100111) ? prod_num_cast :
                        (cur_count == 7'b0101000) ? prod_num_cast :
                        (cur_count == 7'b0101001) ? prod_num_cast :
                        (cur_count == 7'b0101010) ? prod_num_cast :
                        (cur_count == 7'b0101011) ? prod_den_cast_neg :
                        (cur_count == 7'b0101100) ? prod_den_cast_neg :
                        (cur_count == 7'b0101101) ? prod_num_cast :
                        (cur_count == 7'b0101110) ? prod_num_cast :
                        (cur_count == 7'b0101111) ? prod_num_cast :
                        (cur_count == 7'b0110000) ? prod_num_cast :
                        (cur_count == 7'b0110001) ? prod_den_cast_neg :
                        (cur_count == 7'b0110010) ? prod_den_cast_neg :
                        (cur_count == 7'b0110011) ? prod_num_cast :
                        (cur_count == 7'b0110100) ? prod_num_cast :
                        (cur_count == 7'b0110101) ? prod_num_cast :
                        (cur_count == 7'b0110110) ? prod_num_cast :
                        (cur_count == 7'b0110111) ? prod_den_cast_neg :
                        (cur_count == 7'b0111000) ? prod_den_cast_neg :
                        (cur_count == 7'b0111001) ? prod_num_cast :
                        (cur_count == 7'b0111010) ? prod_num_cast :
                        (cur_count == 7'b0111011) ? prod_num_cast :
                        (cur_count == 7'b0111100) ? prod_num_cast :
                        (cur_count == 7'b0111101) ? prod_den_cast_neg :
                        (cur_count == 7'b0111110) ? prod_den_cast_neg :
                        (cur_count == 7'b0111111) ? prod_num_cast :
                        (cur_count == 7'b1000000) ? prod_num_cast :
                        (cur_count == 7'b1000001) ? prod_num_cast :
                        (cur_count == 7'b1000010) ? prod_num_cast :
                        (cur_count == 7'b1000011) ? prod_den_cast_neg :
                        (cur_count == 7'b1000100) ? prod_den_cast_neg :
                        (cur_count == 7'b1000101) ? prod_num_cast :
                        (cur_count == 7'b1000110) ? prod_num_cast :
                        (cur_count == 7'b1000111) ? prod_num_cast :
                        (cur_count == 7'b1001000) ? prod_num_cast :
                        (cur_count == 7'b1001001) ? prod_den_cast_neg :
                        (cur_count == 7'b1001010) ? prod_den_cast_neg :
                        (cur_count == 7'b1001011) ? prod_num_cast :
                        (cur_count == 7'b1001100) ? prod_num_cast :
                        (cur_count == 7'b1001101) ? prod_num_cast :
                        (cur_count == 7'b1001110) ? prod_num_cast :
                        (cur_count == 7'b1001111) ? prod_den_cast_neg :
                        (cur_count == 7'b1010000) ? prod_den_cast_neg :
                        (cur_count == 7'b1010001) ? prod_num_cast :
                        (cur_count == 7'b1010010) ? prod_num_cast :
                        (cur_count == 7'b1010011) ? prod_num_cast :
                        (cur_count == 7'b1010100) ? prod_num_cast :
                        (cur_count == 7'b1010101) ? prod_den_cast_neg :
                        (cur_count == 7'b1010110) ? prod_den_cast_neg :
                        (cur_count == 7'b1010111) ? prod_num_cast :
                        (cur_count == 7'b1011000) ? prod_num_cast :
                        (cur_count == 7'b1011001) ? prod_num_cast :
                        (cur_count == 7'b1011010) ? prod_num_cast :
                        (cur_count == 7'b1011011) ? prod_den_cast_neg :
                        (cur_count == 7'b1011100) ? prod_den_cast_neg :
                        (cur_count == 7'b1011101) ? prod_num_cast :
                        (cur_count == 7'b1011110) ? prod_num_cast :
                        (cur_count == 7'b1011111) ? prod_num_cast :
                        (cur_count == 7'b1100000) ? prod_num_cast :
                        (cur_count == 7'b1100001) ? prod_den_cast_neg :
                        (cur_count == 7'b1100010) ? prod_den_cast_neg :
                        (cur_count == 7'b1100011) ? prod_num_cast :
                        (cur_count == 7'b1100100) ? prod_num_cast :
                        (cur_count == 7'b1100101) ? prod_num_cast :
                        (cur_count == 7'b1100110) ? prod_num_cast :
                        (cur_count == 7'b1100111) ? prod_den_cast_neg :
                        (cur_count == 7'b1101000) ? prod_den_cast_neg :
                        (cur_count == 7'b1101001) ? prod_num_cast :
                        (cur_count == 7'b1101010) ? prod_num_cast :
                        prod_num_cast;

  assign final_phase =  phase_0 | phase_3 | phase_6 | phase_9 | phase_12 | phase_15 | phase_18 | phase_21 | phase_24 | phase_27 | phase_30 | phase_33 | phase_36 | phase_39 | phase_42 | phase_45 | phase_48 | phase_51 | phase_54 | phase_57 | phase_60 | phase_63 | phase_66 | phase_69 | phase_72 | phase_75 | phase_78 | phase_81 | phase_84 | phase_87 | phase_90 | phase_93 | phase_96 | phase_99 | phase_102 | phase_105;

  assign section_phase =  phase_0 | phase_6 | phase_12 | phase_18 | phase_24 | phase_30 | phase_36 | phase_42 | phase_48 | phase_54 | phase_60 | phase_66 | phase_72 | phase_78 | phase_84 | phase_90 | phase_96 | phase_102;

  assign accum_mux_in1_temp = (section_phase == 1'b1) ? sectionipconvert_cast :
                             accum_mux_in1;

  assign accum_mux_out = (final_phase == 1'b1) ? accum_mux_in1_temp :
                        accum_mux_in2;

  always @ (posedge clk or posedge reset)
    begin: accumulator_reg_process
      if (reset == 1'b1) begin
        accum_reg <= 0;
      end
      else begin
        if (enb_108_1_1_gated == 1'b1) begin
          accum_reg <= accum_mux_out;
        end
      end
    end // accumulator_reg_process

  assign add_cast = accum_reg;
  assign add_cast_1 = accum_mux_in1;
  assign add_temp = add_cast + add_cast_1;
  assign accum_mux_in2 = add_temp[39:0];

  assign storagetypeconvert = (accum_mux_out[29:0] + {accum_mux_out[14], {13{~accum_mux_out[14]}}})>>>14;

  assign sectionipconvert = (prod[35:0] + {prod[20], {19{~prod[20]}}})>>>20;

  assign sectionipconvert_cast = $signed({sectionipconvert[15:0], 12'b000000000000});

  assign acc_out_cast_numacc = accum_mux_out;

  assign sectionopconvert = (acc_out_cast_numacc[33:0] + {acc_out_cast_numacc[18], {17{~acc_out_cast_numacc[18]}}})>>>18;

  assign output_typeconvert = (acc_out_cast_numacc[33:0] + {acc_out_cast_numacc[18], {17{~acc_out_cast_numacc[18]}}})>>>18;

  always @ (posedge clk or posedge reset)
    begin: storage_reg1_process
      if (reset == 1'b1) begin
        storage_state_in1 <= 0;
      end
      else begin
        if (phase_2 == 1'b1) begin
          storage_state_in1 <= storagetypeconvert;
        end
      end
    end // storage_reg1_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg2_process
      if (reset == 1'b1) begin
        storage_state_in2 <= 0;
      end
      else begin
        if (phase_8 == 1'b1) begin
          storage_state_in2 <= storagetypeconvert;
        end
      end
    end // storage_reg2_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg3_process
      if (reset == 1'b1) begin
        storage_state_in3 <= 0;
      end
      else begin
        if (phase_14 == 1'b1) begin
          storage_state_in3 <= storagetypeconvert;
        end
      end
    end // storage_reg3_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg4_process
      if (reset == 1'b1) begin
        storage_state_in4 <= 0;
      end
      else begin
        if (phase_20 == 1'b1) begin
          storage_state_in4 <= storagetypeconvert;
        end
      end
    end // storage_reg4_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg5_process
      if (reset == 1'b1) begin
        storage_state_in5 <= 0;
      end
      else begin
        if (phase_26 == 1'b1) begin
          storage_state_in5 <= storagetypeconvert;
        end
      end
    end // storage_reg5_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg6_process
      if (reset == 1'b1) begin
        storage_state_in6 <= 0;
      end
      else begin
        if (phase_32 == 1'b1) begin
          storage_state_in6 <= storagetypeconvert;
        end
      end
    end // storage_reg6_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg7_process
      if (reset == 1'b1) begin
        storage_state_in7 <= 0;
      end
      else begin
        if (phase_38 == 1'b1) begin
          storage_state_in7 <= storagetypeconvert;
        end
      end
    end // storage_reg7_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg8_process
      if (reset == 1'b1) begin
        storage_state_in8 <= 0;
      end
      else begin
        if (phase_44 == 1'b1) begin
          storage_state_in8 <= storagetypeconvert;
        end
      end
    end // storage_reg8_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg9_process
      if (reset == 1'b1) begin
        storage_state_in9 <= 0;
      end
      else begin
        if (phase_50 == 1'b1) begin
          storage_state_in9 <= storagetypeconvert;
        end
      end
    end // storage_reg9_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg10_process
      if (reset == 1'b1) begin
        storage_state_in10 <= 0;
      end
      else begin
        if (phase_56 == 1'b1) begin
          storage_state_in10 <= storagetypeconvert;
        end
      end
    end // storage_reg10_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg11_process
      if (reset == 1'b1) begin
        storage_state_in11 <= 0;
      end
      else begin
        if (phase_62 == 1'b1) begin
          storage_state_in11 <= storagetypeconvert;
        end
      end
    end // storage_reg11_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg12_process
      if (reset == 1'b1) begin
        storage_state_in12 <= 0;
      end
      else begin
        if (phase_68 == 1'b1) begin
          storage_state_in12 <= storagetypeconvert;
        end
      end
    end // storage_reg12_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg13_process
      if (reset == 1'b1) begin
        storage_state_in13 <= 0;
      end
      else begin
        if (phase_74 == 1'b1) begin
          storage_state_in13 <= storagetypeconvert;
        end
      end
    end // storage_reg13_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg14_process
      if (reset == 1'b1) begin
        storage_state_in14 <= 0;
      end
      else begin
        if (phase_80 == 1'b1) begin
          storage_state_in14 <= storagetypeconvert;
        end
      end
    end // storage_reg14_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg15_process
      if (reset == 1'b1) begin
        storage_state_in15 <= 0;
      end
      else begin
        if (phase_86 == 1'b1) begin
          storage_state_in15 <= storagetypeconvert;
        end
      end
    end // storage_reg15_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg16_process
      if (reset == 1'b1) begin
        storage_state_in16 <= 0;
      end
      else begin
        if (phase_92 == 1'b1) begin
          storage_state_in16 <= storagetypeconvert;
        end
      end
    end // storage_reg16_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg17_process
      if (reset == 1'b1) begin
        storage_state_in17 <= 0;
      end
      else begin
        if (phase_98 == 1'b1) begin
          storage_state_in17 <= storagetypeconvert;
        end
      end
    end // storage_reg17_process

  always @ (posedge clk or posedge reset)
    begin: storage_reg18_process
      if (reset == 1'b1) begin
        storage_state_in18 <= 0;
      end
      else begin
        if (phase_104 == 1'b1) begin
          storage_state_in18 <= storagetypeconvert;
        end
      end
    end // storage_reg18_process

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_107 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_block_out = output_register;
endmodule  // filter_block
