// -------------------------------------------------------------
// 
// File Name: C:\GitHub\closed-loop-neuroscience\Mattia\Custom_architecture\Verilog\CustArch\process_and_retrieve.v
// Created: 2021-03-29 11:16:01
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: process_and_retrieve
// Source Path: CustArch/cust_architecture/process_and_retrieve
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module process_and_retrieve
          (clk,
           reset,
           enb,
           rd_address,
           InputState,
           current_value,
           read_from_processing_addr,
           rd_dout);


  input   clk;
  input   reset;
  input   enb;
  input   [8:0] rd_address;  // ufix9
  input   [7:0] InputState;  // uint8
  input   [15:0] current_value;  // uint16
  input   [8:0] read_from_processing_addr;  // ufix9
  output  [15:0] rd_dout;  // uint16


  wire [15:0] value_from_pipeIn;  // uint16
  reg [7:0] Memory3_out1;  // uint8
  wire read_from_porcessing;
  wire Compare_To_Constant1_out1;
  wire AND_out1;
  reg  Memory1_out1;
  wire switch_compare_1;
  wire Compare_To_Constant_out1;
  wire [15:0] Data_Type_Conversion1_out1;  // uint16
  wire [15:0] alpha80_120Hz_IIR_out1;  // uint16
  wire [15:0] Switch_out1;  // uint16
  reg [8:0] write_porcessing_addr_read_from_storage_addr_1;  // ufix9
  reg  write_en;
  wire [15:0] HPF_storage_out1;  // uint16
  wire [15:0] HPF_storage_out2;  // uint16
  wire signed [15:0] LPF_out;  // sfix16_E5
  wire signed [15:0] LPF_storage_out1;  // sfix16_E5
  wire signed [15:0] last_LPF;  // sfix16_E5
  wire [15:0] HPF_out;  // uint16

  // value from pipein
  // endpoint GUI
  // perchè si stoppa?
  // 
  // Test to see whether we can put a single threshold for all channels (current value, not filtered)
  // 
  // Terminator but should be placed in wr_din
  // 
  // this memory is to guarantee that the input is already stored
  // 
  // note that these RAM are too big.. I just need 160 and thus a reduced address port width  
  // 
  // Note: If a read operation occurs simultaneously at the same address 
  // as a write operation, old data appears at the read output port (rd_dout).


  always @(posedge clk or posedge reset)
    begin : Memory3_process
      if (reset == 1'b1) begin
        Memory3_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Memory3_out1 <= InputState;
        end
      end
    end



  assign read_from_porcessing = Memory3_out1 == 8'b00000111;



  assign Compare_To_Constant1_out1 = read_from_processing_addr == 9'b001000001;



  assign AND_out1 = read_from_porcessing & Compare_To_Constant1_out1;



  always @(posedge clk or posedge reset)
    begin : Memory1_process
      if (reset == 1'b1) begin
        Memory1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Memory1_out1 <= AND_out1;
        end
      end
    end



  assign switch_compare_1 = Memory1_out1 > 1'b0;



  assign Compare_To_Constant_out1 = current_value <= 16'b1100001101010000;



  assign Data_Type_Conversion1_out1 = {15'b0, Compare_To_Constant_out1};



  alpha80_120Hz_IIR u_80_120Hz_IIR (.clk(clk),
                                    .reset(reset),
                                    .enb(enb),
                                    .In1(current_value),  // uint16
                                    .Trigger(Memory1_out1),
                                    .Out1(alpha80_120Hz_IIR_out1)  // uint16
                                    );

  assign Switch_out1 = (switch_compare_1 == 1'b0 ? Data_Type_Conversion1_out1 :
              alpha80_120Hz_IIR_out1);



  always @(posedge clk or posedge reset)
    begin : Memory5_process
      if (reset == 1'b1) begin
        write_porcessing_addr_read_from_storage_addr_1 <= 9'b000000000;
      end
      else begin
        if (enb) begin
          write_porcessing_addr_read_from_storage_addr_1 <= read_from_processing_addr;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Memory2_process
      if (reset == 1'b1) begin
        write_en <= 1'b0;
      end
      else begin
        if (enb) begin
          write_en <= read_from_porcessing;
        end
      end
    end



  DualPortRAM_generic #(.AddrWidth(9),
                        .DataWidth(16)
                        )
                      u_HPF_storage (.clk(clk),
                                     .enb(enb),
                                     .wr_din(Switch_out1),
                                     .wr_addr(write_porcessing_addr_read_from_storage_addr_1),
                                     .wr_en(write_en),
                                     .rd_addr(rd_address),
                                     .wr_dout(HPF_storage_out1),
                                     .rd_dout(HPF_storage_out2)
                                     );

  assign rd_dout = HPF_storage_out2;

  DualPortRAM_generic #(.AddrWidth(9),
                        .DataWidth(16)
                        )
                      u_LPF_storage (.clk(clk),
                                     .enb(enb),
                                     .wr_din(LPF_out),
                                     .wr_addr(write_porcessing_addr_read_from_storage_addr_1),
                                     .wr_en(write_en),
                                     .rd_addr(read_from_processing_addr),
                                     .wr_dout(LPF_storage_out1),
                                     .rd_dout(last_LPF)
                                     );

  one_pole_IIR u_one_pole_IIR (.current_value(current_value),  // uint16
                               .last_LPF(last_LPF),  // sfix16_E5
                               .LPF_output(LPF_out)  // sfix16_E5
                               );

endmodule  // process_and_retrieve

