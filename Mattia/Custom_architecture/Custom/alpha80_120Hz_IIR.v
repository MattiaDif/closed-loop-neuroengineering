// -------------------------------------------------------------
// 
// File Name: C:\GitHub\closed-loop-neuroscience\Mattia\Custom_architecture\Verilog\CustArch\alpha80_120Hz_IIR.v
// Created: 2021-03-29 11:16:01
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: alpha80_120Hz_IIR
// Source Path: CustArch/cust_architecture/process_and_retrieve/80-120Hz IIR
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module alpha80_120Hz_IIR
          (clk,
           reset,
           enb,
           In1,
           Trigger,
           Out1);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] In1;  // uint16
  input   Trigger;
  output  [15:0] Out1;  // uint16


  reg  Trigger_delayed;
  wire Trigger_delayed_inverted;
  wire Trigger_emulated;
  wire [15:0] Constant1_out1;  // uint16
  wire signed [16:0] Subtract1_sub_temp;  // sfix17
  wire signed [16:0] Subtract1_1;  // sfix17
  wire signed [16:0] Subtract1_2;  // sfix17
  wire signed [15:0] Subtract1_out1;  // int16
  wire signed [15:0] Data_Type_Conversion_out1;  // sfix16_En15
  wire signed [15:0] Filter_out1;  // sfix16_En11
  wire signed [31:0] Gain_out1;  // sfix32_En10
  wire [15:0] Constant2_out1;  // uint16
  wire signed [32:0] Subtract2_add_cast;  // sfix33_En10
  wire signed [32:0] Subtract2_add_cast_1;  // sfix33_En10
  wire signed [32:0] Subtract2_add_temp;  // sfix33_En10
  wire signed [15:0] Subtract2_out1;  // int16
  wire [15:0] Data_Type_Conversion1_out1;  // uint16
  wire [15:0] Data_Type_Conversion1_out1_1;  // uint16
  reg [15:0] Data_Type_Conversion1_out1_last_value;  // uint16


  always @(posedge clk or posedge reset)
    begin : Trigger_delay_process
      if (reset == 1'b1) begin
        Trigger_delayed <= 1'b1;
      end
      else begin
        if (enb) begin
          Trigger_delayed <= Trigger;
        end
      end
    end



  assign Trigger_delayed_inverted =  ~ Trigger_delayed;



  assign Trigger_emulated = Trigger_delayed_inverted & Trigger;



  assign Constant1_out1 = 16'b1000000000000000;



  assign Subtract1_1 = {1'b0, In1};
  assign Subtract1_2 = {1'b0, Constant1_out1};
  assign Subtract1_sub_temp = Subtract1_1 - Subtract1_2;
  assign Subtract1_out1 = Subtract1_sub_temp[15:0];



  assign Data_Type_Conversion_out1 = Subtract1_out1;



  Filter u_Filter (.clk(clk),
                   .reset(reset),
                   .enb(enb),
                   .In(Data_Type_Conversion_out1),  // sfix16_En15
                   .Trigger_emulated(Trigger_emulated),
                   .Out(Filter_out1)  // sfix16_En11
                   );

  assign Gain_out1 = {{2{Filter_out1[15]}}, {Filter_out1, 14'b00000000000000}};



  assign Constant2_out1 = 16'b1000000000000000;



  assign Subtract2_add_cast = {Gain_out1[31], Gain_out1};
  assign Subtract2_add_cast_1 = {7'b0, {Constant2_out1, 10'b0000000000}};
  assign Subtract2_add_temp = Subtract2_add_cast + Subtract2_add_cast_1;
  assign Subtract2_out1 = Subtract2_add_temp[25:10];



  assign Data_Type_Conversion1_out1 = Subtract2_out1;



  always @(posedge clk or posedge reset)
    begin : out0_bypass_process
      if (reset == 1'b1) begin
        Data_Type_Conversion1_out1_last_value <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Data_Type_Conversion1_out1_last_value <= Data_Type_Conversion1_out1_1;
        end
      end
    end



  assign Data_Type_Conversion1_out1_1 = (Trigger_emulated == 1'b0 ? Data_Type_Conversion1_out1_last_value :
              Data_Type_Conversion1_out1);



  assign Out1 = Data_Type_Conversion1_out1_1;

endmodule  // alpha80_120Hz_IIR

