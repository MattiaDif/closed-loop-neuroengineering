// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v22\Square_Root1.v
// Created: 2021-09-20 14:51:01
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Square_Root1
// Source Path: CustArch_v22/cust_architecture/process_and_retrieve/spike_detection/LocalMaximaAdaptiveThreshold/RMS_computation/Square 
// Root
// Hierarchy Level: 5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Square_Root1
          (din,
           dout);


  input   [39:0] din;  // ufix40
  output  [15:0] dout;  // uint16


  wire [31:0] base15sqr;  // ufix32
  wire [31:0] resizedin;  // ufix32
  wire relop_relop1;
  wire [31:0] rootsqini;  // ufix32
  wire [31:0] root_sq15;  // ufix32
  wire [31:0] base14sqr;  // ufix32
  wire [15:0] rootini;  // ufix16
  wire [15:0] MSBy;  // ufix16
  wire [15:0] root15;  // ufix16
  wire [32:0] adder_add_temp;  // ufix33
  wire [32:0] adder_1;  // ufix33
  wire [32:0] adder_2;  // ufix33
  wire [31:0] squaresum15;  // ufix32
  wire [31:0] rootdtc15;  // ufix32
  wire [31:0] shift215;  // ufix32
  wire [32:0] adder_add_temp_1;  // ufix33
  wire [32:0] adder_4;  // ufix33
  wire [32:0] adder_5;  // ufix33
  wire [31:0] roottmp_sq14;  // ufix32
  wire relop_relop1_1;
  wire [31:0] root_sq14;  // ufix32
  wire [31:0] base13sqr;  // ufix32
  wire [15:0] roottmp14;  // ufix16
  wire [15:0] root14;  // ufix16
  wire [32:0] adder_add_temp_2;  // ufix33
  wire [32:0] adder_7;  // ufix33
  wire [32:0] adder_8;  // ufix33
  wire [31:0] squaresum14;  // ufix32
  wire [31:0] rootdtc14;  // ufix32
  wire [31:0] shift214;  // ufix32
  wire [32:0] adder_add_temp_3;  // ufix33
  wire [32:0] adder_10;  // ufix33
  wire [32:0] adder_11;  // ufix33
  wire [31:0] roottmp_sq13;  // ufix32
  wire relop_relop1_2;
  wire [31:0] root_sq13;  // ufix32
  wire [31:0] base12sqr;  // ufix32
  wire [15:0] roottmp13;  // ufix16
  wire [15:0] root13;  // ufix16
  wire [32:0] adder_add_temp_4;  // ufix33
  wire [32:0] adder_13;  // ufix33
  wire [32:0] adder_14;  // ufix33
  wire [31:0] squaresum13;  // ufix32
  wire [31:0] rootdtc13;  // ufix32
  wire [31:0] shift213;  // ufix32
  wire [32:0] adder_add_temp_5;  // ufix33
  wire [32:0] adder_16;  // ufix33
  wire [32:0] adder_17;  // ufix33
  wire [31:0] roottmp_sq12;  // ufix32
  wire relop_relop1_3;
  wire [31:0] root_sq12;  // ufix32
  wire [31:0] base11sqr;  // ufix32
  wire [15:0] roottmp12;  // ufix16
  wire [15:0] root12;  // ufix16
  wire [32:0] adder_add_temp_6;  // ufix33
  wire [32:0] adder_19;  // ufix33
  wire [32:0] adder_20;  // ufix33
  wire [31:0] squaresum12;  // ufix32
  wire [31:0] rootdtc12;  // ufix32
  wire [31:0] shift212;  // ufix32
  wire [32:0] adder_add_temp_7;  // ufix33
  wire [32:0] adder_22;  // ufix33
  wire [32:0] adder_23;  // ufix33
  wire [31:0] roottmp_sq11;  // ufix32
  wire relop_relop1_4;
  wire [31:0] root_sq11;  // ufix32
  wire [31:0] base10sqr;  // ufix32
  wire [15:0] roottmp11;  // ufix16
  wire [15:0] root11;  // ufix16
  wire [32:0] adder_add_temp_8;  // ufix33
  wire [32:0] adder_25;  // ufix33
  wire [32:0] adder_26;  // ufix33
  wire [31:0] squaresum11;  // ufix32
  wire [31:0] rootdtc11;  // ufix32
  wire [31:0] shift211;  // ufix32
  wire [32:0] adder_add_temp_9;  // ufix33
  wire [32:0] adder_28;  // ufix33
  wire [32:0] adder_29;  // ufix33
  wire [31:0] roottmp_sq10;  // ufix32
  wire relop_relop1_5;
  wire [31:0] root_sq10;  // ufix32
  wire [31:0] base9sqr;  // ufix32
  wire [15:0] roottmp10;  // ufix16
  wire [15:0] root10;  // ufix16
  wire [32:0] adder_add_temp_10;  // ufix33
  wire [32:0] adder_31;  // ufix33
  wire [32:0] adder_32;  // ufix33
  wire [31:0] squaresum10;  // ufix32
  wire [31:0] rootdtc10;  // ufix32
  wire [31:0] shift210;  // ufix32
  wire [32:0] adder_add_temp_11;  // ufix33
  wire [32:0] adder_34;  // ufix33
  wire [32:0] adder_35;  // ufix33
  wire [31:0] roottmp_sq9;  // ufix32
  wire relop_relop1_6;
  wire [31:0] root_sq9;  // ufix32
  wire [31:0] base8sqr;  // ufix32
  wire [15:0] roottmp9;  // ufix16
  wire [15:0] root9;  // ufix16
  wire [32:0] adder_add_temp_12;  // ufix33
  wire [32:0] adder_37;  // ufix33
  wire [32:0] adder_38;  // ufix33
  wire [31:0] squaresum9;  // ufix32
  wire [31:0] rootdtc9;  // ufix32
  wire [31:0] shift29;  // ufix32
  wire [32:0] adder_add_temp_13;  // ufix33
  wire [32:0] adder_40;  // ufix33
  wire [32:0] adder_41;  // ufix33
  wire [31:0] roottmp_sq8;  // ufix32
  wire relop_relop1_7;
  wire [31:0] root_sq8;  // ufix32
  wire [31:0] base7sqr;  // ufix32
  wire [15:0] roottmp8;  // ufix16
  wire [15:0] root8;  // ufix16
  wire [32:0] adder_add_temp_14;  // ufix33
  wire [32:0] adder_43;  // ufix33
  wire [32:0] adder_44;  // ufix33
  wire [31:0] squaresum8;  // ufix32
  wire [31:0] rootdtc8;  // ufix32
  wire [31:0] shift28;  // ufix32
  wire [32:0] adder_add_temp_15;  // ufix33
  wire [32:0] adder_46;  // ufix33
  wire [32:0] adder_47;  // ufix33
  wire [31:0] roottmp_sq7;  // ufix32
  wire relop_relop1_8;
  wire [31:0] root_sq7;  // ufix32
  wire [31:0] base6sqr;  // ufix32
  wire [15:0] roottmp7;  // ufix16
  wire [15:0] root7;  // ufix16
  wire [32:0] adder_add_temp_16;  // ufix33
  wire [32:0] adder_49;  // ufix33
  wire [32:0] adder_50;  // ufix33
  wire [31:0] squaresum7;  // ufix32
  wire [31:0] rootdtc7;  // ufix32
  wire [31:0] shift27;  // ufix32
  wire [32:0] adder_add_temp_17;  // ufix33
  wire [32:0] adder_52;  // ufix33
  wire [32:0] adder_53;  // ufix33
  wire [31:0] roottmp_sq6;  // ufix32
  wire relop_relop1_9;
  wire [31:0] root_sq6;  // ufix32
  wire [31:0] base5sqr;  // ufix32
  wire [15:0] roottmp6;  // ufix16
  wire [15:0] root6;  // ufix16
  wire [32:0] adder_add_temp_18;  // ufix33
  wire [32:0] adder_55;  // ufix33
  wire [32:0] adder_56;  // ufix33
  wire [31:0] squaresum6;  // ufix32
  wire [31:0] rootdtc6;  // ufix32
  wire [31:0] shift26;  // ufix32
  wire [32:0] adder_add_temp_19;  // ufix33
  wire [32:0] adder_58;  // ufix33
  wire [32:0] adder_59;  // ufix33
  wire [31:0] roottmp_sq5;  // ufix32
  wire relop_relop1_10;
  wire [31:0] root_sq5;  // ufix32
  wire [31:0] base4sqr;  // ufix32
  wire [15:0] roottmp5;  // ufix16
  wire [15:0] root5;  // ufix16
  wire [32:0] adder_add_temp_20;  // ufix33
  wire [32:0] adder_61;  // ufix33
  wire [32:0] adder_62;  // ufix33
  wire [31:0] squaresum5;  // ufix32
  wire [31:0] rootdtc5;  // ufix32
  wire [31:0] shift25;  // ufix32
  wire [32:0] adder_add_temp_21;  // ufix33
  wire [32:0] adder_64;  // ufix33
  wire [32:0] adder_65;  // ufix33
  wire [31:0] roottmp_sq4;  // ufix32
  wire relop_relop1_11;
  wire [31:0] root_sq4;  // ufix32
  wire [31:0] base3sqr;  // ufix32
  wire [15:0] roottmp4;  // ufix16
  wire [15:0] root4;  // ufix16
  wire [32:0] adder_add_temp_22;  // ufix33
  wire [32:0] adder_67;  // ufix33
  wire [32:0] adder_68;  // ufix33
  wire [31:0] squaresum4;  // ufix32
  wire [31:0] rootdtc4;  // ufix32
  wire [31:0] shift24;  // ufix32
  wire [32:0] adder_add_temp_23;  // ufix33
  wire [32:0] adder_70;  // ufix33
  wire [32:0] adder_71;  // ufix33
  wire [31:0] roottmp_sq3;  // ufix32
  wire relop_relop1_12;
  wire [31:0] root_sq3;  // ufix32
  wire [31:0] base2sqr;  // ufix32
  wire [15:0] roottmp3;  // ufix16
  wire [15:0] root3;  // ufix16
  wire [32:0] adder_add_temp_24;  // ufix33
  wire [32:0] adder_73;  // ufix33
  wire [32:0] adder_74;  // ufix33
  wire [31:0] squaresum3;  // ufix32
  wire [31:0] rootdtc3;  // ufix32
  wire [31:0] shift23;  // ufix32
  wire [32:0] adder_add_temp_25;  // ufix33
  wire [32:0] adder_76;  // ufix33
  wire [32:0] adder_77;  // ufix33
  wire [31:0] roottmp_sq2;  // ufix32
  wire relop_relop1_13;
  wire [31:0] root_sq2;  // ufix32
  wire [31:0] base1sqr;  // ufix32
  wire [15:0] roottmp2;  // ufix16
  wire [15:0] root2;  // ufix16
  wire [32:0] adder_add_temp_26;  // ufix33
  wire [32:0] adder_79;  // ufix33
  wire [32:0] adder_80;  // ufix33
  wire [31:0] squaresum2;  // ufix32
  wire [31:0] rootdtc2;  // ufix32
  wire [31:0] shift22;  // ufix32
  wire [32:0] adder_add_temp_27;  // ufix33
  wire [32:0] adder_82;  // ufix33
  wire [32:0] adder_83;  // ufix33
  wire [31:0] roottmp_sq1;  // ufix32
  wire relop_relop1_14;
  wire [31:0] root_sq1;  // ufix32
  wire [15:0] roottmp1;  // ufix16
  wire [15:0] root1;  // ufix16
  wire [31:0] base0sqr;  // ufix32
  wire [32:0] adder_add_temp_28;  // ufix33
  wire [32:0] adder_85;  // ufix33
  wire [32:0] adder_86;  // ufix33
  wire [31:0] squaresum1;  // ufix32
  wire [31:0] rootdtc1;  // ufix32
  wire [31:0] shift21;  // ufix32
  wire [32:0] adder_add_temp_29;  // ufix33
  wire [32:0] adder_88;  // ufix33
  wire [32:0] adder_89;  // ufix33
  wire [31:0] roottmp_sq0;  // ufix32
  wire relop_relop1_15;
  wire [15:0] roottmp0;  // ufix16
  wire [15:0] root0;  // ufix16
  wire [15:0] outdata_1;  // uint16

  // Sqrt Implementation using Shift


  assign base15sqr = 32'b01000000000000000000000000000000;



  assign resizedin = (din[39:32] != 8'b00000000 ? 32'b11111111111111111111111111111111 :
              din[31:0]);



  assign relop_relop1 = base15sqr <= resizedin;



  assign rootsqini = 32'b00000000000000000000000000000000;



  assign root_sq15 = (relop_relop1 == 1'b0 ? rootsqini :
              base15sqr);



  assign base14sqr = 32'b00010000000000000000000000000000;



  assign rootini = 16'b0000000000000000;



  assign MSBy = 16'b1000000000000000;



  assign root15 = (relop_relop1 == 1'b0 ? rootini :
              MSBy);



  assign adder_1 = {1'b0, root_sq15};
  assign adder_2 = {1'b0, base14sqr};
  assign adder_add_temp = adder_1 + adder_2;
  assign squaresum15 = (adder_add_temp[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp[31:0]);



  assign rootdtc15 = {16'b0, root15};



  assign shift215 = rootdtc15 <<< 8'd15;



  assign adder_4 = {1'b0, squaresum15};
  assign adder_5 = {1'b0, shift215};
  assign adder_add_temp_1 = adder_4 + adder_5;
  assign roottmp_sq14 = (adder_add_temp_1[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_1[31:0]);



  assign relop_relop1_1 = roottmp_sq14 <= resizedin;



  assign root_sq14 = (relop_relop1_1 == 1'b0 ? root_sq15 :
              roottmp_sq14);



  assign base13sqr = 32'b00000100000000000000000000000000;



  assign roottmp14 = root15 | 16'b0100000000000000;



  assign root14 = (relop_relop1_1 == 1'b0 ? root15 :
              roottmp14);



  assign adder_7 = {1'b0, root_sq14};
  assign adder_8 = {1'b0, base13sqr};
  assign adder_add_temp_2 = adder_7 + adder_8;
  assign squaresum14 = (adder_add_temp_2[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_2[31:0]);



  assign rootdtc14 = {16'b0, root14};



  assign shift214 = rootdtc14 <<< 8'd14;



  assign adder_10 = {1'b0, squaresum14};
  assign adder_11 = {1'b0, shift214};
  assign adder_add_temp_3 = adder_10 + adder_11;
  assign roottmp_sq13 = (adder_add_temp_3[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_3[31:0]);



  assign relop_relop1_2 = roottmp_sq13 <= resizedin;



  assign root_sq13 = (relop_relop1_2 == 1'b0 ? root_sq14 :
              roottmp_sq13);



  assign base12sqr = 32'b00000001000000000000000000000000;



  assign roottmp13 = root14 | 16'b0010000000000000;



  assign root13 = (relop_relop1_2 == 1'b0 ? root14 :
              roottmp13);



  assign adder_13 = {1'b0, root_sq13};
  assign adder_14 = {1'b0, base12sqr};
  assign adder_add_temp_4 = adder_13 + adder_14;
  assign squaresum13 = (adder_add_temp_4[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_4[31:0]);



  assign rootdtc13 = {16'b0, root13};



  assign shift213 = rootdtc13 <<< 8'd13;



  assign adder_16 = {1'b0, squaresum13};
  assign adder_17 = {1'b0, shift213};
  assign adder_add_temp_5 = adder_16 + adder_17;
  assign roottmp_sq12 = (adder_add_temp_5[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_5[31:0]);



  assign relop_relop1_3 = roottmp_sq12 <= resizedin;



  assign root_sq12 = (relop_relop1_3 == 1'b0 ? root_sq13 :
              roottmp_sq12);



  assign base11sqr = 32'b00000000010000000000000000000000;



  assign roottmp12 = root13 | 16'b0001000000000000;



  assign root12 = (relop_relop1_3 == 1'b0 ? root13 :
              roottmp12);



  assign adder_19 = {1'b0, root_sq12};
  assign adder_20 = {1'b0, base11sqr};
  assign adder_add_temp_6 = adder_19 + adder_20;
  assign squaresum12 = (adder_add_temp_6[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_6[31:0]);



  assign rootdtc12 = {16'b0, root12};



  assign shift212 = rootdtc12 <<< 8'd12;



  assign adder_22 = {1'b0, squaresum12};
  assign adder_23 = {1'b0, shift212};
  assign adder_add_temp_7 = adder_22 + adder_23;
  assign roottmp_sq11 = (adder_add_temp_7[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_7[31:0]);



  assign relop_relop1_4 = roottmp_sq11 <= resizedin;



  assign root_sq11 = (relop_relop1_4 == 1'b0 ? root_sq12 :
              roottmp_sq11);



  assign base10sqr = 32'b00000000000100000000000000000000;



  assign roottmp11 = root12 | 16'b0000100000000000;



  assign root11 = (relop_relop1_4 == 1'b0 ? root12 :
              roottmp11);



  assign adder_25 = {1'b0, root_sq11};
  assign adder_26 = {1'b0, base10sqr};
  assign adder_add_temp_8 = adder_25 + adder_26;
  assign squaresum11 = (adder_add_temp_8[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_8[31:0]);



  assign rootdtc11 = {16'b0, root11};



  assign shift211 = rootdtc11 <<< 8'd11;



  assign adder_28 = {1'b0, squaresum11};
  assign adder_29 = {1'b0, shift211};
  assign adder_add_temp_9 = adder_28 + adder_29;
  assign roottmp_sq10 = (adder_add_temp_9[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_9[31:0]);



  assign relop_relop1_5 = roottmp_sq10 <= resizedin;



  assign root_sq10 = (relop_relop1_5 == 1'b0 ? root_sq11 :
              roottmp_sq10);



  assign base9sqr = 32'b00000000000001000000000000000000;



  assign roottmp10 = root11 | 16'b0000010000000000;



  assign root10 = (relop_relop1_5 == 1'b0 ? root11 :
              roottmp10);



  assign adder_31 = {1'b0, root_sq10};
  assign adder_32 = {1'b0, base9sqr};
  assign adder_add_temp_10 = adder_31 + adder_32;
  assign squaresum10 = (adder_add_temp_10[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_10[31:0]);



  assign rootdtc10 = {16'b0, root10};



  assign shift210 = rootdtc10 <<< 8'd10;



  assign adder_34 = {1'b0, squaresum10};
  assign adder_35 = {1'b0, shift210};
  assign adder_add_temp_11 = adder_34 + adder_35;
  assign roottmp_sq9 = (adder_add_temp_11[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_11[31:0]);



  assign relop_relop1_6 = roottmp_sq9 <= resizedin;



  assign root_sq9 = (relop_relop1_6 == 1'b0 ? root_sq10 :
              roottmp_sq9);



  assign base8sqr = 32'b00000000000000010000000000000000;



  assign roottmp9 = root10 | 16'b0000001000000000;



  assign root9 = (relop_relop1_6 == 1'b0 ? root10 :
              roottmp9);



  assign adder_37 = {1'b0, root_sq9};
  assign adder_38 = {1'b0, base8sqr};
  assign adder_add_temp_12 = adder_37 + adder_38;
  assign squaresum9 = (adder_add_temp_12[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_12[31:0]);



  assign rootdtc9 = {16'b0, root9};



  assign shift29 = rootdtc9 <<< 8'd9;



  assign adder_40 = {1'b0, squaresum9};
  assign adder_41 = {1'b0, shift29};
  assign adder_add_temp_13 = adder_40 + adder_41;
  assign roottmp_sq8 = (adder_add_temp_13[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_13[31:0]);



  assign relop_relop1_7 = roottmp_sq8 <= resizedin;



  assign root_sq8 = (relop_relop1_7 == 1'b0 ? root_sq9 :
              roottmp_sq8);



  assign base7sqr = 32'b00000000000000000100000000000000;



  assign roottmp8 = root9 | 16'b0000000100000000;



  assign root8 = (relop_relop1_7 == 1'b0 ? root9 :
              roottmp8);



  assign adder_43 = {1'b0, root_sq8};
  assign adder_44 = {1'b0, base7sqr};
  assign adder_add_temp_14 = adder_43 + adder_44;
  assign squaresum8 = (adder_add_temp_14[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_14[31:0]);



  assign rootdtc8 = {16'b0, root8};



  assign shift28 = rootdtc8 <<< 8'd8;



  assign adder_46 = {1'b0, squaresum8};
  assign adder_47 = {1'b0, shift28};
  assign adder_add_temp_15 = adder_46 + adder_47;
  assign roottmp_sq7 = (adder_add_temp_15[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_15[31:0]);



  assign relop_relop1_8 = roottmp_sq7 <= resizedin;



  assign root_sq7 = (relop_relop1_8 == 1'b0 ? root_sq8 :
              roottmp_sq7);



  assign base6sqr = 32'b00000000000000000001000000000000;



  assign roottmp7 = root8 | 16'b0000000010000000;



  assign root7 = (relop_relop1_8 == 1'b0 ? root8 :
              roottmp7);



  assign adder_49 = {1'b0, root_sq7};
  assign adder_50 = {1'b0, base6sqr};
  assign adder_add_temp_16 = adder_49 + adder_50;
  assign squaresum7 = (adder_add_temp_16[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_16[31:0]);



  assign rootdtc7 = {16'b0, root7};



  assign shift27 = rootdtc7 <<< 8'd7;



  assign adder_52 = {1'b0, squaresum7};
  assign adder_53 = {1'b0, shift27};
  assign adder_add_temp_17 = adder_52 + adder_53;
  assign roottmp_sq6 = (adder_add_temp_17[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_17[31:0]);



  assign relop_relop1_9 = roottmp_sq6 <= resizedin;



  assign root_sq6 = (relop_relop1_9 == 1'b0 ? root_sq7 :
              roottmp_sq6);



  assign base5sqr = 32'b00000000000000000000010000000000;



  assign roottmp6 = root7 | 16'b0000000001000000;



  assign root6 = (relop_relop1_9 == 1'b0 ? root7 :
              roottmp6);



  assign adder_55 = {1'b0, root_sq6};
  assign adder_56 = {1'b0, base5sqr};
  assign adder_add_temp_18 = adder_55 + adder_56;
  assign squaresum6 = (adder_add_temp_18[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_18[31:0]);



  assign rootdtc6 = {16'b0, root6};



  assign shift26 = rootdtc6 <<< 8'd6;



  assign adder_58 = {1'b0, squaresum6};
  assign adder_59 = {1'b0, shift26};
  assign adder_add_temp_19 = adder_58 + adder_59;
  assign roottmp_sq5 = (adder_add_temp_19[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_19[31:0]);



  assign relop_relop1_10 = roottmp_sq5 <= resizedin;



  assign root_sq5 = (relop_relop1_10 == 1'b0 ? root_sq6 :
              roottmp_sq5);



  assign base4sqr = 32'b00000000000000000000000100000000;



  assign roottmp5 = root6 | 16'b0000000000100000;



  assign root5 = (relop_relop1_10 == 1'b0 ? root6 :
              roottmp5);



  assign adder_61 = {1'b0, root_sq5};
  assign adder_62 = {1'b0, base4sqr};
  assign adder_add_temp_20 = adder_61 + adder_62;
  assign squaresum5 = (adder_add_temp_20[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_20[31:0]);



  assign rootdtc5 = {16'b0, root5};



  assign shift25 = rootdtc5 <<< 8'd5;



  assign adder_64 = {1'b0, squaresum5};
  assign adder_65 = {1'b0, shift25};
  assign adder_add_temp_21 = adder_64 + adder_65;
  assign roottmp_sq4 = (adder_add_temp_21[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_21[31:0]);



  assign relop_relop1_11 = roottmp_sq4 <= resizedin;



  assign root_sq4 = (relop_relop1_11 == 1'b0 ? root_sq5 :
              roottmp_sq4);



  assign base3sqr = 32'b00000000000000000000000001000000;



  assign roottmp4 = root5 | 16'b0000000000010000;



  assign root4 = (relop_relop1_11 == 1'b0 ? root5 :
              roottmp4);



  assign adder_67 = {1'b0, root_sq4};
  assign adder_68 = {1'b0, base3sqr};
  assign adder_add_temp_22 = adder_67 + adder_68;
  assign squaresum4 = (adder_add_temp_22[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_22[31:0]);



  assign rootdtc4 = {16'b0, root4};



  assign shift24 = rootdtc4 <<< 8'd4;



  assign adder_70 = {1'b0, squaresum4};
  assign adder_71 = {1'b0, shift24};
  assign adder_add_temp_23 = adder_70 + adder_71;
  assign roottmp_sq3 = (adder_add_temp_23[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_23[31:0]);



  assign relop_relop1_12 = roottmp_sq3 <= resizedin;



  assign root_sq3 = (relop_relop1_12 == 1'b0 ? root_sq4 :
              roottmp_sq3);



  assign base2sqr = 32'b00000000000000000000000000010000;



  assign roottmp3 = root4 | 16'b0000000000001000;



  assign root3 = (relop_relop1_12 == 1'b0 ? root4 :
              roottmp3);



  assign adder_73 = {1'b0, root_sq3};
  assign adder_74 = {1'b0, base2sqr};
  assign adder_add_temp_24 = adder_73 + adder_74;
  assign squaresum3 = (adder_add_temp_24[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_24[31:0]);



  assign rootdtc3 = {16'b0, root3};



  assign shift23 = rootdtc3 <<< 8'd3;



  assign adder_76 = {1'b0, squaresum3};
  assign adder_77 = {1'b0, shift23};
  assign adder_add_temp_25 = adder_76 + adder_77;
  assign roottmp_sq2 = (adder_add_temp_25[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_25[31:0]);



  assign relop_relop1_13 = roottmp_sq2 <= resizedin;



  assign root_sq2 = (relop_relop1_13 == 1'b0 ? root_sq3 :
              roottmp_sq2);



  assign base1sqr = 32'b00000000000000000000000000000100;



  assign roottmp2 = root3 | 16'b0000000000000100;



  assign root2 = (relop_relop1_13 == 1'b0 ? root3 :
              roottmp2);



  assign adder_79 = {1'b0, root_sq2};
  assign adder_80 = {1'b0, base1sqr};
  assign adder_add_temp_26 = adder_79 + adder_80;
  assign squaresum2 = (adder_add_temp_26[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_26[31:0]);



  assign rootdtc2 = {16'b0, root2};



  assign shift22 = rootdtc2 <<< 8'd2;



  assign adder_82 = {1'b0, squaresum2};
  assign adder_83 = {1'b0, shift22};
  assign adder_add_temp_27 = adder_82 + adder_83;
  assign roottmp_sq1 = (adder_add_temp_27[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_27[31:0]);



  assign relop_relop1_14 = roottmp_sq1 <= resizedin;



  assign root_sq1 = (relop_relop1_14 == 1'b0 ? root_sq2 :
              roottmp_sq1);



  assign roottmp1 = root2 | 16'b0000000000000010;



  assign root1 = (relop_relop1_14 == 1'b0 ? root2 :
              roottmp1);



  assign base0sqr = 32'b00000000000000000000000000000001;



  assign adder_85 = {1'b0, root_sq1};
  assign adder_86 = {1'b0, base0sqr};
  assign adder_add_temp_28 = adder_85 + adder_86;
  assign squaresum1 = (adder_add_temp_28[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_28[31:0]);



  assign rootdtc1 = {16'b0, root1};



  assign shift21 = rootdtc1 <<< 8'd1;



  assign adder_88 = {1'b0, squaresum1};
  assign adder_89 = {1'b0, shift21};
  assign adder_add_temp_29 = adder_88 + adder_89;
  assign roottmp_sq0 = (adder_add_temp_29[32] != 1'b0 ? 32'b11111111111111111111111111111111 :
              adder_add_temp_29[31:0]);



  assign relop_relop1_15 = roottmp_sq0 <= resizedin;



  assign roottmp0 = root1 | 16'b0000000000000001;



  assign root0 = (relop_relop1_15 == 1'b0 ? root1 :
              roottmp0);



  assign outdata_1 = root0;



  assign dout = outdata_1;

endmodule  // Square_Root1

