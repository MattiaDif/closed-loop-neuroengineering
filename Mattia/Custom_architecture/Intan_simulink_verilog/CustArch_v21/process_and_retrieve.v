// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v21\process_and_retrieve.v
// Created: 2021-10-18 17:44:13
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: process_and_retrieve
// Source Path: CustArch_v21/cust_architecture/process_and_retrieve
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module process_and_retrieve
          (clk,
           reset,
           enb,
           enb_1_2_0,
           enb_1_2_1,
           rd_address,
           InputState,
           current_value,
           read_from_processing_addr,
           OutputState,
           rd_dout);


  input   clk;
  input   reset;
  input   enb;
  input   enb_1_2_0;
  input   enb_1_2_1;
  input   [8:0] rd_address;  // ufix9
  input   [7:0] InputState;  // uint8
  input   [15:0] current_value;  // uint16
  input   [8:0] read_from_processing_addr;  // ufix9
  input   [7:0] OutputState;  // uint8
  output  [15:0] rd_dout;  // uint16


  reg [7:0] Delay_out1;  // uint8
  wire switch_compare_1;
  reg [15:0] Rate_Transition_bypass_reg;  // ufix16
  wire [15:0] Rate_Transition_out1;  // uint16
  reg [7:0] Rate_Transition1_bypass_reg;  // ufix8
  wire [7:0] Rate_Transition1_out1;  // uint8
  reg [8:0] Rate_Transition2_bypass_reg;  // ufix9
  wire [8:0] Rate_Transition2_out1;  // ufix9
  wire [15:0] filtering_out1;  // uint16
  wire [8:0] filtering_out2;  // ufix9
  wire filtering_out3;
  reg [8:0] Delay1_out1;  // ufix9
  reg [8:0] Rate_Transition3_bypass_reg;  // ufix9
  wire [8:0] Rate_Transition3_out1;  // ufix9
  wire [15:0] spike;  // uint16
  reg [8:0] Delay3_out1;  // ufix9
  wire [15:0] ProcessedData_storage_out1;  // uint16
  wire [15:0] ProcessedData_storage_out2;  // uint16
  reg [15:0] Rate_Transition4_out1;  // uint16
  wire [15:0] Switch_out1;  // uint16

  // The dual-port RAM in the input interpret subsystem introduces 
  // a sample of delay. Furthermore, I need one sample more of delay
  // due to the IIR filter --> overall delay of two samples
  // 
  // generally, all sample in the processing subsystem
  // are delayed by two samples --> the memories are 
  // needed for this reason
  // 
  // note that these RAM are too big.. I just need 160 and thus a reduced address port width  
  // 
  // rd_address from Output
  // 
  // data sent for processing
  // 
  // address sent for processing


  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= OutputState;
        end
      end
    end



  assign switch_compare_1 = Delay_out1 > 8'b00000110;



  always @(posedge clk or posedge reset)
    begin : Rate_Transition_bypass_process
      if (reset == 1'b1) begin
        Rate_Transition_bypass_reg <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_2_1) begin
          Rate_Transition_bypass_reg <= current_value;
        end
      end
    end

  assign Rate_Transition_out1 = (enb_1_2_1 == 1'b1 ? current_value :
              Rate_Transition_bypass_reg);



  always @(posedge clk or posedge reset)
    begin : Rate_Transition1_bypass_process
      if (reset == 1'b1) begin
        Rate_Transition1_bypass_reg <= 8'b00000000;
      end
      else begin
        if (enb_1_2_1) begin
          Rate_Transition1_bypass_reg <= InputState;
        end
      end
    end

  assign Rate_Transition1_out1 = (enb_1_2_1 == 1'b1 ? InputState :
              Rate_Transition1_bypass_reg);



  always @(posedge clk or posedge reset)
    begin : Rate_Transition2_bypass_process
      if (reset == 1'b1) begin
        Rate_Transition2_bypass_reg <= 9'b000000000;
      end
      else begin
        if (enb_1_2_1) begin
          Rate_Transition2_bypass_reg <= read_from_processing_addr;
        end
      end
    end

  assign Rate_Transition2_out1 = (enb_1_2_1 == 1'b1 ? read_from_processing_addr :
              Rate_Transition2_bypass_reg);



  filtering u_filtering (.clk(clk),
                         .reset(reset),
                         .enb_1_2_0(enb_1_2_0),
                         .current_sample(Rate_Transition_out1),  // uint16
                         .In2(Rate_Transition1_out1),  // uint8
                         .In3(Rate_Transition2_out1),  // ufix9
                         .filter_output(filtering_out1),  // uint16
                         .write_porcessing_addr_read_from_storage_addr_4(filtering_out2),  // ufix9
                         .wr_en(filtering_out3)
                         );

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 9'b000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= rd_address;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Rate_Transition3_bypass_process
      if (reset == 1'b1) begin
        Rate_Transition3_bypass_reg <= 9'b000000000;
      end
      else begin
        if (enb_1_2_1) begin
          Rate_Transition3_bypass_reg <= Delay1_out1;
        end
      end
    end

  assign Rate_Transition3_out1 = (enb_1_2_1 == 1'b1 ? Delay1_out1 :
              Rate_Transition3_bypass_reg);



  spike_detection u_spike_detection (.clk(clk),
                                     .reset(reset),
                                     .enb_1_2_0(enb_1_2_0),
                                     .filter_output(filtering_out1),  // uint16
                                     .rd_addr(Rate_Transition3_out1),  // ufix9
                                     .wr_en_filt(filtering_out3),
                                     .write_porcessing_addr_read_from_storage_addr_4(filtering_out2),  // ufix9
                                     .spike(spike)  // uint16
                                     );

  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 9'b000000000;
      end
      else begin
        if (enb_1_2_0) begin
          Delay3_out1 <= filtering_out2;
        end
      end
    end



  DualPortRAM_generic_block #(.AddrWidth(9),
                              .DataWidth(16)
                              )
                            u_ProcessedData_storage (.clk(clk),
                                                     .enb_1_2_0(enb_1_2_0),
                                                     .wr_din(filtering_out1),
                                                     .wr_addr(Delay3_out1),
                                                     .wr_en(filtering_out3),
                                                     .rd_addr(Rate_Transition3_out1),
                                                     .wr_dout(ProcessedData_storage_out1),
                                                     .rd_dout(ProcessedData_storage_out2)
                                                     );

  always @(posedge clk or posedge reset)
    begin : Rate_Transition4_process
      if (reset == 1'b1) begin
        Rate_Transition4_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          Rate_Transition4_out1 <= ProcessedData_storage_out2;
        end
      end
    end



  assign Switch_out1 = (switch_compare_1 == 1'b0 ? spike :
              Rate_Transition4_out1);



  assign rd_dout = Switch_out1;

endmodule  // process_and_retrieve

