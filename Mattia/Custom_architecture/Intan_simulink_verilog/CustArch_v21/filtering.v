// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v21\filtering.v
// Created: 2021-10-12 23:33:16
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: filtering
// Source Path: CustArch_v21/cust_architecture/process_and_retrieve/filtering
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module filtering
          (clk,
           reset,
           enb,
           current_sample,
           In2,
           In3,
           filter_output,
           write_porcessing_addr_read_from_storage_addr_1,
           write_porcessing_addr_read_from_storage_addr_4,
           wr_en);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] current_sample;  // uint16
  input   [7:0] In2;  // uint8
  input   [8:0] In3;  // ufix9
  output  [15:0] filter_output;  // uint16
  output  [8:0] write_porcessing_addr_read_from_storage_addr_1;  // ufix9
  output  [8:0] write_porcessing_addr_read_from_storage_addr_4;  // ufix9
  output  wr_en;


  reg [8:0] new_previous_sample;  // ufix9
  reg [8:0] Delay5_reg [0:1];  // ufix9 [2]
  wire [8:0] Delay5_reg_next [0:1];  // ufix9 [2]
  wire [8:0] Delay5_out1;  // ufix9
  reg [7:0] Delay_out1;  // uint8
  wire read_from_porcessing;
  reg  write_en;
  reg  [0:1] Delay6_reg;  // ufix1 [2]
  wire [0:1] Delay6_reg_next;  // ufix1 [2]
  wire Delay6_out1;
  wire signed [31:0] previous_sample;  // sfix32_En7
  wire signed [31:0] PreviousData2_storage_out1;  // sfix32_En7
  wire signed [31:0] previous_sample_1;  // sfix32_En7
  wire signed [31:0] new_previous_sample_1;  // sfix32_En7
  wire signed [31:0] PreviousData1_storage_out1;  // sfix32_En7
  reg [8:0] Delay3_reg [0:2];  // ufix9 [3]
  wire [8:0] Delay3_reg_next [0:2];  // ufix9 [3]
  wire [8:0] Delay3_out1;  // ufix9
  reg  [0:2] Delay4_reg;  // ufix1 [3]
  wire [0:2] Delay4_reg_next;  // ufix1 [3]
  wire Delay4_out1;

  // this memory is to guarantee that the input is already stored
  // 
  // Note: If a read operation occurs simultaneously at the same address 
  // as a write operation, old data appears at the read output port (rd_dout).


  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        new_previous_sample <= 9'b000000000;
      end
      else begin
        if (enb) begin
          new_previous_sample <= In3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_reg[0] <= 9'b000000000;
        Delay5_reg[1] <= 9'b000000000;
      end
      else begin
        if (enb) begin
          Delay5_reg[0] <= Delay5_reg_next[0];
          Delay5_reg[1] <= Delay5_reg_next[1];
        end
      end
    end

  assign Delay5_out1 = Delay5_reg[1];
  assign Delay5_reg_next[0] = new_previous_sample;
  assign Delay5_reg_next[1] = Delay5_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= In2;
        end
      end
    end



  assign read_from_porcessing = Delay_out1 == 8'b00000111;



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        write_en <= 1'b0;
      end
      else begin
        if (enb) begin
          write_en <= read_from_porcessing;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_reg[0] <= 1'b0;
        Delay6_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_reg[0] <= Delay6_reg_next[0];
          Delay6_reg[1] <= Delay6_reg_next[1];
        end
      end
    end

  assign Delay6_out1 = Delay6_reg[1];
  assign Delay6_reg_next[0] = write_en;
  assign Delay6_reg_next[1] = Delay6_reg[0];



  DualPortRAM_generic #(.AddrWidth(9),
                        .DataWidth(32)
                        )
                      u_PreviousData2_storage (.clk(clk),
                                               .enb(enb),
                                               .wr_din(previous_sample),
                                               .wr_addr(new_previous_sample),
                                               .wr_en(write_en),
                                               .rd_addr(In3),
                                               .wr_dout(PreviousData2_storage_out1),
                                               .rd_dout(previous_sample_1)
                                               );

  DualPortRAM_generic #(.AddrWidth(9),
                        .DataWidth(32)
                        )
                      u_PreviousData1_storage (.clk(clk),
                                               .enb(enb),
                                               .wr_din(new_previous_sample_1),
                                               .wr_addr(Delay5_out1),
                                               .wr_en(Delay6_out1),
                                               .rd_addr(In3),
                                               .wr_dout(PreviousData1_storage_out1),
                                               .rd_dout(previous_sample)
                                               );

  two_pole_IIR u_two_pole_IIR (.clk(clk),
                               .reset(reset),
                               .enb(enb),
                               .current_sample(current_sample),  // uint16
                               .previous_sample_0(previous_sample),  // sfix32_En7
                               .previous_sample_1(previous_sample_1),  // sfix32_En7
                               .filter_output(filter_output),  // uint16
                               .new_previous_sample(new_previous_sample_1)  // sfix32_En7
                               );

  assign write_porcessing_addr_read_from_storage_addr_1 = Delay5_out1;

  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_reg[0] <= 9'b000000000;
        Delay3_reg[1] <= 9'b000000000;
        Delay3_reg[2] <= 9'b000000000;
      end
      else begin
        if (enb) begin
          Delay3_reg[0] <= Delay3_reg_next[0];
          Delay3_reg[1] <= Delay3_reg_next[1];
          Delay3_reg[2] <= Delay3_reg_next[2];
        end
      end
    end

  assign Delay3_out1 = Delay3_reg[2];
  assign Delay3_reg_next[0] = Delay5_out1;
  assign Delay3_reg_next[1] = Delay3_reg[0];
  assign Delay3_reg_next[2] = Delay3_reg[1];



  assign write_porcessing_addr_read_from_storage_addr_4 = Delay3_out1;

  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_reg[0] <= 1'b0;
        Delay4_reg[1] <= 1'b0;
        Delay4_reg[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_reg[0] <= Delay4_reg_next[0];
          Delay4_reg[1] <= Delay4_reg_next[1];
          Delay4_reg[2] <= Delay4_reg_next[2];
        end
      end
    end

  assign Delay4_out1 = Delay4_reg[2];
  assign Delay4_reg_next[0] = Delay6_out1;
  assign Delay4_reg_next[1] = Delay4_reg[0];
  assign Delay4_reg_next[2] = Delay4_reg[1];



  assign wr_en = Delay4_out1;

endmodule  // filtering

