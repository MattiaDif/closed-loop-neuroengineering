// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v23\channel_threshold.v
// Created: 2021-09-22 17:25:26
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: channel_threshold
// Source Path: CustArch_v23/cust_architecture/pipe_in_interpret/channel_threshold
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module channel_threshold
          (clk,
           reset,
           enb,
           In1,
           source_channel,
           th);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] In1;  // uint16
  input   [7:0] source_channel;  // uint8
  output  [15:0] th;  // uint16


  reg [15:0] Delay_out1;  // uint16
  wire [6:0] Cast_out1;  // ufix7
  wire Relational_Operator_relop1;
  wire [15:0] Constant_out1;  // uint16
  wire Relational_Operator1_relop1;
  wire Logical_Operator_out1;
  wire [7:0] y;  // uint8
  wire [6:0] Cast1_out1;  // ufix7
  reg [6:0] Delay1_reg [0:5];  // ufix7 [6]
  wire [6:0] Delay1_reg_next [0:5];  // ufix7 [6]
  wire [6:0] Delay1_out1;  // ufix7
  wire [15:0] Dual_Port_RAM_out1;  // uint16
  wire [15:0] Dual_Port_RAM_out2;  // uint16


  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= In1;
        end
      end
    end



  assign Cast_out1 = Delay_out1[6:0];



  assign Relational_Operator_relop1 = In1 != Delay_out1;



  assign Constant_out1 = 16'b0000000010000000;



  assign Relational_Operator1_relop1 = Delay_out1 < Constant_out1;



  assign Logical_Operator_out1 = Relational_Operator_relop1 & Relational_Operator1_relop1;



  assign y = source_channel;

  assign Cast1_out1 = y[6:0];



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_reg[0] <= 7'b0000000;
        Delay1_reg[1] <= 7'b0000000;
        Delay1_reg[2] <= 7'b0000000;
        Delay1_reg[3] <= 7'b0000000;
        Delay1_reg[4] <= 7'b0000000;
        Delay1_reg[5] <= 7'b0000000;
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= Delay1_reg_next[0];
          Delay1_reg[1] <= Delay1_reg_next[1];
          Delay1_reg[2] <= Delay1_reg_next[2];
          Delay1_reg[3] <= Delay1_reg_next[3];
          Delay1_reg[4] <= Delay1_reg_next[4];
          Delay1_reg[5] <= Delay1_reg_next[5];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[5];
  assign Delay1_reg_next[0] = Cast1_out1;
  assign Delay1_reg_next[1] = Delay1_reg[0];
  assign Delay1_reg_next[2] = Delay1_reg[1];
  assign Delay1_reg_next[3] = Delay1_reg[2];
  assign Delay1_reg_next[4] = Delay1_reg[3];
  assign Delay1_reg_next[5] = Delay1_reg[4];



  DualPortRAM_generic #(.AddrWidth(7),
                        .DataWidth(16)
                        )
                      u_Dual_Port_RAM (.clk(clk),
                                       .enb(enb),
                                       .wr_din(In1),
                                       .wr_addr(Cast_out1),
                                       .wr_en(Logical_Operator_out1),
                                       .rd_addr(Delay1_out1),
                                       .wr_dout(Dual_Port_RAM_out1),
                                       .rd_dout(Dual_Port_RAM_out2)
                                       );

  assign th = Dual_Port_RAM_out2;

endmodule  // channel_threshold

