// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v15\Subsystem.v
// Created: 2021-06-18 11:42:55
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: CustArch_v15/cust_architecture/process_and_retrieve/Subsystem
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           enb,
           enb_1_8_1,
           In1_0,
           In1_1,
           In1_2,
           In1_3,
           In1_4,
           In1_5,
           In1_6,
           In1_7,
           In2,
           Out1_0,
           Out1_1,
           Out1_2,
           Out1_3,
           Out1_4,
           Out1_5,
           Out1_6,
           Out1_7);


  input   clk;
  input   reset;
  input   enb;
  input   enb_1_8_1;
  input   [8:0] In1_0;  // ufix9
  input   [8:0] In1_1;  // ufix9
  input   [8:0] In1_2;  // ufix9
  input   [8:0] In1_3;  // ufix9
  input   [8:0] In1_4;  // ufix9
  input   [8:0] In1_5;  // ufix9
  input   [8:0] In1_6;  // ufix9
  input   [8:0] In1_7;  // ufix9
  input   In2;
  output  [8:0] Out1_0;  // ufix9
  output  [8:0] Out1_1;  // ufix9
  output  [8:0] Out1_2;  // ufix9
  output  [8:0] Out1_3;  // ufix9
  output  [8:0] Out1_4;  // ufix9
  output  [8:0] Out1_5;  // ufix9
  output  [8:0] Out1_6;  // ufix9
  output  [8:0] Out1_7;  // ufix9


  wire Compare_To_Constant1_out1;
  reg  [0:3] Delay1_reg;  // ufix1 [4]
  wire [0:3] Delay1_reg_next;  // ufix1 [4]
  wire Delay1_out1;
  reg [3:0] HDL_Counter1_out1;  // ufix4
  wire switch_compare_1;
  wire [8:0] Delay_out_1;  // ufix9
  reg [8:0] Delay_1_reg [0:3];  // ufix9 [4]
  wire [8:0] Delay_out_2;  // ufix9
  wire [8:0] Delay_out_3;  // ufix9
  wire [8:0] Delay_out_4;  // ufix9
  wire [8:0] Delay_out_5;  // ufix9
  wire [8:0] Delay_out_6;  // ufix9
  wire [8:0] Delay_out_7;  // ufix9
  wire [8:0] Delay_out_8;  // ufix9
  reg [8:0] Delay_1_reg_1 [0:3];  // ufix9 [4]
  reg [8:0] Delay_1_reg_2 [0:3];  // ufix9 [4]
  reg [8:0] Delay_1_reg_3 [0:3];  // ufix9 [4]
  reg [8:0] Delay_1_reg_4 [0:3];  // ufix9 [4]
  reg [8:0] Delay_1_reg_5 [0:3];  // ufix9 [4]
  reg [8:0] Delay_1_reg_6 [0:3];  // ufix9 [4]
  reg [8:0] Delay_1_reg_7 [0:3];  // ufix9 [4]
  wire [8:0] Delay_1_reg_next [0:3];  // ufix9 [4]
  wire [8:0] Delay_1_reg_next_1 [0:3];  // ufix9 [4]
  wire [8:0] Delay_1_reg_next_2 [0:3];  // ufix9 [4]
  wire [8:0] Delay_1_reg_next_3 [0:3];  // ufix9 [4]
  wire [8:0] Delay_1_reg_next_4 [0:3];  // ufix9 [4]
  wire [8:0] Delay_1_reg_next_5 [0:3];  // ufix9 [4]
  wire [8:0] Delay_1_reg_next_6 [0:3];  // ufix9 [4]
  wire [8:0] Delay_1_reg_next_7 [0:3];  // ufix9 [4]
  wire [8:0] In1 [0:7];  // ufix9 [8]
  wire [8:0] Delay_out1 [0:7];  // ufix9 [8]
  wire [8:0] Switch_out1 [0:7];  // ufix9 [8]
  reg [8:0] Rate_Transition1_bypass_reg [0:7];  // ufix9 [8]
  wire [8:0] Rate_Transition1_bypass_reg_next [0:7];  // ufix9 [8]
  wire [8:0] Rate_Transition1_out1 [0:7];  // ufix9 [8]


  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_reg[0] <= 1'b0;
        Delay1_reg[1] <= 1'b0;
        Delay1_reg[2] <= 1'b0;
        Delay1_reg[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= Delay1_reg_next[0];
          Delay1_reg[1] <= Delay1_reg_next[1];
          Delay1_reg[2] <= Delay1_reg_next[2];
          Delay1_reg[3] <= Delay1_reg_next[3];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[3];
  assign Delay1_reg_next[0] = Compare_To_Constant1_out1;
  assign Delay1_reg_next[1] = Delay1_reg[0];
  assign Delay1_reg_next[2] = Delay1_reg[1];
  assign Delay1_reg_next[3] = Delay1_reg[2];



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 8
  always @(posedge clk or posedge reset)
    begin : HDL_Counter1_process
      if (reset == 1'b1) begin
        HDL_Counter1_out1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          if (Delay1_out1 == 1'b1) begin
            HDL_Counter1_out1 <= 4'b0000;
          end
          else if (In2 == 1'b1) begin
            if (HDL_Counter1_out1 >= 4'b1000) begin
              HDL_Counter1_out1 <= 4'b0000;
            end
            else begin
              HDL_Counter1_out1 <= HDL_Counter1_out1 + 4'b0001;
            end
          end
        end
      end
    end



  assign Compare_To_Constant1_out1 = HDL_Counter1_out1 == 4'b0010;



  assign switch_compare_1 = Compare_To_Constant1_out1 > 1'b0;



  always @(posedge clk or posedge reset)
    begin : Delay_1_process
      if (reset == 1'b1) begin
        Delay_1_reg[0] <= 9'b000000000;
        Delay_1_reg[1] <= 9'b000000000;
        Delay_1_reg[2] <= 9'b000000000;
        Delay_1_reg[3] <= 9'b000000000;
        Delay_1_reg_1[0] <= 9'b000000000;
        Delay_1_reg_1[1] <= 9'b000000000;
        Delay_1_reg_1[2] <= 9'b000000000;
        Delay_1_reg_1[3] <= 9'b000000000;
        Delay_1_reg_2[0] <= 9'b000000000;
        Delay_1_reg_2[1] <= 9'b000000000;
        Delay_1_reg_2[2] <= 9'b000000000;
        Delay_1_reg_2[3] <= 9'b000000000;
        Delay_1_reg_3[0] <= 9'b000000000;
        Delay_1_reg_3[1] <= 9'b000000000;
        Delay_1_reg_3[2] <= 9'b000000000;
        Delay_1_reg_3[3] <= 9'b000000000;
        Delay_1_reg_4[0] <= 9'b000000000;
        Delay_1_reg_4[1] <= 9'b000000000;
        Delay_1_reg_4[2] <= 9'b000000000;
        Delay_1_reg_4[3] <= 9'b000000000;
        Delay_1_reg_5[0] <= 9'b000000000;
        Delay_1_reg_5[1] <= 9'b000000000;
        Delay_1_reg_5[2] <= 9'b000000000;
        Delay_1_reg_5[3] <= 9'b000000000;
        Delay_1_reg_6[0] <= 9'b000000000;
        Delay_1_reg_6[1] <= 9'b000000000;
        Delay_1_reg_6[2] <= 9'b000000000;
        Delay_1_reg_6[3] <= 9'b000000000;
        Delay_1_reg_7[0] <= 9'b000000000;
        Delay_1_reg_7[1] <= 9'b000000000;
        Delay_1_reg_7[2] <= 9'b000000000;
        Delay_1_reg_7[3] <= 9'b000000000;
      end
      else begin
        if (enb) begin
          Delay_1_reg[0] <= Delay_1_reg_next[0];
          Delay_1_reg[1] <= Delay_1_reg_next[1];
          Delay_1_reg[2] <= Delay_1_reg_next[2];
          Delay_1_reg[3] <= Delay_1_reg_next[3];
          Delay_1_reg_1[0] <= Delay_1_reg_next_1[0];
          Delay_1_reg_1[1] <= Delay_1_reg_next_1[1];
          Delay_1_reg_1[2] <= Delay_1_reg_next_1[2];
          Delay_1_reg_1[3] <= Delay_1_reg_next_1[3];
          Delay_1_reg_2[0] <= Delay_1_reg_next_2[0];
          Delay_1_reg_2[1] <= Delay_1_reg_next_2[1];
          Delay_1_reg_2[2] <= Delay_1_reg_next_2[2];
          Delay_1_reg_2[3] <= Delay_1_reg_next_2[3];
          Delay_1_reg_3[0] <= Delay_1_reg_next_3[0];
          Delay_1_reg_3[1] <= Delay_1_reg_next_3[1];
          Delay_1_reg_3[2] <= Delay_1_reg_next_3[2];
          Delay_1_reg_3[3] <= Delay_1_reg_next_3[3];
          Delay_1_reg_4[0] <= Delay_1_reg_next_4[0];
          Delay_1_reg_4[1] <= Delay_1_reg_next_4[1];
          Delay_1_reg_4[2] <= Delay_1_reg_next_4[2];
          Delay_1_reg_4[3] <= Delay_1_reg_next_4[3];
          Delay_1_reg_5[0] <= Delay_1_reg_next_5[0];
          Delay_1_reg_5[1] <= Delay_1_reg_next_5[1];
          Delay_1_reg_5[2] <= Delay_1_reg_next_5[2];
          Delay_1_reg_5[3] <= Delay_1_reg_next_5[3];
          Delay_1_reg_6[0] <= Delay_1_reg_next_6[0];
          Delay_1_reg_6[1] <= Delay_1_reg_next_6[1];
          Delay_1_reg_6[2] <= Delay_1_reg_next_6[2];
          Delay_1_reg_6[3] <= Delay_1_reg_next_6[3];
          Delay_1_reg_7[0] <= Delay_1_reg_next_7[0];
          Delay_1_reg_7[1] <= Delay_1_reg_next_7[1];
          Delay_1_reg_7[2] <= Delay_1_reg_next_7[2];
          Delay_1_reg_7[3] <= Delay_1_reg_next_7[3];
        end
      end
    end

  assign Delay_1_reg_next[0] = In1_0;
  assign Delay_1_reg_next[1] = Delay_1_reg[0];
  assign Delay_1_reg_next[2] = Delay_1_reg[1];
  assign Delay_1_reg_next[3] = Delay_1_reg[2];
  assign Delay_out_1 = Delay_1_reg[3];
  assign Delay_1_reg_next_1[0] = In1_1;
  assign Delay_1_reg_next_1[1] = Delay_1_reg_1[0];
  assign Delay_1_reg_next_1[2] = Delay_1_reg_1[1];
  assign Delay_1_reg_next_1[3] = Delay_1_reg_1[2];
  assign Delay_out_2 = Delay_1_reg_1[3];
  assign Delay_1_reg_next_2[0] = In1_2;
  assign Delay_1_reg_next_2[1] = Delay_1_reg_2[0];
  assign Delay_1_reg_next_2[2] = Delay_1_reg_2[1];
  assign Delay_1_reg_next_2[3] = Delay_1_reg_2[2];
  assign Delay_out_3 = Delay_1_reg_2[3];
  assign Delay_1_reg_next_3[0] = In1_3;
  assign Delay_1_reg_next_3[1] = Delay_1_reg_3[0];
  assign Delay_1_reg_next_3[2] = Delay_1_reg_3[1];
  assign Delay_1_reg_next_3[3] = Delay_1_reg_3[2];
  assign Delay_out_4 = Delay_1_reg_3[3];
  assign Delay_1_reg_next_4[0] = In1_4;
  assign Delay_1_reg_next_4[1] = Delay_1_reg_4[0];
  assign Delay_1_reg_next_4[2] = Delay_1_reg_4[1];
  assign Delay_1_reg_next_4[3] = Delay_1_reg_4[2];
  assign Delay_out_5 = Delay_1_reg_4[3];
  assign Delay_1_reg_next_5[0] = In1_5;
  assign Delay_1_reg_next_5[1] = Delay_1_reg_5[0];
  assign Delay_1_reg_next_5[2] = Delay_1_reg_5[1];
  assign Delay_1_reg_next_5[3] = Delay_1_reg_5[2];
  assign Delay_out_6 = Delay_1_reg_5[3];
  assign Delay_1_reg_next_6[0] = In1_6;
  assign Delay_1_reg_next_6[1] = Delay_1_reg_6[0];
  assign Delay_1_reg_next_6[2] = Delay_1_reg_6[1];
  assign Delay_1_reg_next_6[3] = Delay_1_reg_6[2];
  assign Delay_out_7 = Delay_1_reg_6[3];
  assign Delay_1_reg_next_7[0] = In1_7;
  assign Delay_1_reg_next_7[1] = Delay_1_reg_7[0];
  assign Delay_1_reg_next_7[2] = Delay_1_reg_7[1];
  assign Delay_1_reg_next_7[3] = Delay_1_reg_7[2];
  assign Delay_out_8 = Delay_1_reg_7[3];



  assign In1[0] = In1_0;
  assign In1[1] = In1_1;
  assign In1[2] = In1_2;
  assign In1[3] = In1_3;
  assign In1[4] = In1_4;
  assign In1[5] = In1_5;
  assign In1[6] = In1_6;
  assign In1[7] = In1_7;

  assign Delay_out1[0] = Delay_out_1;
  assign Delay_out1[1] = Delay_out_2;
  assign Delay_out1[2] = Delay_out_3;
  assign Delay_out1[3] = Delay_out_4;
  assign Delay_out1[4] = Delay_out_5;
  assign Delay_out1[5] = Delay_out_6;
  assign Delay_out1[6] = Delay_out_7;
  assign Delay_out1[7] = Delay_out_8;

  assign Switch_out1[0] = (switch_compare_1 == 1'b0 ? In1[0] :
              Delay_out1[0]);
  assign Switch_out1[1] = (switch_compare_1 == 1'b0 ? In1[1] :
              Delay_out1[1]);
  assign Switch_out1[2] = (switch_compare_1 == 1'b0 ? In1[2] :
              Delay_out1[2]);
  assign Switch_out1[3] = (switch_compare_1 == 1'b0 ? In1[3] :
              Delay_out1[3]);
  assign Switch_out1[4] = (switch_compare_1 == 1'b0 ? In1[4] :
              Delay_out1[4]);
  assign Switch_out1[5] = (switch_compare_1 == 1'b0 ? In1[5] :
              Delay_out1[5]);
  assign Switch_out1[6] = (switch_compare_1 == 1'b0 ? In1[6] :
              Delay_out1[6]);
  assign Switch_out1[7] = (switch_compare_1 == 1'b0 ? In1[7] :
              Delay_out1[7]);



  always @(posedge clk or posedge reset)
    begin : Rate_Transition1_bypass_process
      if (reset == 1'b1) begin
        Rate_Transition1_bypass_reg[0] <= 9'b000000000;
        Rate_Transition1_bypass_reg[1] <= 9'b000000000;
        Rate_Transition1_bypass_reg[2] <= 9'b000000000;
        Rate_Transition1_bypass_reg[3] <= 9'b000000000;
        Rate_Transition1_bypass_reg[4] <= 9'b000000000;
        Rate_Transition1_bypass_reg[5] <= 9'b000000000;
        Rate_Transition1_bypass_reg[6] <= 9'b000000000;
        Rate_Transition1_bypass_reg[7] <= 9'b000000000;
      end
      else begin
        if (enb_1_8_1) begin
          Rate_Transition1_bypass_reg[0] <= Rate_Transition1_bypass_reg_next[0];
          Rate_Transition1_bypass_reg[1] <= Rate_Transition1_bypass_reg_next[1];
          Rate_Transition1_bypass_reg[2] <= Rate_Transition1_bypass_reg_next[2];
          Rate_Transition1_bypass_reg[3] <= Rate_Transition1_bypass_reg_next[3];
          Rate_Transition1_bypass_reg[4] <= Rate_Transition1_bypass_reg_next[4];
          Rate_Transition1_bypass_reg[5] <= Rate_Transition1_bypass_reg_next[5];
          Rate_Transition1_bypass_reg[6] <= Rate_Transition1_bypass_reg_next[6];
          Rate_Transition1_bypass_reg[7] <= Rate_Transition1_bypass_reg_next[7];
        end
      end
    end

  assign Rate_Transition1_out1[0] = (enb_1_8_1 == 1'b1 ? Switch_out1[0] :
              Rate_Transition1_bypass_reg[0]);
  assign Rate_Transition1_out1[1] = (enb_1_8_1 == 1'b1 ? Switch_out1[1] :
              Rate_Transition1_bypass_reg[1]);
  assign Rate_Transition1_out1[2] = (enb_1_8_1 == 1'b1 ? Switch_out1[2] :
              Rate_Transition1_bypass_reg[2]);
  assign Rate_Transition1_out1[3] = (enb_1_8_1 == 1'b1 ? Switch_out1[3] :
              Rate_Transition1_bypass_reg[3]);
  assign Rate_Transition1_out1[4] = (enb_1_8_1 == 1'b1 ? Switch_out1[4] :
              Rate_Transition1_bypass_reg[4]);
  assign Rate_Transition1_out1[5] = (enb_1_8_1 == 1'b1 ? Switch_out1[5] :
              Rate_Transition1_bypass_reg[5]);
  assign Rate_Transition1_out1[6] = (enb_1_8_1 == 1'b1 ? Switch_out1[6] :
              Rate_Transition1_bypass_reg[6]);
  assign Rate_Transition1_out1[7] = (enb_1_8_1 == 1'b1 ? Switch_out1[7] :
              Rate_Transition1_bypass_reg[7]);
  assign Rate_Transition1_bypass_reg_next[0] = Switch_out1[0];
  assign Rate_Transition1_bypass_reg_next[1] = Switch_out1[1];
  assign Rate_Transition1_bypass_reg_next[2] = Switch_out1[2];
  assign Rate_Transition1_bypass_reg_next[3] = Switch_out1[3];
  assign Rate_Transition1_bypass_reg_next[4] = Switch_out1[4];
  assign Rate_Transition1_bypass_reg_next[5] = Switch_out1[5];
  assign Rate_Transition1_bypass_reg_next[6] = Switch_out1[6];
  assign Rate_Transition1_bypass_reg_next[7] = Switch_out1[7];



  assign Out1_0 = Rate_Transition1_out1[0];

  assign Out1_1 = Rate_Transition1_out1[1];

  assign Out1_2 = Rate_Transition1_out1[2];

  assign Out1_3 = Rate_Transition1_out1[3];

  assign Out1_4 = Rate_Transition1_out1[4];

  assign Out1_5 = Rate_Transition1_out1[5];

  assign Out1_6 = Rate_Transition1_out1[6];

  assign Out1_7 = Rate_Transition1_out1[7];

endmodule  // Subsystem

