// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v20\two_pole_IIR.v
// Created: 2021-07-15 12:17:47
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: two_pole_IIR
// Source Path: CustArch_v20/cust_architecture/process_and_retrieve/two_pole_IIR
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module two_pole_IIR
          (clk,
           reset,
           enb_1_2_0,
           enb_1_2_1,
           current_sample,
           previous_sample_0,
           previous_sample_1,
           filter_output,
           new_previous_sample);


  input   clk;
  input   reset;
  input   enb_1_2_0;
  input   enb_1_2_1;
  input   [15:0] current_sample;  // uint16
  input   signed [31:0] previous_sample_0;  // sfix32_En7
  input   signed [31:0] previous_sample_1;  // sfix32_En7
  output  [15:0] filter_output;  // uint16
  output  signed [31:0] new_previous_sample;  // sfix32_En7


  reg [15:0] Rate_Transition2_bypass_reg;  // ufix16
  wire [15:0] Rate_Transition2_out1;  // uint16
  wire [15:0] Constant_out1;  // uint16
  wire signed [31:0] Subtract_sub_cast;  // sfix32_En14
  wire signed [31:0] Subtract_sub_cast_1;  // sfix32_En14
  wire signed [31:0] Subtract_sub_temp;  // sfix32_En14
  wire signed [31:0] Subtract_out1;  // sfix32_En15
  wire signed [31:0] previous_sample [0:1];  // sfix32_En7 [2]
  reg signed [31:0] Rate_Transition3_bypass_reg [0:1];  // sfix32 [2]
  wire signed [31:0] Rate_Transition3_bypass_reg_next [0:1];  // sfix32_En7 [2]
  wire signed [31:0] Rate_Transition3_out1 [0:1];  // sfix32_En7 [2]
  wire signed [31:0] HP_Butter_2nd_out1;  // sfix32_En15
  wire signed [31:0] HP_Butter_2nd_out2;  // sfix32_En7
  wire [15:0] Constant1_out1;  // uint16
  wire signed [31:0] Subtract1_add_cast;  // sfix32_En14
  wire signed [31:0] Subtract1_add_cast_1;  // sfix32_En14
  wire signed [31:0] Subtract1_add_temp;  // sfix32_En14
  wire [15:0] Subtract1_out1;  // uint16
  reg [15:0] Rate_Transition_out1;  // uint16
  reg signed [31:0] Rate_Transition1_out1;  // sfix32_En7


  always @(posedge clk or posedge reset)
    begin : Rate_Transition2_bypass_process
      if (reset == 1'b1) begin
        Rate_Transition2_bypass_reg <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_2_1) begin
          Rate_Transition2_bypass_reg <= current_sample;
        end
      end
    end

  assign Rate_Transition2_out1 = (enb_1_2_1 == 1'b1 ? current_sample :
              Rate_Transition2_bypass_reg);



  assign Constant_out1 = 16'b1000000000000000;



  assign Subtract_sub_cast = {2'b0, {Rate_Transition2_out1, 14'b00000000000000}};
  assign Subtract_sub_cast_1 = {2'b0, {Constant_out1, 14'b00000000000000}};
  assign Subtract_sub_temp = Subtract_sub_cast - Subtract_sub_cast_1;
  assign Subtract_out1 = {Subtract_sub_temp[30:0], 1'b0};



  assign previous_sample[0] = previous_sample_0;
  assign previous_sample[1] = previous_sample_1;

  always @(posedge clk or posedge reset)
    begin : Rate_Transition3_bypass_process
      if (reset == 1'b1) begin
        Rate_Transition3_bypass_reg[0] <= 32'sb00000000000000000000000000000000;
        Rate_Transition3_bypass_reg[1] <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_1_2_1) begin
          Rate_Transition3_bypass_reg[0] <= Rate_Transition3_bypass_reg_next[0];
          Rate_Transition3_bypass_reg[1] <= Rate_Transition3_bypass_reg_next[1];
        end
      end
    end

  assign Rate_Transition3_out1[0] = (enb_1_2_1 == 1'b1 ? previous_sample[0] :
              Rate_Transition3_bypass_reg[0]);
  assign Rate_Transition3_out1[1] = (enb_1_2_1 == 1'b1 ? previous_sample[1] :
              Rate_Transition3_bypass_reg[1]);
  assign Rate_Transition3_bypass_reg_next[0] = previous_sample[0];
  assign Rate_Transition3_bypass_reg_next[1] = previous_sample[1];



  HP_Butter_2nd u_HP_Butter_2nd (.Input_rsvd(Subtract_out1),  // sfix32_En15
                                 .previous_samples_0(Rate_Transition3_out1[0]),  // sfix32_En7
                                 .previous_samples_1(Rate_Transition3_out1[1]),  // sfix32_En7
                                 .Output_rsvd(HP_Butter_2nd_out1),  // sfix32_En15
                                 .Output1(HP_Butter_2nd_out2)  // sfix32_En7
                                 );

  assign Constant1_out1 = 16'b1000000000000000;



  assign Subtract1_add_cast = {HP_Butter_2nd_out1[31], HP_Butter_2nd_out1[31:1]};
  assign Subtract1_add_cast_1 = {2'b0, {Constant1_out1, 14'b00000000000000}};
  assign Subtract1_add_temp = Subtract1_add_cast + Subtract1_add_cast_1;
  assign Subtract1_out1 = Subtract1_add_temp[29:14];



  always @(posedge clk or posedge reset)
    begin : Rate_Transition_process
      if (reset == 1'b1) begin
        Rate_Transition_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          Rate_Transition_out1 <= Subtract1_out1;
        end
      end
    end



  assign filter_output = Rate_Transition_out1;

  always @(posedge clk or posedge reset)
    begin : Rate_Transition1_process
      if (reset == 1'b1) begin
        Rate_Transition1_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          Rate_Transition1_out1 <= HP_Butter_2nd_out2;
        end
      end
    end



  assign new_previous_sample = Rate_Transition1_out1;

endmodule  // two_pole_IIR

