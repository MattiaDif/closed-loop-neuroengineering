// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v24\channel_threshold.v
// Created: 2021-09-29 17:03:18
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: channel_threshold
// Source Path: CustArch_v24/cust_architecture/pipe_in_interpret/channel_threshold
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module channel_threshold
          (clk,
           reset,
           enb,
           source_channel_0_159,
           value_from_pipe_in,
           th);


  input   clk;
  input   reset;
  input   enb;
  input   [7:0] source_channel_0_159;  // uint8
  input   [15:0] value_from_pipe_in;  // uint16
  output  [15:0] th;  // uint16


  reg [15:0] value_from_pipe_in_1;  // uint16
  wire [7:0] Bit_Slice_out1;  // uint8
  reg [7:0] Delay4_out1;  // uint8
  wire Detect_Change_out1;
  reg  Delay2_out1;
  wire Compare_To_Constant_out1;
  reg  Delay3_out1;
  wire Logical_Operator_out1;
  reg [7:0] Delay1_reg [0:5];  // ufix8 [6]
  wire [7:0] Delay1_reg_next [0:5];  // ufix8 [6]
  wire [7:0] Delay1_out1;  // uint8
  wire [15:0] th_RAM_out1;  // uint16
  wire [15:0] th_RAM_out2;  // uint16


  always @(posedge clk or posedge reset)
    begin : reduced_process
      if (reset == 1'b1) begin
        value_from_pipe_in_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          value_from_pipe_in_1 <= value_from_pipe_in;
        end
      end
    end



  assign Bit_Slice_out1 = value_from_pipe_in_1[7:0];



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Bit_Slice_out1;
        end
      end
    end



  Detect_Change u_Detect_Change (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .U(value_from_pipe_in),  // uint16
                                 .Y(Detect_Change_out1)
                                 );

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Detect_Change_out1;
        end
      end
    end



  assign Compare_To_Constant_out1 = value_from_pipe_in_1 < 16'b0000000010000000;



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Compare_To_Constant_out1;
        end
      end
    end



  assign Logical_Operator_out1 = Delay2_out1 & Delay3_out1;



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_reg[0] <= 8'b00000000;
        Delay1_reg[1] <= 8'b00000000;
        Delay1_reg[2] <= 8'b00000000;
        Delay1_reg[3] <= 8'b00000000;
        Delay1_reg[4] <= 8'b00000000;
        Delay1_reg[5] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= Delay1_reg_next[0];
          Delay1_reg[1] <= Delay1_reg_next[1];
          Delay1_reg[2] <= Delay1_reg_next[2];
          Delay1_reg[3] <= Delay1_reg_next[3];
          Delay1_reg[4] <= Delay1_reg_next[4];
          Delay1_reg[5] <= Delay1_reg_next[5];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[5];
  assign Delay1_reg_next[0] = source_channel_0_159;
  assign Delay1_reg_next[1] = Delay1_reg[0];
  assign Delay1_reg_next[2] = Delay1_reg[1];
  assign Delay1_reg_next[3] = Delay1_reg[2];
  assign Delay1_reg_next[4] = Delay1_reg[3];
  assign Delay1_reg_next[5] = Delay1_reg[4];



  DualPortRAM_generic #(.AddrWidth(8),
                        .DataWidth(16)
                        )
                      u_th_RAM (.clk(clk),
                                .enb(enb),
                                .wr_din(value_from_pipe_in_1),
                                .wr_addr(Delay4_out1),
                                .wr_en(Logical_Operator_out1),
                                .rd_addr(Delay1_out1),
                                .wr_dout(th_RAM_out1),
                                .rd_dout(th_RAM_out2)
                                );

  assign th = th_RAM_out2;

endmodule  // channel_threshold

