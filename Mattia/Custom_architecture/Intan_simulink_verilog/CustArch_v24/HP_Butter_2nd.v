// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v24\HP_Butter_2nd.v
// Created: 2021-09-29 17:03:18
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HP_Butter_2nd
// Source Path: CustArch_v24/cust_architecture/process_and_retrieve/filtering/two_pole_IIR/HP_Butter_2nd
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HP_Butter_2nd
          (clk,
           reset,
           enb,
           Input_rsvd,
           previous_samples_0,
           previous_samples_1,
           Output_rsvd,
           Output1);


  input   clk;
  input   reset;
  input   enb;
  input   signed [31:0] Input_rsvd;  // sfix32_En15
  input   signed [31:0] previous_samples_0;  // sfix32_En7
  input   signed [31:0] previous_samples_1;  // sfix32_En7
  output  signed [31:0] Output_rsvd;  // sfix32_En15
  output  signed [31:0] Output1;  // sfix32_En7


  wire signed [64:0] s_1_mul_temp;  // sfix65_En47
  wire signed [63:0] s_1_cast;  // sfix64_En47
  wire signed [31:0] s_1_out1;  // sfix32_En16
  reg signed [31:0] Delay6_out1;  // sfix32_En16
  wire signed [63:0] a_2_1_mul_temp;  // sfix64_En37
  wire signed [31:0] a_2_1_out1;  // sfix32_En6
  reg signed [31:0] Delay7_out1;  // sfix32_En6
  wire signed [31:0] SumA21_sub_cast;  // sfix32_En6
  wire signed [32:0] SumA21_sub_cast_1;  // sfix33_En6
  wire signed [32:0] SumA21_sub_cast_2;  // sfix33_En6
  wire signed [32:0] SumA21_sub_temp;  // sfix33_En6
  wire signed [31:0] SumA21_out1;  // sfix32_En6
  reg signed [31:0] Delay_out1;  // sfix32_En6
  wire signed [64:0] a_3_1_mul_temp;  // sfix65_En39
  wire signed [63:0] a_3_1_cast;  // sfix64_En39
  wire signed [31:0] a_3_1_out1;  // sfix32_En8
  reg signed [31:0] Delay1_reg [0:1];  // sfix32 [2]
  wire signed [31:0] Delay1_reg_next [0:1];  // sfix32_En8 [2]
  wire signed [31:0] Delay1_out1;  // sfix32_En8
  wire signed [32:0] SumA31_sub_cast;  // sfix33_En6
  wire signed [31:0] SumA31_sub_cast_1;  // sfix32_En6
  wire signed [32:0] SumA31_sub_cast_2;  // sfix33_En6
  wire signed [32:0] SumA31_sub_temp;  // sfix33_En6
  wire signed [31:0] SumA31_cast;  // sfix32_En6
  wire signed [31:0] SumA31_out1;  // sfix32_En7
  reg signed [31:0] Delay2_out1;  // sfix32_En7
  wire signed [63:0] b_2_1_mul_temp;  // sfix64_En37
  wire signed [63:0] b_2_1_1;  // sfix64
  wire signed [31:0] b_2_1_out1;  // sfix32_En6
  reg signed [31:0] Delay3_reg [0:2];  // sfix32 [3]
  wire signed [31:0] Delay3_reg_next [0:2];  // sfix32_En6 [3]
  wire signed [31:0] Delay3_out1;  // sfix32_En6
  wire signed [31:0] SumB21_add_cast;  // sfix32_En6
  wire signed [32:0] SumB21_add_cast_1;  // sfix33_En6
  wire signed [32:0] SumB21_add_cast_2;  // sfix33_En6
  wire signed [32:0] SumB21_add_temp;  // sfix33_En6
  wire signed [31:0] SumB21_cast;  // sfix32_En6
  wire signed [31:0] SumB21_out1;  // sfix32_En7
  reg signed [31:0] Delay5_out1;  // sfix32_En7
  reg signed [31:0] Delay4_reg [0:3];  // sfix32 [4]
  wire signed [31:0] Delay4_reg_next [0:3];  // sfix32_En7 [4]
  wire signed [31:0] Delay4_out1;  // sfix32_En7
  wire signed [32:0] SumB31_add_cast;  // sfix33_En7
  wire signed [32:0] SumB31_add_cast_1;  // sfix33_En7
  wire signed [32:0] SumB31_add_temp;  // sfix33_En7
  wire signed [31:0] SumB31_cast;  // sfix32_En7
  wire signed [31:0] SumB31_out1;  // sfix32_En15


  assign s_1_mul_temp = 33'sh0F4E0044F * Input_rsvd;
  assign s_1_cast = s_1_mul_temp[63:0];
  assign s_1_out1 = (((s_1_cast[63] == 1'b0) && (s_1_cast[62] != 1'b0)) || ((s_1_cast[63] == 1'b0) && (s_1_cast[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((s_1_cast[63] == 1'b1) && (s_1_cast[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              s_1_cast[62:31] + $signed({1'b0, s_1_cast[30]})));



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= s_1_out1;
        end
      end
    end



  assign a_2_1_mul_temp = 32'sb10000101101011101111001001111111 * previous_samples_0;
  assign a_2_1_out1 = (((a_2_1_mul_temp[63] == 1'b0) && (a_2_1_mul_temp[62] != 1'b0)) || ((a_2_1_mul_temp[63] == 1'b0) && (a_2_1_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((a_2_1_mul_temp[63] == 1'b1) && (a_2_1_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              a_2_1_mul_temp[62:31] + $signed({1'b0, a_2_1_mul_temp[30]})));



  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_out1 <= a_2_1_out1;
        end
      end
    end



  assign SumA21_sub_cast = ({{10{Delay6_out1[31]}}, Delay6_out1[31:10]}) + $signed({1'b0, Delay6_out1[9]});
  assign SumA21_sub_cast_1 = {SumA21_sub_cast[31], SumA21_sub_cast};
  assign SumA21_sub_cast_2 = {Delay7_out1[31], Delay7_out1};
  assign SumA21_sub_temp = SumA21_sub_cast_1 - SumA21_sub_cast_2;
  assign SumA21_out1 = ((SumA21_sub_temp[32] == 1'b0) && (SumA21_sub_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((SumA21_sub_temp[32] == 1'b1) && (SumA21_sub_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(SumA21_sub_temp[31:0])));



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= SumA21_out1;
        end
      end
    end



  assign a_3_1_mul_temp = 33'sh0EA3BDB37 * previous_samples_1;
  assign a_3_1_cast = a_3_1_mul_temp[63:0];
  assign a_3_1_out1 = (((a_3_1_cast[63] == 1'b0) && (a_3_1_cast[62] != 1'b0)) || ((a_3_1_cast[63] == 1'b0) && (a_3_1_cast[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((a_3_1_cast[63] == 1'b1) && (a_3_1_cast[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              a_3_1_cast[62:31] + $signed({1'b0, a_3_1_cast[30]})));



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_reg[0] <= 32'sb00000000000000000000000000000000;
        Delay1_reg[1] <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= Delay1_reg_next[0];
          Delay1_reg[1] <= Delay1_reg_next[1];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[1];
  assign Delay1_reg_next[0] = a_3_1_out1;
  assign Delay1_reg_next[1] = Delay1_reg[0];



  assign SumA31_sub_cast = {Delay_out1[31], Delay_out1};
  assign SumA31_sub_cast_1 = ({{2{Delay1_out1[31]}}, Delay1_out1[31:2]}) + $signed({1'b0, Delay1_out1[1]});
  assign SumA31_sub_cast_2 = {SumA31_sub_cast_1[31], SumA31_sub_cast_1};
  assign SumA31_sub_temp = SumA31_sub_cast - SumA31_sub_cast_2;
  assign SumA31_cast = ((SumA31_sub_temp[32] == 1'b0) && (SumA31_sub_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((SumA31_sub_temp[32] == 1'b1) && (SumA31_sub_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(SumA31_sub_temp[31:0])));
  assign SumA31_out1 = ((SumA31_cast[31] == 1'b0) && (SumA31_cast[30] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((SumA31_cast[31] == 1'b1) && (SumA31_cast[30] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              {SumA31_cast[30:0], 1'b0}));



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= SumA31_out1;
        end
      end
    end



  // CSD Encoding (2147483648) : 010000000000000000000000000000000; Cost (Adders) = 0
  assign b_2_1_1 = {previous_samples_0[31], {previous_samples_0, 31'b0000000000000000000000000000000}};
  assign b_2_1_mul_temp =  - (b_2_1_1);
  assign b_2_1_out1 = (((b_2_1_mul_temp[63] == 1'b0) && (b_2_1_mul_temp[62] != 1'b0)) || ((b_2_1_mul_temp[63] == 1'b0) && (b_2_1_mul_temp[62:31] == 32'sb01111111111111111111111111111111)) ? 32'sb01111111111111111111111111111111 :
              ((b_2_1_mul_temp[63] == 1'b1) && (b_2_1_mul_temp[62] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              b_2_1_mul_temp[62:31] + $signed({1'b0, b_2_1_mul_temp[30]})));



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_reg[0] <= 32'sb00000000000000000000000000000000;
        Delay3_reg[1] <= 32'sb00000000000000000000000000000000;
        Delay3_reg[2] <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_reg[0] <= Delay3_reg_next[0];
          Delay3_reg[1] <= Delay3_reg_next[1];
          Delay3_reg[2] <= Delay3_reg_next[2];
        end
      end
    end

  assign Delay3_out1 = Delay3_reg[2];
  assign Delay3_reg_next[0] = b_2_1_out1;
  assign Delay3_reg_next[1] = Delay3_reg[0];
  assign Delay3_reg_next[2] = Delay3_reg[1];



  assign SumB21_add_cast = ({Delay2_out1[31], Delay2_out1[31:1]}) + $signed({1'b0, Delay2_out1[0]});
  assign SumB21_add_cast_1 = {SumB21_add_cast[31], SumB21_add_cast};
  assign SumB21_add_cast_2 = {Delay3_out1[31], Delay3_out1};
  assign SumB21_add_temp = SumB21_add_cast_1 + SumB21_add_cast_2;
  assign SumB21_cast = ((SumB21_add_temp[32] == 1'b0) && (SumB21_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((SumB21_add_temp[32] == 1'b1) && (SumB21_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(SumB21_add_temp[31:0])));
  assign SumB21_out1 = ((SumB21_cast[31] == 1'b0) && (SumB21_cast[30] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((SumB21_cast[31] == 1'b1) && (SumB21_cast[30] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              {SumB21_cast[30:0], 1'b0}));



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= SumB21_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_reg[0] <= 32'sb00000000000000000000000000000000;
        Delay4_reg[1] <= 32'sb00000000000000000000000000000000;
        Delay4_reg[2] <= 32'sb00000000000000000000000000000000;
        Delay4_reg[3] <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_reg[0] <= Delay4_reg_next[0];
          Delay4_reg[1] <= Delay4_reg_next[1];
          Delay4_reg[2] <= Delay4_reg_next[2];
          Delay4_reg[3] <= Delay4_reg_next[3];
        end
      end
    end

  assign Delay4_out1 = Delay4_reg[3];
  assign Delay4_reg_next[0] = previous_samples_1;
  assign Delay4_reg_next[1] = Delay4_reg[0];
  assign Delay4_reg_next[2] = Delay4_reg[1];
  assign Delay4_reg_next[3] = Delay4_reg[2];



  assign SumB31_add_cast = {Delay5_out1[31], Delay5_out1};
  assign SumB31_add_cast_1 = {Delay4_out1[31], Delay4_out1};
  assign SumB31_add_temp = SumB31_add_cast + SumB31_add_cast_1;
  assign SumB31_cast = ((SumB31_add_temp[32] == 1'b0) && (SumB31_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((SumB31_add_temp[32] == 1'b1) && (SumB31_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(SumB31_add_temp[31:0])));
  assign SumB31_out1 = ((SumB31_cast[31] == 1'b0) && (SumB31_cast[30:23] != 8'b00000000) ? 32'sb01111111111111111111111111111111 :
              ((SumB31_cast[31] == 1'b1) && (SumB31_cast[30:23] != 8'b11111111) ? 32'sb10000000000000000000000000000000 :
              {SumB31_cast[23:0], 8'b00000000}));



  assign Output_rsvd = SumB31_out1;

  assign Output1 = SumA31_out1;

endmodule  // HP_Butter_2nd

