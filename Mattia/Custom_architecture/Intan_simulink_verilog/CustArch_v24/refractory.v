// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v24\refractory.v
// Created: 2021-09-23 14:17:17
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: refractory
// Source Path: CustArch_v24/cust_architecture/process_and_retrieve/pipe_in_interpret/refractory
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module refractory
          (clk,
           reset,
           enb,
           value_from_pipe_in,
           refractory_1);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] value_from_pipe_in;  // uint16
  output  [15:0] refractory_1;  // uint16


  reg [15:0] Delay2_out1;  // uint16
  reg [15:0] Delay2_out1_1;  // uint16
  reg [15:0] Delay2_out1_2;  // uint16
  wire [15:0] Constant_out1;  // uint16
  wire [1:0] Cast_out1;  // ufix2
  wire Relational_Operator2_relop1;
  reg  Delay3_out1;
  wire [15:0] Constant3_out1;  // uint16
  wire Relational_Operator3_relop1;
  reg  Delay4_out1;
  wire Logical_Operator1_out1;
  reg  Delay6_out1;
  wire [15:0] Dual_Port_RAM_out1;  // uint16
  wire [15:0] Dual_Port_RAM_out2;  // uint16


  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= value_from_pipe_in;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reduced_process
      if (reset == 1'b1) begin
        Delay2_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_1 <= Delay2_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        Delay2_out1_2 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_2 <= Delay2_out1_1;
        end
      end
    end



  assign Constant_out1 = 16'b0000000000000000;



  assign Cast_out1 = Constant_out1[1:0];



  assign Relational_Operator2_relop1 = Delay2_out1 != Delay2_out1_1;



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Relational_Operator2_relop1;
        end
      end
    end



  assign Constant3_out1 = 16'b0000000010000000;



  assign Relational_Operator3_relop1 = Delay2_out1_1 == Constant3_out1;



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Relational_Operator3_relop1;
        end
      end
    end



  assign Logical_Operator1_out1 = Delay3_out1 & Delay4_out1;



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Logical_Operator1_out1;
        end
      end
    end



  DualPortRAM_generic #(.AddrWidth(2),
                        .DataWidth(16)
                        )
                      u_Dual_Port_RAM (.clk(clk),
                                       .enb(enb),
                                       .wr_din(Delay2_out1_2),
                                       .wr_addr(Cast_out1),
                                       .wr_en(Delay6_out1),
                                       .rd_addr(Cast_out1),
                                       .wr_dout(Dual_Port_RAM_out1),
                                       .rd_dout(Dual_Port_RAM_out2)
                                       );

  assign refractory_1 = Dual_Port_RAM_out2;

endmodule  // refractory

