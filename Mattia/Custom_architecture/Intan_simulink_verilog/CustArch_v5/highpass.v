// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v5\highpass.v
// Created: 2021-04-30 09:55:26
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: highpass
// Source Path: CustArch_v5/cust_architecture/process_and_retrieve/highpass
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module highpass
          (clk,
           reset,
           enb,
           In,
           Enable,
           Out);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] In;  // uint16
  input   Enable;
  output  [15:0] Out;  // uint16


  wire [15:0] Constant1_out1;  // uint16
  wire signed [16:0] Add1_sub_temp;  // sfix17
  wire signed [16:0] Add1_1;  // sfix17
  wire signed [16:0] Add1_2;  // sfix17
  wire signed [15:0] Add1_out1;  // sfix16_En4
  wire signed [15:0] scaleconst1;  // sfix16_En22
  wire signed [31:0] multiplier_mul_temp;  // sfix32_En26
  wire signed [38:0] scale1;  // sfix39_En33
  wire signed [15:0] scaletypeconvert1;  // sfix16_En17
  wire signed [39:0] inputconv1;  // sfix40_En20
  wire enb_gated;
  wire signed [15:0] coeff_a2_section1;  // sfix16_En14
  wire signed [15:0] a1sumtypeconvert1;  // sfix16_En15
  reg signed [15:0] delay_section1;  // sfix16_En15
  wire signed [31:0] multiplier1_mul_temp;  // sfix32_En29
  wire signed [31:0] a2mul1;  // sfix32_En18
  wire signed [39:0] a1sum1_cast2;  // sfix40_En20
  wire signed [40:0] Sub_sub_cast;  // sfix41_En20
  wire signed [40:0] Sub_sub_cast_1;  // sfix41_En20
  wire signed [40:0] a1sum1_temp;  // sfix41_En20
  wire signed [39:0] a1sum1;  // sfix40_En20
  wire signed [31:0] b1mul1;  // sfix32_En29
  wire signed [39:0] b1multypeconvert1;  // sfix40_En29
  wire signed [16:0] gain1_cast;  // sfix17_En15
  wire signed [16:0] gain1_cast_1;  // sfix17_En15
  wire signed [31:0] b2mul1;  // sfix32_En29
  wire signed [40:0] adder_add_cast;  // sfix41_En29
  wire signed [39:0] adder_add_cast_1;  // sfix40_En29
  wire signed [40:0] adder_add_cast_2;  // sfix41_En29
  wire signed [40:0] adder_add_temp;  // sfix41_En29
  wire signed [39:0] b1sum1;  // sfix40_En29
  wire signed [15:0] output_typeconvert;  // sfix16_En15
  wire [15:0] Constant_out1;  // uint16
  wire signed [31:0] Add_add_cast;  // sfix32_En15
  wire signed [31:0] Add_add_cast_1;  // sfix32_En15
  wire signed [31:0] Add_add_temp;  // sfix32_En15
  wire [15:0] Add_out1;  // uint16
  wire [15:0] Add_out1_bypass;  // uint16
  reg [15:0] Add_out1_last_value;  // uint16


  assign Constant1_out1 = 16'b1000000000000000;



  assign Add1_1 = {1'b0, In};
  assign Add1_2 = {1'b0, Constant1_out1};
  assign Add1_sub_temp = Add1_1 - Add1_2;
  assign Add1_out1 = {Add1_sub_temp[11:0], 4'b0000};



  assign scaleconst1 = 16'sb0111111111111111;



  assign multiplier_mul_temp = Add1_out1 * scaleconst1;
  assign scale1 = {multiplier_mul_temp, 7'b0000000};



  assign scaletypeconvert1 = (((scale1[38] == 1'b0) && (scale1[37:31] != 7'b0000000)) || ((scale1[38] == 1'b0) && (scale1[31:16] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((scale1[38] == 1'b1) && (scale1[37:31] != 7'b1111111) ? 16'sb1000000000000000 :
              scale1[31:16] + $signed({1'b0, scale1[15] & (scale1[16] | (|scale1[14:0]))})));



  assign inputconv1 = {{21{scaletypeconvert1[15]}}, {scaletypeconvert1, 3'b000}};



  assign enb_gated = Enable && enb;

  assign coeff_a2_section1 = 16'sb1100001111100110;



  always @(posedge clk or posedge reset)
    begin : delay_process_section1_process
      if (reset == 1'b1) begin
        delay_section1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_gated) begin
          delay_section1 <= a1sumtypeconvert1;
        end
      end
    end



  assign multiplier1_mul_temp = delay_section1 * coeff_a2_section1;
  assign a2mul1 = ({{11{multiplier1_mul_temp[31]}}, multiplier1_mul_temp[31:11]}) + $signed({1'b0, multiplier1_mul_temp[10] & (multiplier1_mul_temp[11] | (|multiplier1_mul_temp[9:0]))});



  assign a1sum1_cast2 = {{6{a2mul1[31]}}, {a2mul1, 2'b00}};



  assign Sub_sub_cast = {inputconv1[39], inputconv1};
  assign Sub_sub_cast_1 = {a1sum1_cast2[39], a1sum1_cast2};
  assign a1sum1_temp = Sub_sub_cast - Sub_sub_cast_1;



  assign a1sum1 = ((a1sum1_temp[40] == 1'b0) && (a1sum1_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((a1sum1_temp[40] == 1'b1) && (a1sum1_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(a1sum1_temp[39:0])));



  assign a1sumtypeconvert1 = (((a1sum1[39] == 1'b0) && (a1sum1[38:20] != 19'b0000000000000000000)) || ((a1sum1[39] == 1'b0) && (a1sum1[20:5] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((a1sum1[39] == 1'b1) && (a1sum1[38:20] != 19'b1111111111111111111) ? 16'sb1000000000000000 :
              a1sum1[20:5] + $signed({1'b0, a1sum1[4] & (a1sum1[5] | (|a1sum1[3:0]))})));



  // coeff_b1_section1
  assign b1mul1 = {{2{a1sumtypeconvert1[15]}}, {a1sumtypeconvert1, 14'b00000000000000}};



  assign b1multypeconvert1 = {{8{b1mul1[31]}}, b1mul1};



  // coeff_b2_section1
  assign gain1_cast = {delay_section1[15], delay_section1};
  assign gain1_cast_1 =  - (gain1_cast);
  assign b2mul1 = {gain1_cast_1[16], {gain1_cast_1, 14'b00000000000000}};



  assign adder_add_cast = {b1multypeconvert1[39], b1multypeconvert1};
  assign adder_add_cast_1 = {{8{b2mul1[31]}}, b2mul1};
  assign adder_add_cast_2 = {adder_add_cast_1[39], adder_add_cast_1};
  assign adder_add_temp = adder_add_cast + adder_add_cast_2;
  assign b1sum1 = ((adder_add_temp[40] == 1'b0) && (adder_add_temp[39] != 1'b0) ? 40'sh7FFFFFFFFF :
              ((adder_add_temp[40] == 1'b1) && (adder_add_temp[39] != 1'b1) ? 40'sh8000000000 :
              $signed(adder_add_temp[39:0])));



  assign output_typeconvert = (((b1sum1[39] == 1'b0) && (b1sum1[38:29] != 10'b0000000000)) || ((b1sum1[39] == 1'b0) && (b1sum1[29:14] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((b1sum1[39] == 1'b1) && (b1sum1[38:29] != 10'b1111111111) ? 16'sb1000000000000000 :
              b1sum1[29:14] + $signed({1'b0, b1sum1[13] & (b1sum1[14] | (|b1sum1[12:0]))})));



  assign Constant_out1 = 16'b1000000000000000;



  assign Add_add_cast = {{16{output_typeconvert[15]}}, output_typeconvert};
  assign Add_add_cast_1 = {1'b0, {Constant_out1, 15'b000000000000000}};
  assign Add_add_temp = Add_add_cast + Add_add_cast_1;
  assign Add_out1 = Add_add_temp[30:15];



  always @(posedge clk or posedge reset)
    begin : Out_bypass_process
      if (reset == 1'b1) begin
        Add_out1_last_value <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Add_out1_last_value <= Add_out1_bypass;
        end
      end
    end



  assign Add_out1_bypass = (Enable == 1'b0 ? Add_out1_last_value :
              Add_out1);



  assign Out = Add_out1_bypass;

endmodule  // highpass

