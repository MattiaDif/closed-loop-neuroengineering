// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v9\previous_sample_storage2.v
// Created: 2021-05-13 14:07:46
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: previous_sample_storage2
// Source Path: CustArch_v9/cust_architecture/process_and_retrieve/previous_sample_storage2
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module previous_sample_storage2
          (clk,
           reset,
           enb,
           new_previous_sample,
           input_state_AC_TRUE,
           write_porcessing_addr_read_from_storage_addr_1,
           previous_sample_0,
           previous_sample_1);


  input   clk;
  input   reset;
  input   enb;
  input   signed [31:0] new_previous_sample;  // sfix32_En9
  input   input_state_AC_TRUE;
  input   [8:0] write_porcessing_addr_read_from_storage_addr_1;  // ufix9
  output  signed [31:0] previous_sample_0;  // sfix32_En9
  output  signed [31:0] previous_sample_1;  // sfix32_En9


  wire alpha1st_out1;
  reg [8:0] write_porcessing_addr_read_from_storage_addr_1_1;  // ufix9
  reg [8:0] reduced_reg [0:1];  // ufix9 [2]
  wire [8:0] reduced_reg_next [0:1];  // ufix9 [2]
  wire [8:0] write_porcessing_addr_read_from_storage_addr_1_2;  // ufix9
  wire [9:0] Bit_Concat_out1;  // ufix10
  reg  input_state_AC_TRUE_1;
  reg  [0:1] reduced_reg_1;  // ufix1 [2]
  wire [0:1] reduced_reg_next_1;  // ufix1 [2]
  wire input_state_AC_TRUE_2;
  wire [9:0] PreviousData_read_out1;  // ufix10
  wire Detect_Change_out1;
  wire switch_compare_1;
  wire Constant_out1;
  wire [9:0] Constant_out1_dtc;  // ufix10
  wire [9:0] Switch_out1;  // ufix10
  wire signed [31:0] PreviousData1_storage_out1;  // sfix32_En9
  wire signed [31:0] PreviousData1_storage_out2;  // sfix32_En9
  reg [9:0] Delay4_out1;  // ufix10
  reg  Delay5_out1;
  wire signed [31:0] PreviousData1_storage1_out1;  // sfix32_En9
  wire signed [31:0] PreviousData1_storage1_out2;  // sfix32_En9

  // ritardo scrittura su data2 1 campione


  assign alpha1st_out1 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : reduced_process
      if (reset == 1'b1) begin
        write_porcessing_addr_read_from_storage_addr_1_1 <= 9'b000000000;
      end
      else begin
        if (enb) begin
          write_porcessing_addr_read_from_storage_addr_1_1 <= write_porcessing_addr_read_from_storage_addr_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        reduced_reg[0] <= 9'b000000000;
        reduced_reg[1] <= 9'b000000000;
      end
      else begin
        if (enb) begin
          reduced_reg[0] <= reduced_reg_next[0];
          reduced_reg[1] <= reduced_reg_next[1];
        end
      end
    end

  assign write_porcessing_addr_read_from_storage_addr_1_2 = reduced_reg[1];
  assign reduced_reg_next[0] = write_porcessing_addr_read_from_storage_addr_1_1;
  assign reduced_reg_next[1] = reduced_reg[0];



  assign Bit_Concat_out1 = {alpha1st_out1, write_porcessing_addr_read_from_storage_addr_1_2};



  always @(posedge clk or posedge reset)
    begin : reduced_2_process
      if (reset == 1'b1) begin
        input_state_AC_TRUE_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          input_state_AC_TRUE_1 <= input_state_AC_TRUE;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reduced_3_process
      if (reset == 1'b1) begin
        reduced_reg_1[0] <= 1'b0;
        reduced_reg_1[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          reduced_reg_1[0] <= reduced_reg_next_1[0];
          reduced_reg_1[1] <= reduced_reg_next_1[1];
        end
      end
    end

  assign input_state_AC_TRUE_2 = reduced_reg_1[1];
  assign reduced_reg_next_1[0] = input_state_AC_TRUE_1;
  assign reduced_reg_next_1[1] = reduced_reg_1[0];



  PreviousData_read u_PreviousData_read (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .u2(write_porcessing_addr_read_from_storage_addr_1_1),  // ufix9
                                         .Enable(input_state_AC_TRUE_1),
                                         .y(PreviousData_read_out1)  // ufix10
                                         );

  Detect_Change u_Detect_Change (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .U(PreviousData_read_out1),  // ufix10
                                 .Y(Detect_Change_out1)
                                 );

  assign switch_compare_1 = Detect_Change_out1 > 1'b0;



  assign Constant_out1 = 1'b0;



  assign Constant_out1_dtc = {9'b0, Constant_out1};



  assign Switch_out1 = (switch_compare_1 == 1'b0 ? Constant_out1_dtc :
              PreviousData_read_out1);



  DualPortRAM_generic #(.AddrWidth(10),
                        .DataWidth(32)
                        )
                      u_PreviousData1_storage (.clk(clk),
                                               .enb(enb),
                                               .wr_din(new_previous_sample),
                                               .wr_addr(Bit_Concat_out1),
                                               .wr_en(input_state_AC_TRUE_2),
                                               .rd_addr(Switch_out1),
                                               .wr_dout(PreviousData1_storage_out1),
                                               .rd_dout(PreviousData1_storage_out2)
                                               );

  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 10'b0000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Switch_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= input_state_AC_TRUE_1;
        end
      end
    end



  DualPortRAM_generic #(.AddrWidth(10),
                        .DataWidth(32)
                        )
                      u_PreviousData1_storage1 (.clk(clk),
                                                .enb(enb),
                                                .wr_din(PreviousData1_storage_out2),
                                                .wr_addr(Delay4_out1),
                                                .wr_en(Delay5_out1),
                                                .rd_addr(Switch_out1),
                                                .wr_dout(PreviousData1_storage1_out1),
                                                .rd_dout(PreviousData1_storage1_out2)
                                                );

  assign previous_sample_0 = PreviousData1_storage1_out2;

  assign previous_sample_1 = PreviousData1_storage_out2;

endmodule  // previous_sample_storage2

