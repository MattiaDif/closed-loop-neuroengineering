// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v9\digital_filter.v
// Created: 2021-05-13 14:07:46
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: digital_filter
// Source Path: CustArch_v9/cust_architecture/process_and_retrieve/digital_filter
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module digital_filter
          (clk,
           reset,
           enb,
           current_sample,
           previous_sample_0,
           previous_sample_1,
           Enable,
           filter_output,
           new_previous_sample);


  input   clk;
  input   reset;
  input   enb;
  input   [15:0] current_sample;  // uint16
  input   signed [31:0] previous_sample_0;  // sfix32_En9
  input   signed [31:0] previous_sample_1;  // sfix32_En9
  input   Enable;
  output  [15:0] filter_output;  // uint16
  output  signed [31:0] new_previous_sample;  // sfix32_En9


  wire input_state_AC_TRUE_3;
  wire [15:0] Constant_out1;  // uint16
  wire signed [16:0] Subtract_sub_temp;  // sfix17
  wire signed [16:0] Subtract_1;  // sfix17
  wire signed [16:0] Subtract_2;  // sfix17
  wire signed [15:0] Subtract_out1;  // sfix16_En1
  wire signed [31:0] HP_Butter_2nd_out1;  // sfix32_En20
  wire signed [31:0] HP_Butter_2nd_out2;  // sfix32_En9
  wire [15:0] Constant1_out1;  // uint16
  wire signed [37:0] Subtract1_add_cast;  // sfix38_En20
  wire signed [37:0] Subtract1_add_cast_1;  // sfix38_En20
  wire signed [37:0] Subtract1_add_temp;  // sfix38_En20
  wire [15:0] Subtract1_out1;  // uint16
  wire [15:0] Subtract1_out1_bypass;  // uint16
  reg [15:0] Subtract1_out1_last_value;  // uint16
  wire signed [31:0] HP_Butter_2nd_out2_bypass;  // sfix32_En9
  reg signed [31:0] HP_Butter_2nd_out2_last_value;  // sfix32_En9


  assign input_state_AC_TRUE_3 = Enable;

  assign Constant_out1 = 16'b1000000000000000;



  assign Subtract_1 = {1'b0, current_sample};
  assign Subtract_2 = {1'b0, Constant_out1};
  assign Subtract_sub_temp = Subtract_1 - Subtract_2;
  assign Subtract_out1 = {Subtract_sub_temp[14:0], 1'b0};



  HP_Butter_2nd u_HP_Butter_2nd (.new_raw(Subtract_out1),  // sfix16_En1
                                 .previous_samples_0(previous_sample_0),  // sfix32_En9
                                 .previous_samples_1(previous_sample_1),  // sfix32_En9
                                 .new_fitlered(HP_Butter_2nd_out1),  // sfix32_En20
                                 .new_previous(HP_Butter_2nd_out2)  // sfix32_En9
                                 );

  assign Constant1_out1 = 16'b1000000000000000;



  assign Subtract1_add_cast = {{6{HP_Butter_2nd_out1[31]}}, HP_Butter_2nd_out1};
  assign Subtract1_add_cast_1 = {2'b0, {Constant1_out1, 20'b00000000000000000000}};
  assign Subtract1_add_temp = Subtract1_add_cast + Subtract1_add_cast_1;
  assign Subtract1_out1 = Subtract1_add_temp[35:20];



  always @(posedge clk or posedge reset)
    begin : filter_output_bypass_process
      if (reset == 1'b1) begin
        Subtract1_out1_last_value <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Subtract1_out1_last_value <= Subtract1_out1_bypass;
        end
      end
    end



  assign Subtract1_out1_bypass = (input_state_AC_TRUE_3 == 1'b0 ? Subtract1_out1_last_value :
              Subtract1_out1);



  assign filter_output = Subtract1_out1_bypass;

  always @(posedge clk or posedge reset)
    begin : new_previous_sample_bypass_process
      if (reset == 1'b1) begin
        HP_Butter_2nd_out2_last_value <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          HP_Butter_2nd_out2_last_value <= HP_Butter_2nd_out2_bypass;
        end
      end
    end



  assign HP_Butter_2nd_out2_bypass = (input_state_AC_TRUE_3 == 1'b0 ? HP_Butter_2nd_out2_last_value :
              HP_Butter_2nd_out2);



  assign new_previous_sample = HP_Butter_2nd_out2_bypass;

endmodule  // digital_filter

