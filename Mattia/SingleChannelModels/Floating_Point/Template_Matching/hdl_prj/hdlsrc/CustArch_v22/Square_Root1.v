// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\CustArch_v22\Square_Root1.v
// Created: 2021-09-20 15:43:05
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Square_Root1
// Source Path: LocalMaximaAdaptiveThreshold/RMS_computation/Square Root1
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Square_Root1
          (din,
           dout);


  input   [39:0] din;  // ufix40
  output  [15:0] dout;  // uint16


  wire [15:0] base0;  // ufix16
  wire [15:0] base1;  // ufix16
  wire [15:0] base2;  // ufix16
  wire [15:0] base3;  // ufix16
  wire [15:0] base4;  // ufix16
  wire [15:0] base5;  // ufix16
  wire [15:0] base6;  // ufix16
  wire [15:0] base7;  // ufix16
  wire [15:0] base8;  // ufix16
  wire [15:0] base9;  // ufix16
  wire [15:0] base10;  // ufix16
  wire [15:0] base11;  // ufix16
  wire [15:0] base12;  // ufix16
  wire [15:0] base13;  // ufix16
  wire [15:0] base14;  // ufix16
  wire [31:0] base15sqr;  // ufix32
  wire [31:0] resizedin;  // ufix32
  wire relop_relop1;
  wire [15:0] rootini;  // ufix16
  wire [15:0] base15;  // ufix16
  wire [15:0] root15;  // ufix16
  wire [16:0] adder_add_temp;  // ufix17
  wire [16:0] adder_1;  // ufix17
  wire [16:0] adder_2;  // ufix17
  wire [15:0] roottmp14;  // ufix16
  wire [31:0] yy14;  // ufix32
  wire relop_relop1_1;
  wire [15:0] root14;  // ufix16
  wire [16:0] adder_add_temp_1;  // ufix17
  wire [16:0] adder_4;  // ufix17
  wire [16:0] adder_5;  // ufix17
  wire [15:0] roottmp13;  // ufix16
  wire [31:0] yy13;  // ufix32
  wire relop_relop1_2;
  wire [15:0] root13;  // ufix16
  wire [16:0] adder_add_temp_2;  // ufix17
  wire [16:0] adder_7;  // ufix17
  wire [16:0] adder_8;  // ufix17
  wire [15:0] roottmp12;  // ufix16
  wire [31:0] yy12;  // ufix32
  wire relop_relop1_3;
  wire [15:0] root12;  // ufix16
  wire [16:0] adder_add_temp_3;  // ufix17
  wire [16:0] adder_10;  // ufix17
  wire [16:0] adder_11;  // ufix17
  wire [15:0] roottmp11;  // ufix16
  wire [31:0] yy11;  // ufix32
  wire relop_relop1_4;
  wire [15:0] root11;  // ufix16
  wire [16:0] adder_add_temp_4;  // ufix17
  wire [16:0] adder_13;  // ufix17
  wire [16:0] adder_14;  // ufix17
  wire [15:0] roottmp10;  // ufix16
  wire [31:0] yy10;  // ufix32
  wire relop_relop1_5;
  wire [15:0] root10;  // ufix16
  wire [16:0] adder_add_temp_5;  // ufix17
  wire [16:0] adder_16;  // ufix17
  wire [16:0] adder_17;  // ufix17
  wire [15:0] roottmp9;  // ufix16
  wire [31:0] yy9;  // ufix32
  wire relop_relop1_6;
  wire [15:0] root9;  // ufix16
  wire [16:0] adder_add_temp_6;  // ufix17
  wire [16:0] adder_19;  // ufix17
  wire [16:0] adder_20;  // ufix17
  wire [15:0] roottmp8;  // ufix16
  wire [31:0] yy8;  // ufix32
  wire relop_relop1_7;
  wire [15:0] root8;  // ufix16
  wire [16:0] adder_add_temp_7;  // ufix17
  wire [16:0] adder_22;  // ufix17
  wire [16:0] adder_23;  // ufix17
  wire [15:0] roottmp7;  // ufix16
  wire [31:0] yy7;  // ufix32
  wire relop_relop1_8;
  wire [15:0] root7;  // ufix16
  wire [16:0] adder_add_temp_8;  // ufix17
  wire [16:0] adder_25;  // ufix17
  wire [16:0] adder_26;  // ufix17
  wire [15:0] roottmp6;  // ufix16
  wire [31:0] yy6;  // ufix32
  wire relop_relop1_9;
  wire [15:0] root6;  // ufix16
  wire [16:0] adder_add_temp_9;  // ufix17
  wire [16:0] adder_28;  // ufix17
  wire [16:0] adder_29;  // ufix17
  wire [15:0] roottmp5;  // ufix16
  wire [31:0] yy5;  // ufix32
  wire relop_relop1_10;
  wire [15:0] root5;  // ufix16
  wire [16:0] adder_add_temp_10;  // ufix17
  wire [16:0] adder_31;  // ufix17
  wire [16:0] adder_32;  // ufix17
  wire [15:0] roottmp4;  // ufix16
  wire [31:0] yy4;  // ufix32
  wire relop_relop1_11;
  wire [15:0] root4;  // ufix16
  wire [16:0] adder_add_temp_11;  // ufix17
  wire [16:0] adder_34;  // ufix17
  wire [16:0] adder_35;  // ufix17
  wire [15:0] roottmp3;  // ufix16
  wire [31:0] yy3;  // ufix32
  wire relop_relop1_12;
  wire [15:0] root3;  // ufix16
  wire [16:0] adder_add_temp_12;  // ufix17
  wire [16:0] adder_37;  // ufix17
  wire [16:0] adder_38;  // ufix17
  wire [15:0] roottmp2;  // ufix16
  wire [31:0] yy2;  // ufix32
  wire relop_relop1_13;
  wire [15:0] root2;  // ufix16
  wire [16:0] adder_add_temp_13;  // ufix17
  wire [16:0] adder_40;  // ufix17
  wire [16:0] adder_41;  // ufix17
  wire [15:0] roottmp1;  // ufix16
  wire [31:0] yy1;  // ufix32
  wire relop_relop1_14;
  wire [15:0] root1;  // ufix16
  wire [16:0] adder_add_temp_14;  // ufix17
  wire [16:0] adder_43;  // ufix17
  wire [16:0] adder_44;  // ufix17
  wire [15:0] roottmp0;  // ufix16
  wire [31:0] yy0;  // ufix32
  wire relop_relop1_15;
  wire [15:0] root0;  // ufix16

  // Sqrt Implementation using Multiplier


  assign base0 = 16'b0000000000000001;



  assign base1 = 16'b0000000000000010;



  assign base2 = 16'b0000000000000100;



  assign base3 = 16'b0000000000001000;



  assign base4 = 16'b0000000000010000;



  assign base5 = 16'b0000000000100000;



  assign base6 = 16'b0000000001000000;



  assign base7 = 16'b0000000010000000;



  assign base8 = 16'b0000000100000000;



  assign base9 = 16'b0000001000000000;



  assign base10 = 16'b0000010000000000;



  assign base11 = 16'b0000100000000000;



  assign base12 = 16'b0001000000000000;



  assign base13 = 16'b0010000000000000;



  assign base14 = 16'b0100000000000000;



  assign base15sqr = 32'b01000000000000000000000000000000;



  assign resizedin = (din[39:32] != 8'b00000000 ? 32'b11111111111111111111111111111111 :
              din[31:0]);



  assign relop_relop1 = base15sqr <= resizedin;



  assign rootini = 16'b0000000000000000;



  assign base15 = 16'b1000000000000000;



  assign root15 = (relop_relop1 == 1'b0 ? rootini :
              base15);



  assign adder_1 = {1'b0, base14};
  assign adder_2 = {1'b0, root15};
  assign adder_add_temp = adder_1 + adder_2;
  assign roottmp14 = (adder_add_temp[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp[15:0]);



  assign yy14 = roottmp14 * roottmp14;



  assign relop_relop1_1 = yy14 <= resizedin;



  assign root14 = (relop_relop1_1 == 1'b0 ? root15 :
              roottmp14);



  assign adder_4 = {1'b0, base13};
  assign adder_5 = {1'b0, root14};
  assign adder_add_temp_1 = adder_4 + adder_5;
  assign roottmp13 = (adder_add_temp_1[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_1[15:0]);



  assign yy13 = roottmp13 * roottmp13;



  assign relop_relop1_2 = yy13 <= resizedin;



  assign root13 = (relop_relop1_2 == 1'b0 ? root14 :
              roottmp13);



  assign adder_7 = {1'b0, base12};
  assign adder_8 = {1'b0, root13};
  assign adder_add_temp_2 = adder_7 + adder_8;
  assign roottmp12 = (adder_add_temp_2[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_2[15:0]);



  assign yy12 = roottmp12 * roottmp12;



  assign relop_relop1_3 = yy12 <= resizedin;



  assign root12 = (relop_relop1_3 == 1'b0 ? root13 :
              roottmp12);



  assign adder_10 = {1'b0, base11};
  assign adder_11 = {1'b0, root12};
  assign adder_add_temp_3 = adder_10 + adder_11;
  assign roottmp11 = (adder_add_temp_3[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_3[15:0]);



  assign yy11 = roottmp11 * roottmp11;



  assign relop_relop1_4 = yy11 <= resizedin;



  assign root11 = (relop_relop1_4 == 1'b0 ? root12 :
              roottmp11);



  assign adder_13 = {1'b0, base10};
  assign adder_14 = {1'b0, root11};
  assign adder_add_temp_4 = adder_13 + adder_14;
  assign roottmp10 = (adder_add_temp_4[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_4[15:0]);



  assign yy10 = roottmp10 * roottmp10;



  assign relop_relop1_5 = yy10 <= resizedin;



  assign root10 = (relop_relop1_5 == 1'b0 ? root11 :
              roottmp10);



  assign adder_16 = {1'b0, base9};
  assign adder_17 = {1'b0, root10};
  assign adder_add_temp_5 = adder_16 + adder_17;
  assign roottmp9 = (adder_add_temp_5[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_5[15:0]);



  assign yy9 = roottmp9 * roottmp9;



  assign relop_relop1_6 = yy9 <= resizedin;



  assign root9 = (relop_relop1_6 == 1'b0 ? root10 :
              roottmp9);



  assign adder_19 = {1'b0, base8};
  assign adder_20 = {1'b0, root9};
  assign adder_add_temp_6 = adder_19 + adder_20;
  assign roottmp8 = (adder_add_temp_6[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_6[15:0]);



  assign yy8 = roottmp8 * roottmp8;



  assign relop_relop1_7 = yy8 <= resizedin;



  assign root8 = (relop_relop1_7 == 1'b0 ? root9 :
              roottmp8);



  assign adder_22 = {1'b0, base7};
  assign adder_23 = {1'b0, root8};
  assign adder_add_temp_7 = adder_22 + adder_23;
  assign roottmp7 = (adder_add_temp_7[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_7[15:0]);



  assign yy7 = roottmp7 * roottmp7;



  assign relop_relop1_8 = yy7 <= resizedin;



  assign root7 = (relop_relop1_8 == 1'b0 ? root8 :
              roottmp7);



  assign adder_25 = {1'b0, base6};
  assign adder_26 = {1'b0, root7};
  assign adder_add_temp_8 = adder_25 + adder_26;
  assign roottmp6 = (adder_add_temp_8[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_8[15:0]);



  assign yy6 = roottmp6 * roottmp6;



  assign relop_relop1_9 = yy6 <= resizedin;



  assign root6 = (relop_relop1_9 == 1'b0 ? root7 :
              roottmp6);



  assign adder_28 = {1'b0, base5};
  assign adder_29 = {1'b0, root6};
  assign adder_add_temp_9 = adder_28 + adder_29;
  assign roottmp5 = (adder_add_temp_9[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_9[15:0]);



  assign yy5 = roottmp5 * roottmp5;



  assign relop_relop1_10 = yy5 <= resizedin;



  assign root5 = (relop_relop1_10 == 1'b0 ? root6 :
              roottmp5);



  assign adder_31 = {1'b0, base4};
  assign adder_32 = {1'b0, root5};
  assign adder_add_temp_10 = adder_31 + adder_32;
  assign roottmp4 = (adder_add_temp_10[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_10[15:0]);



  assign yy4 = roottmp4 * roottmp4;



  assign relop_relop1_11 = yy4 <= resizedin;



  assign root4 = (relop_relop1_11 == 1'b0 ? root5 :
              roottmp4);



  assign adder_34 = {1'b0, base3};
  assign adder_35 = {1'b0, root4};
  assign adder_add_temp_11 = adder_34 + adder_35;
  assign roottmp3 = (adder_add_temp_11[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_11[15:0]);



  assign yy3 = roottmp3 * roottmp3;



  assign relop_relop1_12 = yy3 <= resizedin;



  assign root3 = (relop_relop1_12 == 1'b0 ? root4 :
              roottmp3);



  assign adder_37 = {1'b0, base2};
  assign adder_38 = {1'b0, root3};
  assign adder_add_temp_12 = adder_37 + adder_38;
  assign roottmp2 = (adder_add_temp_12[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_12[15:0]);



  assign yy2 = roottmp2 * roottmp2;



  assign relop_relop1_13 = yy2 <= resizedin;



  assign root2 = (relop_relop1_13 == 1'b0 ? root3 :
              roottmp2);



  assign adder_40 = {1'b0, base1};
  assign adder_41 = {1'b0, root2};
  assign adder_add_temp_13 = adder_40 + adder_41;
  assign roottmp1 = (adder_add_temp_13[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_13[15:0]);



  assign yy1 = roottmp1 * roottmp1;



  assign relop_relop1_14 = yy1 <= resizedin;



  assign root1 = (relop_relop1_14 == 1'b0 ? root2 :
              roottmp1);



  assign adder_43 = {1'b0, base0};
  assign adder_44 = {1'b0, root1};
  assign adder_add_temp_14 = adder_43 + adder_44;
  assign roottmp0 = (adder_add_temp_14[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_14[15:0]);



  assign yy0 = roottmp0 * roottmp0;



  assign relop_relop1_15 = yy0 <= resizedin;



  assign root0 = (relop_relop1_15 == 1'b0 ? root1 :
              roottmp0);



  assign dout = root0;



endmodule  // Square_Root1

